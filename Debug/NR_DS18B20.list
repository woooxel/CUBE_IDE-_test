
NR_DS18B20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007524  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08007638  08007638  00017638  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007abc  08007abc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007abc  08007abc  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007abc  08007abc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007abc  08007abc  00017abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ac0  08007ac0  00017ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  200001e0  08007ca4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08007ca4  00020338  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c174  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002638  00000000  00000000  0002c37d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002e9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002f3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fca  00000000  00000000  0002fd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d0cb  00000000  00000000  00048cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000891ec  00000000  00000000  00055db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000defa1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003994  00000000  00000000  000deff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800761c 	.word	0x0800761c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800761c 	.word	0x0800761c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	; 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d0a:	2afd      	cmp	r2, #253	; 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	; 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	; 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	; 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <__aeabi_f2iz>:
 8000f58:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f60:	d30f      	bcc.n	8000f82 <__aeabi_f2iz+0x2a>
 8000f62:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f6a:	d90d      	bls.n	8000f88 <__aeabi_f2iz+0x30>
 8000f6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f74:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f78:	fa23 f002 	lsr.w	r0, r3, r2
 8000f7c:	bf18      	it	ne
 8000f7e:	4240      	negne	r0, r0
 8000f80:	4770      	bx	lr
 8000f82:	f04f 0000 	mov.w	r0, #0
 8000f86:	4770      	bx	lr
 8000f88:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f8c:	d101      	bne.n	8000f92 <__aeabi_f2iz+0x3a>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	d105      	bne.n	8000f9e <__aeabi_f2iz+0x46>
 8000f92:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f96:	bf08      	it	eq
 8000f98:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f9c:	4770      	bx	lr
 8000f9e:	f04f 0000 	mov.w	r0, #0
 8000fa2:	4770      	bx	lr

08000fa4 <USART_ReceiveData>:


char *crcOK;

uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000fb6:	b29b      	uxth	r3, r3
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr

08000fc2 <USART_SendData>:

void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000fce:	887b      	ldrh	r3, [r7, #2]
 8000fd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	605a      	str	r2, [r3, #4]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
	...

08000fe4 <usart_setup>:


uint8_t getUsartIndex(void);

void usart_setup(uint32_t baud) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

	ow_uart.Instance = OW_USART;
 8000fec:	4b15      	ldr	r3, [pc, #84]	; (8001044 <usart_setup+0x60>)
 8000fee:	4a16      	ldr	r2, [pc, #88]	; (8001048 <usart_setup+0x64>)
 8000ff0:	601a      	str	r2, [r3, #0]
	ow_uart.Init.BaudRate = baud;
 8000ff2:	4a14      	ldr	r2, [pc, #80]	; (8001044 <usart_setup+0x60>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6053      	str	r3, [r2, #4]
	ow_uart.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <usart_setup+0x60>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
	ow_uart.Init.StopBits = UART_STOPBITS_1;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <usart_setup+0x60>)
 8001000:	2200      	movs	r2, #0
 8001002:	60da      	str	r2, [r3, #12]
	ow_uart.Init.Parity = UART_PARITY_NONE;
 8001004:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <usart_setup+0x60>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
	ow_uart.Init.Mode = UART_MODE_TX_RX;
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <usart_setup+0x60>)
 800100c:	220c      	movs	r2, #12
 800100e:	615a      	str	r2, [r3, #20]
	ow_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <usart_setup+0x60>)
 8001012:	2200      	movs	r2, #0
 8001014:	619a      	str	r2, [r3, #24]
	ow_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <usart_setup+0x60>)
 8001018:	2200      	movs	r2, #0
 800101a:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&ow_uart) != HAL_OK)
 800101c:	4809      	ldr	r0, [pc, #36]	; (8001044 <usart_setup+0x60>)
 800101e:	f002 ff54 	bl	8003eca <HAL_HalfDuplex_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d000      	beq.n	800102a <usart_setup+0x46>
	{
		//	    Error_Handler();
		__asm__("NOP");
 8001028:	bf00      	nop
	}

	__HAL_UART_ENABLE_IT(&ow_uart, UART_IT_RXNE);
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <usart_setup+0x60>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	68da      	ldr	r2, [r3, #12]
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <usart_setup+0x60>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f042 0220 	orr.w	r2, r2, #32
 8001038:	60da      	str	r2, [r3, #12]
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	2000029c 	.word	0x2000029c
 8001048:	40013800 	.word	0x40013800

0800104c <owInit>:

void owInit(OneWire *ow) {
 800104c:	b480      	push	{r7}
 800104e:	b087      	sub	sp, #28
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  int i=0, k = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	2300      	movs	r3, #0
 800105a:	613b      	str	r3, [r7, #16]
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 800105c:	e015      	b.n	800108a <owInit+0x3e>
   uint8_t *r = (uint8_t *)&ow->ids[i];      
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	60fb      	str	r3, [r7, #12]
    k=0;
 8001068:	2300      	movs	r3, #0
 800106a:	613b      	str	r3, [r7, #16]
    for (; k < 8; k++)
 800106c:	e007      	b.n	800107e <owInit+0x32>
    r[k] = 0;
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	4413      	add	r3, r2
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]
    for (; k < 8; k++)
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	3301      	adds	r3, #1
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	2b07      	cmp	r3, #7
 8001082:	ddf4      	ble.n	800106e <owInit+0x22>
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	3301      	adds	r3, #1
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	2b01      	cmp	r3, #1
 800108e:	dde6      	ble.n	800105e <owInit+0x12>
  }
  k=0;
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
  for (; k < 8; k++)
 8001094:	e008      	b.n	80010a8 <owInit+0x5c>
    ow->lastROM[k] = 0x00;
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	4413      	add	r3, r2
 800109c:	3314      	adds	r3, #20
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
  for (; k < 8; k++)
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	3301      	adds	r3, #1
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	2b07      	cmp	r3, #7
 80010ac:	ddf3      	ble.n	8001096 <owInit+0x4a>
  ow->lastDiscrepancy = 64; //Количество подключенных максимально датчиков
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2240      	movs	r2, #64	; 0x40
 80010b2:	611a      	str	r2, [r3, #16]

}
 80010b4:	bf00      	nop
 80010b6:	371c      	adds	r7, #28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
	...

080010c0 <owReadHandler>:

void owReadHandler() { //обработчик прерывания USART
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
  uint8_t index = getUsartIndex();
 80010c6:	f000 f850 	bl	800116a <getUsartIndex>
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
  /* Проверяем, что мы вызвали прерывание из-за RXNE. */
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <owReadHandler+0x70>)
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	f003 0320 	and.w	r3, r3, #32
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d025      	beq.n	8001126 <owReadHandler+0x66>
      ((OW_USART->SR & UART_FLAG_RXNE) != (uint16_t)RESET)) {
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <owReadHandler+0x70>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0320 	and.w	r3, r3, #32
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d01f      	beq.n	8001126 <owReadHandler+0x66>

    /* Получаем данные из периферии и сбрасываем флаг*/
		while ((OW_USART->SR & UART_FLAG_RXNE) == (uint16_t)RESET){;}
 80010e6:	bf00      	nop
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <owReadHandler+0x70>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0320 	and.w	r3, r3, #32
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0f9      	beq.n	80010e8 <owReadHandler+0x28>
    rc_buffer[index] = USART_ReceiveData(OW_USART);              
 80010f4:	79fc      	ldrb	r4, [r7, #7]
 80010f6:	480e      	ldr	r0, [pc, #56]	; (8001130 <owReadHandler+0x70>)
 80010f8:	f7ff ff54 	bl	8000fa4 <USART_ReceiveData>
 80010fc:	4603      	mov	r3, r0
 80010fe:	461a      	mov	r2, r3
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <owReadHandler+0x74>)
 8001102:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    recvFlag &= ~(1 << index);//сбрасываем флаг ответ получен после 
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2201      	movs	r2, #1
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	b25b      	sxtb	r3, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	b25a      	sxtb	r2, r3
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <owReadHandler+0x78>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	b25b      	sxtb	r3, r3
 800111c:	4013      	ands	r3, r2
 800111e:	b25b      	sxtb	r3, r3
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4b05      	ldr	r3, [pc, #20]	; (8001138 <owReadHandler+0x78>)
 8001124:	701a      	strb	r2, [r3, #0]
  }
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	bd90      	pop	{r4, r7, pc}
 800112e:	bf00      	nop
 8001130:	40013800 	.word	0x40013800
 8001134:	20000258 	.word	0x20000258
 8001138:	20000262 	.word	0x20000262

0800113c <owResetCmd>:
 *
 * @param N usart -- выбранный для реализации 1wire usart
 * @return Возвращает 1 если на шине кто-то есть и 0 в противном случае
 */

  uint16_t owResetCmd() {
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
	uint16_t owPresence;
	
	usart_setup(9600);
 8001142:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8001146:	f7ff ff4d 	bl	8000fe4 <usart_setup>

  owSend(0xF0); // Send RESET отправляем импуль сброса
 800114a:	20f0      	movs	r0, #240	; 0xf0
 800114c:	f000 f814 	bl	8001178 <owSend>
  owPresence = owEchoRead(); // Ждём PRESENCE на шине и вовзращаем, что есть
 8001150:	f000 f850 	bl	80011f4 <owEchoRead>
 8001154:	4603      	mov	r3, r0
 8001156:	80fb      	strh	r3, [r7, #6]

	usart_setup(115200);// перенастраиваем скорость UART
 8001158:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800115c:	f7ff ff42 	bl	8000fe4 <usart_setup>
  return owPresence;
 8001160:	88fb      	ldrh	r3, [r7, #6]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <getUsartIndex>:

uint8_t getUsartIndex() {// смотрит по номеру UART c каким будет идти работа
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
//	uint8_t result;
//	if(OW_USART==USART1)result = 0;
//	else if (OW_USART==USART2)result = 1;
//	else if (OW_USART==USART3)result = 2;
	return 0;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <owSend>:

void owSend(uint16_t data) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	80fb      	strh	r3, [r7, #6]
  recvFlag |= (1 << getUsartIndex());//устанавливаем флаг если попадем в обработчик прерывания там он сбросится
 8001182:	f7ff fff2 	bl	800116a <getUsartIndex>
 8001186:	4603      	mov	r3, r0
 8001188:	461a      	mov	r2, r3
 800118a:	2301      	movs	r3, #1
 800118c:	4093      	lsls	r3, r2
 800118e:	b25a      	sxtb	r2, r3
 8001190:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <owSend+0x50>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	b2db      	uxtb	r3, r3
 8001196:	b25b      	sxtb	r3, r3
 8001198:	4313      	orrs	r3, r2
 800119a:	b25b      	sxtb	r3, r3
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <owSend+0x50>)
 80011a0:	701a      	strb	r2, [r3, #0]
  USART_SendData(OW_USART, data);//отправляем данные
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	4619      	mov	r1, r3
 80011a6:	4809      	ldr	r0, [pc, #36]	; (80011cc <owSend+0x54>)
 80011a8:	f7ff ff0b 	bl	8000fc2 <USART_SendData>
	while(__HAL_UART_GET_FLAG(&ow_uart, UART_FLAG_TC) == RESET);//ждем пока передача закончится
 80011ac:	bf00      	nop
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <owSend+0x58>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011b8:	2b40      	cmp	r3, #64	; 0x40
 80011ba:	d1f8      	bne.n	80011ae <owSend+0x36>
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000262 	.word	0x20000262
 80011cc:	40013800 	.word	0x40013800
 80011d0:	2000029c 	.word	0x2000029c

080011d4 <owReadSlot>:

uint8_t owReadSlot(uint16_t data) {//читаем у нас пришла единица или ноль в ответ
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	80fb      	strh	r3, [r7, #6]
  return (data == OW_READ) ? 1 : 0; //если пришло 0xFF, то бит = 1, что то другое бит = 0
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	2bff      	cmp	r3, #255	; 0xff
 80011e2:	bf0c      	ite	eq
 80011e4:	2301      	moveq	r3, #1
 80011e6:	2300      	movne	r3, #0
 80011e8:	b2db      	uxtb	r3, r3
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <owEchoRead>:

uint16_t owEchoRead() {//
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
  uint8_t i = getUsartIndex();//получаем номер USART
 80011fa:	f7ff ffb6 	bl	800116a <getUsartIndex>
 80011fe:	4603      	mov	r3, r0
 8001200:	717b      	strb	r3, [r7, #5]
  uint16_t pause = 1000;
 8001202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001206:	80fb      	strh	r3, [r7, #6]
  while (recvFlag & (1 << i) && pause--);// ждем пока кто-то не ответит но не больше паузы
 8001208:	bf00      	nop
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <owEchoRead+0x48>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	461a      	mov	r2, r3
 8001212:	797b      	ldrb	r3, [r7, #5]
 8001214:	fa42 f303 	asr.w	r3, r2, r3
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	2b00      	cmp	r3, #0
 800121e:	d004      	beq.n	800122a <owEchoRead+0x36>
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	1e5a      	subs	r2, r3, #1
 8001224:	80fa      	strh	r2, [r7, #6]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1ef      	bne.n	800120a <owEchoRead+0x16>
  return rc_buffer[i];//в зависимости от используемого номера UART 
 800122a:	797b      	ldrb	r3, [r7, #5]
 800122c:	4a04      	ldr	r2, [pc, #16]	; (8001240 <owEchoRead+0x4c>)
 800122e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001232:	b29b      	uxth	r3, r3
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000262 	.word	0x20000262
 8001240:	20000258 	.word	0x20000258

08001244 <byteToBits>:

uint8_t *byteToBits(uint8_t ow_byte, uint8_t *bits) {//разлагаем 1 байт на 8 байт ,кодируем так скасказать в посылку для 1wire
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < 8; i++) {
 8001250:	2300      	movs	r3, #0
 8001252:	73fb      	strb	r3, [r7, #15]
 8001254:	e014      	b.n	8001280 <byteToBits+0x3c>
    if (ow_byte & 0x01) {//если текущий бит в байте ==1 то
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	2b00      	cmp	r3, #0
 800125e:	d003      	beq.n	8001268 <byteToBits+0x24>
      *bits = WIRE_1; //заменяем на число которое при передаче по USART для 1wire будет единцией t.e 0xFF
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	22ff      	movs	r2, #255	; 0xff
 8001264:	701a      	strb	r2, [r3, #0]
 8001266:	e002      	b.n	800126e <byteToBits+0x2a>
    } else {
      *bits = WIRE_0;// тоже самое только для 0
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
    }
    bits++;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	3301      	adds	r3, #1
 8001272:	603b      	str	r3, [r7, #0]
    ow_byte = ow_byte >> 1; //сдвигаем обработанный бит
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	085b      	lsrs	r3, r3, #1
 8001278:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	3301      	adds	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	2b07      	cmp	r3, #7
 8001284:	d9e7      	bls.n	8001256 <byteToBits+0x12>
  }
  return bits; //возвращае массив для передачи 
 8001286:	683b      	ldr	r3, [r7, #0]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr

08001292 <owSendByte>:
/**
 * Метод пересылает последовательно 8 байт по одному на каждый бит в data
 * @param usart -- выбранный для эмуляции 1wire UART
 * @param d -- данные
 */
void owSendByte(uint8_t d) {
 8001292:	b580      	push	{r7, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	71fb      	strb	r3, [r7, #7]
  uint8_t data[8];
	int i;
  byteToBits(d, data);//преобразовываем байт в биты "массив байт для  передачи UART и эмуляции 1WIRE"
 800129c:	f107 020c 	add.w	r2, r7, #12
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ffcd 	bl	8001244 <byteToBits>
  for (i = 0; i < 8; ++i) {
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	e00b      	b.n	80012c8 <owSendByte+0x36>
    owSend(data[i]);
 80012b0:	f107 020c 	add.w	r2, r7, #12
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	4413      	add	r3, r2
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff5b 	bl	8001178 <owSend>
  for (i = 0; i < 8; ++i) {
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	3301      	adds	r3, #1
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	2b07      	cmp	r3, #7
 80012cc:	ddf0      	ble.n	80012b0 <owSendByte+0x1e>
  }
}
 80012ce:	bf00      	nop
 80012d0:	bf00      	nop
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <owCRC>:
  }
  return target_byte; //возвращаем полученный байт
}

/* Подсчет CRC8 массива mas длиной Len */
uint8_t owCRC(uint8_t *mas, uint8_t Len) {
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	70fb      	strb	r3, [r7, #3]
  uint8_t i, dat, crc, fb, st_byt;
  st_byt = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	733b      	strb	r3, [r7, #12]
  crc = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	737b      	strb	r3, [r7, #13]
  do {
    dat = mas[st_byt];
 80012ec:	7b3b      	ldrb	r3, [r7, #12]
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 8; i++) {  // счетчик битов в байте
 80012f6:	2300      	movs	r3, #0
 80012f8:	73fb      	strb	r3, [r7, #15]
 80012fa:	e018      	b.n	800132e <owCRC+0x56>
      fb = crc ^ dat;
 80012fc:	7b7a      	ldrb	r2, [r7, #13]
 80012fe:	7bbb      	ldrb	r3, [r7, #14]
 8001300:	4053      	eors	r3, r2
 8001302:	72fb      	strb	r3, [r7, #11]
      fb &= 1;
 8001304:	7afb      	ldrb	r3, [r7, #11]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	72fb      	strb	r3, [r7, #11]
      crc >>= 1;
 800130c:	7b7b      	ldrb	r3, [r7, #13]
 800130e:	085b      	lsrs	r3, r3, #1
 8001310:	737b      	strb	r3, [r7, #13]
      dat >>= 1;
 8001312:	7bbb      	ldrb	r3, [r7, #14]
 8001314:	085b      	lsrs	r3, r3, #1
 8001316:	73bb      	strb	r3, [r7, #14]
      if (fb == 1) crc ^= 0x8c; // полином
 8001318:	7afb      	ldrb	r3, [r7, #11]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d104      	bne.n	8001328 <owCRC+0x50>
 800131e:	7b7b      	ldrb	r3, [r7, #13]
 8001320:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8001324:	43db      	mvns	r3, r3
 8001326:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 8; i++) {  // счетчик битов в байте
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	3301      	adds	r3, #1
 800132c:	73fb      	strb	r3, [r7, #15]
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	2b07      	cmp	r3, #7
 8001332:	d9e3      	bls.n	80012fc <owCRC+0x24>
    }
    st_byt++;
 8001334:	7b3b      	ldrb	r3, [r7, #12]
 8001336:	3301      	adds	r3, #1
 8001338:	733b      	strb	r3, [r7, #12]
  } while (st_byt < Len); // счетчик байтов в массиве
 800133a:	7b3a      	ldrb	r2, [r7, #12]
 800133c:	78fb      	ldrb	r3, [r7, #3]
 800133e:	429a      	cmp	r2, r3
 8001340:	d3d4      	bcc.n	80012ec <owCRC+0x14>
  return crc;
 8001342:	7b7b      	ldrb	r3, [r7, #13]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr

0800134e <owCRC8>:

uint8_t owCRC8(RomCode *rom){
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  return owCRC((uint8_t*)rom, 7);                        
 8001356:	2107      	movs	r1, #7
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ffbd 	bl	80012d8 <owCRC>
 800135e:	4603      	mov	r3, r0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <hasNextRom>:
 * return 0 if hasn't
 * return -1 if error reading happened
 *
 * переделать на функции обратного вызова для реакции на ошибки
 */
int hasNextRom(OneWire *ow, uint8_t *ROM) {//
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
	uint8_t ui32BitNumber = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	77fb      	strb	r3, [r7, #31]
  int zeroFork = -1;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	61bb      	str	r3, [r7, #24]
	uint8_t i = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	75fb      	strb	r3, [r7, #23]
  if (owResetCmd() == ONEWIRE_NOBODY) { //есть ли кто на шине
 8001380:	f7ff fedc 	bl	800113c <owResetCmd>
 8001384:	4603      	mov	r3, r0
 8001386:	2bf0      	cmp	r3, #240	; 0xf0
 8001388:	d101      	bne.n	800138e <hasNextRom+0x26>
    return 0;
 800138a:	2300      	movs	r3, #0
 800138c:	e097      	b.n	80014be <hasNextRom+0x156>
  }
  owSendByte(ONEWIRE_SEARCH);//
 800138e:	20f0      	movs	r0, #240	; 0xf0
 8001390:	f7ff ff7f 	bl	8001292 <owSendByte>
  do {
		uint8_t answerBit =0;
 8001394:	2300      	movs	r3, #0
 8001396:	757b      	strb	r3, [r7, #21]
    int byteNum = ui32BitNumber / 8;
 8001398:	7ffb      	ldrb	r3, [r7, #31]
 800139a:	08db      	lsrs	r3, r3, #3
 800139c:	b2db      	uxtb	r3, r3
 800139e:	613b      	str	r3, [r7, #16]
    uint8_t *current = (ROM) + byteNum;
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	4413      	add	r3, r2
 80013a6:	60fb      	str	r3, [r7, #12]
    uint8_t cB, cmp_cB, searchDirection = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	75bb      	strb	r3, [r7, #22]
    owSend(OW_READ); // чтение прямого бита
 80013ac:	20ff      	movs	r0, #255	; 0xff
 80013ae:	f7ff fee3 	bl	8001178 <owSend>
    cB = owReadSlot(owEchoRead());//ответ от датчика
 80013b2:	f7ff ff1f 	bl	80011f4 <owEchoRead>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff0b 	bl	80011d4 <owReadSlot>
 80013be:	4603      	mov	r3, r0
 80013c0:	72fb      	strb	r3, [r7, #11]
    owSend(OW_READ); // чтение инверсного бита
 80013c2:	20ff      	movs	r0, #255	; 0xff
 80013c4:	f7ff fed8 	bl	8001178 <owSend>
    cmp_cB = owReadSlot(owEchoRead());//ответ от датчика
 80013c8:	f7ff ff14 	bl	80011f4 <owEchoRead>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff ff00 	bl	80011d4 <owReadSlot>
 80013d4:	4603      	mov	r3, r0
 80013d6:	72bb      	strb	r3, [r7, #10]
    if (cB == cmp_cB && cB == 1)//сравниваем два ответа
 80013d8:	7afa      	ldrb	r2, [r7, #11]
 80013da:	7abb      	ldrb	r3, [r7, #10]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d105      	bne.n	80013ec <hasNextRom+0x84>
 80013e0:	7afb      	ldrb	r3, [r7, #11]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d102      	bne.n	80013ec <hasNextRom+0x84>
      return -1;//ошибка никто не ответил 
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	e068      	b.n	80014be <hasNextRom+0x156>
    if (cB != cmp_cB) { //нормальная ситуация пришло либо 10 либо 01
 80013ec:	7afa      	ldrb	r2, [r7, #11]
 80013ee:	7abb      	ldrb	r3, [r7, #10]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d002      	beq.n	80013fa <hasNextRom+0x92>
      searchDirection = cB;//выбираем в каком направлении будем двигатся дальше
 80013f4:	7afb      	ldrb	r3, [r7, #11]
 80013f6:	75bb      	strb	r3, [r7, #22]
 80013f8:	e023      	b.n	8001442 <hasNextRom+0xda>
			} else {//колизия пришло 00 т.е текущий бит у ROM-ов разный
				if (ui32BitNumber == ow->lastDiscrepancy)//если текущая позиция колизии равна прошлой
 80013fa:	7ffa      	ldrb	r2, [r7, #31]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	429a      	cmp	r2, r3
 8001402:	d102      	bne.n	800140a <hasNextRom+0xa2>
        searchDirection = 1;//выбираем в каком направлении будем двигатся дальше
 8001404:	2301      	movs	r3, #1
 8001406:	75bb      	strb	r3, [r7, #22]
 8001408:	e01b      	b.n	8001442 <hasNextRom+0xda>
      else {
        if (ui32BitNumber > ow->lastDiscrepancy) {//если мы зашили дальше
 800140a:	7ffa      	ldrb	r2, [r7, #31]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	429a      	cmp	r2, r3
 8001412:	dd02      	ble.n	800141a <hasNextRom+0xb2>
          searchDirection = 0;//выбираем в каком направлении будем двигатся дальше 
 8001414:	2300      	movs	r3, #0
 8001416:	75bb      	strb	r3, [r7, #22]
 8001418:	e00e      	b.n	8001438 <hasNextRom+0xd0>
        } else {
          searchDirection = (uint8_t) ((ow->lastROM[byteNum] >> ui32BitNumber % 8) & 0x01);
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4413      	add	r3, r2
 8001420:	3314      	adds	r3, #20
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	7ffb      	ldrb	r3, [r7, #31]
 8001428:	f003 0307 	and.w	r3, r3, #7
 800142c:	fa42 f303 	asr.w	r3, r2, r3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	75bb      	strb	r3, [r7, #22]
        }
        if (searchDirection == 0)
 8001438:	7dbb      	ldrb	r3, [r7, #22]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <hasNextRom+0xda>
          zeroFork = ui32BitNumber;//запоминаем развилку
 800143e:	7ffb      	ldrb	r3, [r7, #31]
 8001440:	61bb      	str	r3, [r7, #24]
      }
    }
    // сохраняем бит
    if (searchDirection)
 8001442:	7dbb      	ldrb	r3, [r7, #22]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d00e      	beq.n	8001466 <hasNextRom+0xfe>
      *(current) |= 1 << ui32BitNumber % 8;//выставляем бит в текущем байте байте
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b25a      	sxtb	r2, r3
 800144e:	7ffb      	ldrb	r3, [r7, #31]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	2101      	movs	r1, #1
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	b25b      	sxtb	r3, r3
 800145c:	4313      	orrs	r3, r2
 800145e:	b25b      	sxtb	r3, r3
 8001460:	b2da      	uxtb	r2, r3
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	701a      	strb	r2, [r3, #0]
    answerBit = (uint8_t) ((searchDirection == 0) ? WIRE_0 : WIRE_1);// решаем кого отключить
 8001466:	7dbb      	ldrb	r3, [r7, #22]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <hasNextRom+0x108>
 800146c:	2300      	movs	r3, #0
 800146e:	e000      	b.n	8001472 <hasNextRom+0x10a>
 8001470:	23ff      	movs	r3, #255	; 0xff
 8001472:	757b      	strb	r3, [r7, #21]
    owSend(answerBit);//вырубаем "мешающие" устройсва
 8001474:	7d7b      	ldrb	r3, [r7, #21]
 8001476:	b29b      	uxth	r3, r3
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fe7d 	bl	8001178 <owSend>
    ui32BitNumber++;//ищем следующий бит
 800147e:	7ffb      	ldrb	r3, [r7, #31]
 8001480:	3301      	adds	r3, #1
 8001482:	77fb      	strb	r3, [r7, #31]
		} while (ui32BitNumber < 64);//пока не найден весь ROM все биты
 8001484:	7ffb      	ldrb	r3, [r7, #31]
 8001486:	2b3f      	cmp	r3, #63	; 0x3f
 8001488:	d984      	bls.n	8001394 <hasNextRom+0x2c>
  ow->lastDiscrepancy = zeroFork;//запоминаем развилку
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	611a      	str	r2, [r3, #16]
  for (; i < 7; i++)
 8001490:	e00b      	b.n	80014aa <hasNextRom+0x142>
    ow->lastROM[i] = ROM[i];//запоминаем последний ROM
 8001492:	7dfb      	ldrb	r3, [r7, #23]
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	441a      	add	r2, r3
 8001498:	7dfb      	ldrb	r3, [r7, #23]
 800149a:	7811      	ldrb	r1, [r2, #0]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	4413      	add	r3, r2
 80014a0:	460a      	mov	r2, r1
 80014a2:	751a      	strb	r2, [r3, #20]
  for (; i < 7; i++)
 80014a4:	7dfb      	ldrb	r3, [r7, #23]
 80014a6:	3301      	adds	r3, #1
 80014a8:	75fb      	strb	r3, [r7, #23]
 80014aa:	7dfb      	ldrb	r3, [r7, #23]
 80014ac:	2b06      	cmp	r3, #6
 80014ae:	d9f0      	bls.n	8001492 <hasNextRom+0x12a>
  return ow->lastDiscrepancy > 0;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	bfcc      	ite	gt
 80014b8:	2301      	movgt	r3, #1
 80014ba:	2300      	movle	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3720      	adds	r7, #32
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <owSearchCmd>:

// Возвращает количество устройств на шине или код ошибки, если значение меньше 0
int owSearchCmd(OneWire *ow) {
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b084      	sub	sp, #16
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  int device = 0, nextROM;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
  owInit(ow);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff fdba 	bl	800104c <owInit>
  do {
    nextROM = hasNextRom(ow, (uint8_t*)(&ow->ids[device])); //передаем указатель на структуру куда положить след.ROM
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	4413      	add	r3, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff ff40 	bl	8001368 <hasNextRom>
 80014e8:	60b8      	str	r0, [r7, #8]
    if (nextROM<0)
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	da02      	bge.n	80014f6 <owSearchCmd+0x30>
      return -1;
 80014f0:	f04f 33ff 	mov.w	r3, #4294967295
 80014f4:	e009      	b.n	800150a <owSearchCmd+0x44>
    device++;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	3301      	adds	r3, #1
 80014fa:	60fb      	str	r3, [r7, #12]
		} while (nextROM && device < MAXDEVICES_ON_THE_BUS);//ищем пока кто-то есть и этих кто-то не больше дефайна
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d002      	beq.n	8001508 <owSearchCmd+0x42>
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2b01      	cmp	r3, #1
 8001506:	dde7      	ble.n	80014d8 <owSearchCmd+0x12>
		return device;//возвращаем порядковый номер датчика (устройства) на шине
 8001508:	68fb      	ldr	r3, [r7, #12]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <owMatchRomCmd>:
void owSkipRomCmd(OneWire *ow) {//отправляет команду пропуска ROM после этого следующая команда будет
  owResetCmd();                 //для всех устройств на шине
  owSendByte(ONEWIRE_SKIP_ROM);
}

void owMatchRomCmd(RomCode *rom) {//позволяет мастеру обращаться к конкретному  ведомому устройству
 8001512:	b580      	push	{r7, lr}
 8001514:	b084      	sub	sp, #16
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
	int i = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
  owResetCmd();
 800151e:	f7ff fe0d 	bl	800113c <owResetCmd>
  owSendByte(ONEWIRE_MATCH_ROM);//обращаемся к конкретному устройсву
 8001522:	2055      	movs	r0, #85	; 0x55
 8001524:	f7ff feb5 	bl	8001292 <owSendByte>
  for (; i < 8; i++)
 8001528:	e009      	b.n	800153e <owMatchRomCmd+0x2c>
	owSendByte(*(((uint8_t *) rom) + i));//"перебираемся по структуре как по массиву" первой звездочкой получаем i тый байт из структуры
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	4413      	add	r3, r2
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fead 	bl	8001292 <owSendByte>
  for (; i < 8; i++)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	3301      	adds	r3, #1
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2b07      	cmp	r3, #7
 8001542:	ddf2      	ble.n	800152a <owMatchRomCmd+0x18>
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <owConvertTemperatureCmd>:

void owConvertTemperatureCmd(OneWire *ow, RomCode *rom) {
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
 8001556:	6039      	str	r1, [r7, #0]
  owMatchRomCmd(rom);//позволяет мастеру обращаться к конкретному  ведомому устройству
 8001558:	6838      	ldr	r0, [r7, #0]
 800155a:	f7ff ffda 	bl	8001512 <owMatchRomCmd>
  owSendByte(ONEWIRE_CONVERT_TEMPERATURE);//говорим датчику пора бы преобразовать температуру
 800155e:	2044      	movs	r0, #68	; 0x44
 8001560:	f7ff fe97 	bl	8001292 <owSendByte>
}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <owReadScratchpadCmd>:
 * @param ow -- OneWire pointer
 * @param rom -- selected device on the bus
 * @param data -- buffer for data
 * @return data
 */
uint8_t *owReadScratchpadCmd(OneWire *ow, RomCode *rom, uint8_t *data) {//читаем память датчика
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  uint16_t b = 0, p;
 8001578:	2300      	movs	r3, #0
 800157a:	82fb      	strh	r3, [r7, #22]
  switch (rom->family) {
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b10      	cmp	r3, #16
 8001582:	d001      	beq.n	8001588 <owReadScratchpadCmd+0x1c>
 8001584:	2b28      	cmp	r3, #40	; 0x28
 8001586:	d109      	bne.n	800159c <owReadScratchpadCmd+0x30>
    case DS18B20:
    case DS18S20:
      p = 72;  //9*8 =72 == равняется 9 байт данных
 8001588:	2348      	movs	r3, #72	; 0x48
 800158a:	82bb      	strh	r3, [r7, #20]
      break;
 800158c:	bf00      	nop
    default:
      return data;

  }
  owMatchRomCmd(rom);
 800158e:	68b8      	ldr	r0, [r7, #8]
 8001590:	f7ff ffbf 	bl	8001512 <owMatchRomCmd>
  owSendByte(ONEWIRE_READ_SCRATCHPAD);//отправляем команду на чтение памяти
 8001594:	20be      	movs	r0, #190	; 0xbe
 8001596:	f7ff fe7c 	bl	8001292 <owSendByte>
  while (b < p) {// пока мы не обработали 9 байт 
 800159a:	e048      	b.n	800162e <owReadScratchpadCmd+0xc2>
      return data;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	e04b      	b.n	8001638 <owReadScratchpadCmd+0xcc>
    uint8_t pos = (uint8_t) ((p - 8) / 8 - (b / 8)); //позиция обрабатываемого байта
 80015a0:	8abb      	ldrh	r3, [r7, #20]
 80015a2:	3b08      	subs	r3, #8
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	da00      	bge.n	80015aa <owReadScratchpadCmd+0x3e>
 80015a8:	3307      	adds	r3, #7
 80015aa:	10db      	asrs	r3, r3, #3
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	8afb      	ldrh	r3, [r7, #22]
 80015b0:	08db      	lsrs	r3, r3, #3
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	74fb      	strb	r3, [r7, #19]
    uint8_t bt; 
		owSend(OW_READ);
 80015ba:	20ff      	movs	r0, #255	; 0xff
 80015bc:	f7ff fddc 	bl	8001178 <owSend>
    bt = owReadSlot(owEchoRead());//читаем данные 
 80015c0:	f7ff fe18 	bl	80011f4 <owEchoRead>
 80015c4:	4603      	mov	r3, r0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fe04 	bl	80011d4 <owReadSlot>
 80015cc:	4603      	mov	r3, r0
 80015ce:	74bb      	strb	r3, [r7, #18]
    if (bt == 1)
 80015d0:	7cbb      	ldrb	r3, [r7, #18]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d113      	bne.n	80015fe <owReadScratchpadCmd+0x92>
      data[pos] |= 1 << b % 8;//выставляем бит в нужной позиции
 80015d6:	7cfb      	ldrb	r3, [r7, #19]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	4413      	add	r3, r2
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	b25a      	sxtb	r2, r3
 80015e0:	8afb      	ldrh	r3, [r7, #22]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	2101      	movs	r1, #1
 80015e8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	4313      	orrs	r3, r2
 80015f0:	b259      	sxtb	r1, r3
 80015f2:	7cfb      	ldrb	r3, [r7, #19]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	4413      	add	r3, r2
 80015f8:	b2ca      	uxtb	r2, r1
 80015fa:	701a      	strb	r2, [r3, #0]
 80015fc:	e014      	b.n	8001628 <owReadScratchpadCmd+0xbc>
    else
      data[pos] &= ~(1 << b % 8);//сбрасываем бит в нужной позиции
 80015fe:	7cfb      	ldrb	r3, [r7, #19]
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	4413      	add	r3, r2
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	b25a      	sxtb	r2, r3
 8001608:	8afb      	ldrh	r3, [r7, #22]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	2101      	movs	r1, #1
 8001610:	fa01 f303 	lsl.w	r3, r1, r3
 8001614:	b25b      	sxtb	r3, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	b25b      	sxtb	r3, r3
 800161a:	4013      	ands	r3, r2
 800161c:	b259      	sxtb	r1, r3
 800161e:	7cfb      	ldrb	r3, [r7, #19]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	4413      	add	r3, r2
 8001624:	b2ca      	uxtb	r2, r1
 8001626:	701a      	strb	r2, [r3, #0]
    b++;//следующий бит
 8001628:	8afb      	ldrh	r3, [r7, #22]
 800162a:	3301      	adds	r3, #1
 800162c:	82fb      	strh	r3, [r7, #22]
  while (b < p) {// пока мы не обработали 9 байт 
 800162e:	8afa      	ldrh	r2, [r7, #22]
 8001630:	8abb      	ldrh	r3, [r7, #20]
 8001632:	429a      	cmp	r2, r3
 8001634:	d3b4      	bcc.n	80015a0 <owReadScratchpadCmd+0x34>
  }
  return data;
 8001636:	687b      	ldr	r3, [r7, #4]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <readTemperature>:
 * @param ow -- OneWire bus pointer
 * @param rom -- selected device
 * @param reSense -- do you want resense temp for next time?
 * @return struct with data
 */
Temperature readTemperature(OneWire *ow, RomCode *rom, uint8_t reSense) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b08c      	sub	sp, #48	; 0x30
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	4613      	mov	r3, r2
 800164c:	71fb      	strb	r3, [r7, #7]
	Scratchpad_DS18B20 *sp;
	Scratchpad_DS18S20 *spP;
  Temperature t;
	uint8_t pad[9];
  t.inCelsus = 0x00;
 800164e:	2300      	movs	r3, #0
 8001650:	f887 3020 	strb.w	r3, [r7, #32]
  t.frac = 0x00;
 8001654:	2300      	movs	r3, #0
 8001656:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sp = (Scratchpad_DS18B20 *) &pad; 
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
  spP = (Scratchpad_DS18S20 *) &pad;
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
  switch (rom->family) {
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b10      	cmp	r3, #16
 800166c:	d022      	beq.n	80016b4 <readTemperature+0x74>
 800166e:	2b28      	cmp	r3, #40	; 0x28
 8001670:	d13a      	bne.n	80016e8 <readTemperature+0xa8>
    case DS18B20:
      owReadScratchpadCmd(ow, rom, pad);//читаем память  для DS18B20
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	461a      	mov	r2, r3
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f7ff ff76 	bl	800156c <owReadScratchpadCmd>
      t.inCelsus = (int8_t) (sp->temp_msb << 4) | (sp->temp_lsb >> 4);//целая часть
 8001680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001682:	79db      	ldrb	r3, [r3, #7]
 8001684:	011b      	lsls	r3, r3, #4
 8001686:	b25a      	sxtb	r2, r3
 8001688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168a:	7a1b      	ldrb	r3, [r3, #8]
 800168c:	091b      	lsrs	r3, r3, #4
 800168e:	b2db      	uxtb	r3, r3
 8001690:	b25b      	sxtb	r3, r3
 8001692:	4313      	orrs	r3, r2
 8001694:	b25b      	sxtb	r3, r3
 8001696:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) ((((sp->temp_lsb & 0x0F)) * 10) >> 4);//дробная
 800169a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169c:	7a1b      	ldrb	r3, [r3, #8]
 800169e:	f003 020f 	and.w	r2, r3, #15
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	111b      	asrs	r3, r3, #4
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      break;
 80016b2:	e01c      	b.n	80016ee <readTemperature+0xae>
    case DS18S20:
      owReadScratchpadCmd(ow, rom, pad);//читаем память  для DS18S20
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	461a      	mov	r2, r3
 80016ba:	68b9      	ldr	r1, [r7, #8]
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f7ff ff55 	bl	800156c <owReadScratchpadCmd>
      t.inCelsus = spP->temp_lsb >> 1;
 80016c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c4:	7a1b      	ldrb	r3, [r3, #8]
 80016c6:	085b      	lsrs	r3, r3, #1
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	b25b      	sxtb	r3, r3
 80016cc:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) 5 * (spP->temp_lsb & 0x01);
 80016d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d2:	7a1b      	ldrb	r3, [r3, #8]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	461a      	mov	r2, r3
 80016dc:	0092      	lsls	r2, r2, #2
 80016de:	4413      	add	r3, r2
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      break;
 80016e6:	e002      	b.n	80016ee <readTemperature+0xae>
    default:
      return t;
 80016e8:	8c3b      	ldrh	r3, [r7, #32]
 80016ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 80016ec:	e008      	b.n	8001700 <readTemperature+0xc0>
  }
  if (reSense) {
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <readTemperature+0xbc>
    owConvertTemperatureCmd(ow, rom);//можно сразу после как забрали данные отдаем датчику команду на преобразования температуры
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f7ff ff29 	bl	800154e <owConvertTemperatureCmd>
  }
  return t;
 80016fc:	8c3b      	ldrh	r3, [r7, #32]
 80016fe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001700:	2300      	movs	r3, #0
 8001702:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001706:	f362 0307 	bfi	r3, r2, #0, #8
 800170a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800170e:	f362 230f 	bfi	r3, r2, #8, #8
}
 8001712:	4618      	mov	r0, r3
 8001714:	3730      	adds	r7, #48	; 0x30
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <get_ROMid>:
  owMatchRomCmd(rom);
  owSendByte(ONEWIRE_RECALL_E2);
}


int get_ROMid (void){
 800171c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171e:	b089      	sub	sp, #36	; 0x24
 8001720:	af06      	add	r7, sp, #24
	if (owResetCmd() != ONEWIRE_NOBODY) {    // is anybody on the bus?
 8001722:	f7ff fd0b 	bl	800113c <owResetCmd>
 8001726:	4603      	mov	r3, r0
 8001728:	2bf0      	cmp	r3, #240	; 0xf0
 800172a:	d079      	beq.n	8001820 <get_ROMid+0x104>
		devices = owSearchCmd(&ow);        // получить ROMid в�?ех у�?трой�?т на шине или вернуть код ошибки
 800172c:	484e      	ldr	r0, [pc, #312]	; (8001868 <get_ROMid+0x14c>)
 800172e:	f7ff feca 	bl	80014c6 <owSearchCmd>
 8001732:	4603      	mov	r3, r0
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4b4d      	ldr	r3, [pc, #308]	; (800186c <get_ROMid+0x150>)
 8001738:	701a      	strb	r2, [r3, #0]
		if (devices <= 0) {
 800173a:	4b4c      	ldr	r3, [pc, #304]	; (800186c <get_ROMid+0x150>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d113      	bne.n	800176a <get_ROMid+0x4e>
			while (1){
				pDelay = 1000000;
 8001742:	4b4b      	ldr	r3, [pc, #300]	; (8001870 <get_ROMid+0x154>)
 8001744:	4a4b      	ldr	r2, [pc, #300]	; (8001874 <get_ROMid+0x158>)
 8001746:	601a      	str	r2, [r3, #0]
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 8001748:	4b4b      	ldr	r3, [pc, #300]	; (8001878 <get_ROMid+0x15c>)
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	e005      	b.n	800175c <get_ROMid+0x40>
					__asm__("nop");
 8001750:	bf00      	nop
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 8001752:	4b49      	ldr	r3, [pc, #292]	; (8001878 <get_ROMid+0x15c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	3301      	adds	r3, #1
 8001758:	4a47      	ldr	r2, [pc, #284]	; (8001878 <get_ROMid+0x15c>)
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	4b46      	ldr	r3, [pc, #280]	; (8001878 <get_ROMid+0x15c>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b43      	ldr	r3, [pc, #268]	; (8001870 <get_ROMid+0x154>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	429a      	cmp	r2, r3
 8001766:	d3f3      	bcc.n	8001750 <get_ROMid+0x34>
				pDelay = 1000000;
 8001768:	e7eb      	b.n	8001742 <get_ROMid+0x26>
			}

		}
		i = 0;
 800176a:	4b43      	ldr	r3, [pc, #268]	; (8001878 <get_ROMid+0x15c>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
		for (; i < devices; i++) {//выводим в кон�?оль в�?е найденные ROM
 8001770:	e04f      	b.n	8001812 <get_ROMid+0xf6>
			RomCode *r = &ow.ids[i];
 8001772:	4b41      	ldr	r3, [pc, #260]	; (8001878 <get_ROMid+0x15c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	4a3b      	ldr	r2, [pc, #236]	; (8001868 <get_ROMid+0x14c>)
 800177a:	4413      	add	r3, r2
 800177c:	607b      	str	r3, [r7, #4]
			uint8_t crc = owCRC8(r);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff fde5 	bl	800134e <owCRC8>
 8001784:	4603      	mov	r3, r0
 8001786:	70fb      	strb	r3, [r7, #3]
			crcOK = (crc == r->crc)?"CRC OK":"CRC ERROR!";
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	79db      	ldrb	r3, [r3, #7]
 800178c:	78fa      	ldrb	r2, [r7, #3]
 800178e:	429a      	cmp	r2, r3
 8001790:	d101      	bne.n	8001796 <get_ROMid+0x7a>
 8001792:	4b3a      	ldr	r3, [pc, #232]	; (800187c <get_ROMid+0x160>)
 8001794:	e000      	b.n	8001798 <get_ROMid+0x7c>
 8001796:	4b3a      	ldr	r3, [pc, #232]	; (8001880 <get_ROMid+0x164>)
 8001798:	4a3a      	ldr	r2, [pc, #232]	; (8001884 <get_ROMid+0x168>)
 800179a:	6013      	str	r3, [r2, #0]
			devInfo.device = i;
 800179c:	4b36      	ldr	r3, [pc, #216]	; (8001878 <get_ROMid+0x15c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b39      	ldr	r3, [pc, #228]	; (8001888 <get_ROMid+0x16c>)
 80017a4:	601a      	str	r2, [r3, #0]

			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	461e      	mov	r6, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	799b      	ldrb	r3, [r3, #6]
 80017b0:	469c      	mov	ip, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	795b      	ldrb	r3, [r3, #5]
 80017b6:	461a      	mov	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	791b      	ldrb	r3, [r3, #4]
 80017bc:	4619      	mov	r1, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	78db      	ldrb	r3, [r3, #3]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 80017c2:	4618      	mov	r0, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	789b      	ldrb	r3, [r3, #2]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 80017c8:	461c      	mov	r4, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	785b      	ldrb	r3, [r3, #1]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 80017ce:	461d      	mov	r5, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	79db      	ldrb	r3, [r3, #7]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 80017d4:	9305      	str	r3, [sp, #20]
 80017d6:	9504      	str	r5, [sp, #16]
 80017d8:	9403      	str	r4, [sp, #12]
 80017da:	9002      	str	r0, [sp, #8]
 80017dc:	9101      	str	r1, [sp, #4]
 80017de:	9200      	str	r2, [sp, #0]
 80017e0:	4663      	mov	r3, ip
 80017e2:	4632      	mov	r2, r6
 80017e4:	4929      	ldr	r1, [pc, #164]	; (800188c <get_ROMid+0x170>)
 80017e6:	482a      	ldr	r0, [pc, #168]	; (8001890 <get_ROMid+0x174>)
 80017e8:	f003 fce0 	bl	80051ac <siprintf>

			if (crc != r->crc) {
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	79db      	ldrb	r3, [r3, #7]
 80017f0:	78fa      	ldrb	r2, [r7, #3]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d008      	beq.n	8001808 <get_ROMid+0xec>
				devInfo.device = i;
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <get_ROMid+0x15c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	461a      	mov	r2, r3
 80017fc:	4b22      	ldr	r3, [pc, #136]	; (8001888 <get_ROMid+0x16c>)
 80017fe:	601a      	str	r2, [r3, #0]
				sprintf (devInfo.info,"\n can't read cause CNC error");
 8001800:	4924      	ldr	r1, [pc, #144]	; (8001894 <get_ROMid+0x178>)
 8001802:	4823      	ldr	r0, [pc, #140]	; (8001890 <get_ROMid+0x174>)
 8001804:	f003 fcd2 	bl	80051ac <siprintf>
		for (; i < devices; i++) {//выводим в кон�?оль в�?е найденные ROM
 8001808:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <get_ROMid+0x15c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	3301      	adds	r3, #1
 800180e:	4a1a      	ldr	r2, [pc, #104]	; (8001878 <get_ROMid+0x15c>)
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b16      	ldr	r3, [pc, #88]	; (800186c <get_ROMid+0x150>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	4b17      	ldr	r3, [pc, #92]	; (8001878 <get_ROMid+0x15c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d8a8      	bhi.n	8001772 <get_ROMid+0x56>
			}
		}

	}
	pDelay = 1000000;
 8001820:	4b13      	ldr	r3, [pc, #76]	; (8001870 <get_ROMid+0x154>)
 8001822:	4a14      	ldr	r2, [pc, #80]	; (8001874 <get_ROMid+0x158>)
 8001824:	601a      	str	r2, [r3, #0]
	for (i = 0; i < pDelay * 1; i++)
 8001826:	4b14      	ldr	r3, [pc, #80]	; (8001878 <get_ROMid+0x15c>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	e005      	b.n	800183a <get_ROMid+0x11e>
		__asm__("nop");
 800182e:	bf00      	nop
	for (i = 0; i < pDelay * 1; i++)
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <get_ROMid+0x15c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	3301      	adds	r3, #1
 8001836:	4a10      	ldr	r2, [pc, #64]	; (8001878 <get_ROMid+0x15c>)
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <get_ROMid+0x15c>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <get_ROMid+0x154>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d3f3      	bcc.n	800182e <get_ROMid+0x112>

	if (strcmp(crcOK,"CRC OK") == 0) return 0;
 8001846:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <get_ROMid+0x168>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	490c      	ldr	r1, [pc, #48]	; (800187c <get_ROMid+0x160>)
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fc7f 	bl	8000150 <strcmp>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <get_ROMid+0x140>
 8001858:	2300      	movs	r3, #0
 800185a:	e001      	b.n	8001860 <get_ROMid+0x144>
	else return -1;
 800185c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001860:	4618      	mov	r0, r3
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001868:	2000020c 	.word	0x2000020c
 800186c:	20000264 	.word	0x20000264
 8001870:	20000000 	.word	0x20000000
 8001874:	000f4240 	.word	0x000f4240
 8001878:	20000254 	.word	0x20000254
 800187c:	08007638 	.word	0x08007638
 8001880:	08007640 	.word	0x08007640
 8001884:	20000268 	.word	0x20000268
 8001888:	20000228 	.word	0x20000228
 800188c:	0800764c 	.word	0x0800764c
 8001890:	2000022c 	.word	0x2000022c
 8001894:	08007674 	.word	0x08007674

08001898 <get_Temperature>:

void get_Temperature (void)
{
 8001898:	b598      	push	{r3, r4, r7, lr}
 800189a:	af00      	add	r7, sp, #0
	i=0;
 800189c:	4b3f      	ldr	r3, [pc, #252]	; (800199c <get_Temperature+0x104>)
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
	for (; i < devices; i++) {
 80018a2:	e071      	b.n	8001988 <get_Temperature+0xf0>
		switch ((ow.ids[i]).family) {//че у нас за датчик
 80018a4:	4b3d      	ldr	r3, [pc, #244]	; (800199c <get_Temperature+0x104>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a3d      	ldr	r2, [pc, #244]	; (80019a0 <get_Temperature+0x108>)
 80018aa:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80018ae:	2b28      	cmp	r3, #40	; 0x28
 80018b0:	d006      	beq.n	80018c0 <get_Temperature+0x28>
 80018b2:	2b28      	cmp	r3, #40	; 0x28
 80018b4:	dc60      	bgt.n	8001978 <get_Temperature+0xe0>
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d060      	beq.n	800197c <get_Temperature+0xe4>
 80018ba:	2b10      	cmp	r3, #16
 80018bc:	d02e      	beq.n	800191c <get_Temperature+0x84>
			break;
		case 0x00:
			break;
		default:
			// error handler
			break;
 80018be:	e05b      	b.n	8001978 <get_Temperature+0xe0>
			t = readTemperature(&ow, &ow.ids[i], 1);
 80018c0:	4b36      	ldr	r3, [pc, #216]	; (800199c <get_Temperature+0x104>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	4a36      	ldr	r2, [pc, #216]	; (80019a0 <get_Temperature+0x108>)
 80018c8:	4413      	add	r3, r2
 80018ca:	2201      	movs	r2, #1
 80018cc:	4619      	mov	r1, r3
 80018ce:	4834      	ldr	r0, [pc, #208]	; (80019a0 <get_Temperature+0x108>)
 80018d0:	f7ff feb6 	bl	8001640 <readTemperature>
 80018d4:	4602      	mov	r2, r0
 80018d6:	4b33      	ldr	r3, [pc, #204]	; (80019a4 <get_Temperature+0x10c>)
 80018d8:	b212      	sxth	r2, r2
 80018da:	4611      	mov	r1, r2
 80018dc:	7019      	strb	r1, [r3, #0]
 80018de:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80018e2:	705a      	strb	r2, [r3, #1]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 80018e4:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <get_Temperature+0x10c>)
 80018e6:	f993 3000 	ldrsb.w	r3, [r3]
 80018ea:	461a      	mov	r2, r3
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b2b      	ldr	r3, [pc, #172]	; (80019a4 <get_Temperature+0x10c>)
 80018f8:	785b      	ldrb	r3, [r3, #1]
 80018fa:	4413      	add	r3, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff f987 	bl	8000c10 <__aeabi_i2f>
 8001902:	4603      	mov	r3, r0
 8001904:	4a25      	ldr	r2, [pc, #148]	; (800199c <get_Temperature+0x104>)
 8001906:	6814      	ldr	r4, [r2, #0]
 8001908:	4927      	ldr	r1, [pc, #156]	; (80019a8 <get_Temperature+0x110>)
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fa88 	bl	8000e20 <__aeabi_fdiv>
 8001910:	4603      	mov	r3, r0
 8001912:	461a      	mov	r2, r3
 8001914:	4b25      	ldr	r3, [pc, #148]	; (80019ac <get_Temperature+0x114>)
 8001916:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			break;
 800191a:	e030      	b.n	800197e <get_Temperature+0xe6>
			t = readTemperature(&ow, &ow.ids[i], 1);
 800191c:	4b1f      	ldr	r3, [pc, #124]	; (800199c <get_Temperature+0x104>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	4a1f      	ldr	r2, [pc, #124]	; (80019a0 <get_Temperature+0x108>)
 8001924:	4413      	add	r3, r2
 8001926:	2201      	movs	r2, #1
 8001928:	4619      	mov	r1, r3
 800192a:	481d      	ldr	r0, [pc, #116]	; (80019a0 <get_Temperature+0x108>)
 800192c:	f7ff fe88 	bl	8001640 <readTemperature>
 8001930:	4602      	mov	r2, r0
 8001932:	4b1c      	ldr	r3, [pc, #112]	; (80019a4 <get_Temperature+0x10c>)
 8001934:	b212      	sxth	r2, r2
 8001936:	4611      	mov	r1, r2
 8001938:	7019      	strb	r1, [r3, #0]
 800193a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800193e:	705a      	strb	r2, [r3, #1]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 8001940:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <get_Temperature+0x10c>)
 8001942:	f993 3000 	ldrsb.w	r3, [r3]
 8001946:	461a      	mov	r2, r3
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	461a      	mov	r2, r3
 8001952:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <get_Temperature+0x10c>)
 8001954:	785b      	ldrb	r3, [r3, #1]
 8001956:	4413      	add	r3, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff f959 	bl	8000c10 <__aeabi_i2f>
 800195e:	4603      	mov	r3, r0
 8001960:	4a0e      	ldr	r2, [pc, #56]	; (800199c <get_Temperature+0x104>)
 8001962:	6814      	ldr	r4, [r2, #0]
 8001964:	4910      	ldr	r1, [pc, #64]	; (80019a8 <get_Temperature+0x110>)
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fa5a 	bl	8000e20 <__aeabi_fdiv>
 800196c:	4603      	mov	r3, r0
 800196e:	461a      	mov	r2, r3
 8001970:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <get_Temperature+0x114>)
 8001972:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			break;
 8001976:	e002      	b.n	800197e <get_Temperature+0xe6>
			break;
 8001978:	bf00      	nop
 800197a:	e000      	b.n	800197e <get_Temperature+0xe6>
			break;
 800197c:	bf00      	nop
	for (; i < devices; i++) {
 800197e:	4b07      	ldr	r3, [pc, #28]	; (800199c <get_Temperature+0x104>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	3301      	adds	r3, #1
 8001984:	4a05      	ldr	r2, [pc, #20]	; (800199c <get_Temperature+0x104>)
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <get_Temperature+0x118>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	4b03      	ldr	r3, [pc, #12]	; (800199c <get_Temperature+0x104>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d886      	bhi.n	80018a4 <get_Temperature+0xc>
		}
	}
//	pDelay = 4000000;
//	for (i = 0; i < pDelay * 1; i++){}   /* Wait a bit. */
}
 8001996:	bf00      	nop
 8001998:	bf00      	nop
 800199a:	bd98      	pop	{r3, r4, r7, pc}
 800199c:	20000254 	.word	0x20000254
 80019a0:	2000020c 	.word	0x2000020c
 80019a4:	20000208 	.word	0x20000208
 80019a8:	41200000 	.word	0x41200000
 80019ac:	2000024c 	.word	0x2000024c
 80019b0:	20000264 	.word	0x20000264

080019b4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80019c4:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <MX_ADC1_Init+0x74>)
 80019c6:	4a19      	ldr	r2, [pc, #100]	; (8001a2c <MX_ADC1_Init+0x78>)
 80019c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019ca:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <MX_ADC1_Init+0x74>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019d0:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <MX_ADC1_Init+0x74>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019d6:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <MX_ADC1_Init+0x74>)
 80019d8:	2200      	movs	r2, #0
 80019da:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <MX_ADC1_Init+0x74>)
 80019de:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80019e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019e4:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <MX_ADC1_Init+0x74>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80019ea:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <MX_ADC1_Init+0x74>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019f0:	480d      	ldr	r0, [pc, #52]	; (8001a28 <MX_ADC1_Init+0x74>)
 80019f2:	f000 fc11 	bl	8002218 <HAL_ADC_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80019fc:	f000 f951 	bl	8001ca2 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a04:	2301      	movs	r3, #1
 8001a06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4805      	ldr	r0, [pc, #20]	; (8001a28 <MX_ADC1_Init+0x74>)
 8001a12:	f000 ff9b 	bl	800294c <HAL_ADC_ConfigChannel>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001a1c:	f000 f941 	bl	8001ca2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a20:	bf00      	nop
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	2000026c 	.word	0x2000026c
 8001a2c:	40012400 	.word	0x40012400

08001a30 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a18      	ldr	r2, [pc, #96]	; (8001aac <HAL_ADC_MspInit+0x7c>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d129      	bne.n	8001aa4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a50:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <HAL_ADC_MspInit+0x80>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	4a16      	ldr	r2, [pc, #88]	; (8001ab0 <HAL_ADC_MspInit+0x80>)
 8001a56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a5a:	6193      	str	r3, [r2, #24]
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <HAL_ADC_MspInit+0x80>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <HAL_ADC_MspInit+0x80>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	4a10      	ldr	r2, [pc, #64]	; (8001ab0 <HAL_ADC_MspInit+0x80>)
 8001a6e:	f043 0304 	orr.w	r3, r3, #4
 8001a72:	6193      	str	r3, [r2, #24]
 8001a74:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <HAL_ADC_MspInit+0x80>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a80:	2301      	movs	r3, #1
 8001a82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a84:	2303      	movs	r3, #3
 8001a86:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a88:	f107 0310 	add.w	r3, r7, #16
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4809      	ldr	r0, [pc, #36]	; (8001ab4 <HAL_ADC_MspInit+0x84>)
 8001a90:	f001 fab6 	bl	8003000 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2100      	movs	r1, #0
 8001a98:	2012      	movs	r0, #18
 8001a9a:	f001 f9ca 	bl	8002e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001a9e:	2012      	movs	r0, #18
 8001aa0:	f001 f9e3 	bl	8002e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	3720      	adds	r7, #32
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40012400 	.word	0x40012400
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40010800 	.word	0x40010800

08001ab8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <MX_GPIO_Init+0x40>)
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	4a0d      	ldr	r2, [pc, #52]	; (8001af8 <MX_GPIO_Init+0x40>)
 8001ac4:	f043 0320 	orr.w	r3, r3, #32
 8001ac8:	6193      	str	r3, [r2, #24]
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <MX_GPIO_Init+0x40>)
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	f003 0320 	and.w	r3, r3, #32
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <MX_GPIO_Init+0x40>)
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	4a07      	ldr	r2, [pc, #28]	; (8001af8 <MX_GPIO_Init+0x40>)
 8001adc:	f043 0304 	orr.w	r3, r3, #4
 8001ae0:	6193      	str	r3, [r2, #24]
 8001ae2:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <MX_GPIO_Init+0x40>)
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]

}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	40021000 	.word	0x40021000

08001afc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b00:	b0a2      	sub	sp, #136	; 0x88
 8001b02:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	float i =0;
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	677b      	str	r3, [r7, #116]	; 0x74
	float k = 0.00115;
 8001b0a:	4b33      	ldr	r3, [pc, #204]	; (8001bd8 <main+0xdc>)
 8001b0c:	673b      	str	r3, [r7, #112]	; 0x70
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b0e:	f000 fafd 	bl	800210c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b12:	f000 f86b 	bl	8001bec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b16:	f7ff ffcf 	bl	8001ab8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001b1a:	f000 f9fd 	bl	8001f18 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001b1e:	f000 fa25 	bl	8001f6c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001b22:	f7ff ff47 	bl	80019b4 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  get_ROMid();
 8001b26:	f7ff fdf9 	bl	800171c <get_ROMid>
  while (1)
  {
	  HAL_ADC_Start(&hadc1); //Start A-D converting
 8001b2a:	482c      	ldr	r0, [pc, #176]	; (8001bdc <main+0xe0>)
 8001b2c:	f000 fc4c 	bl	80023c8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100); //Waiting for end of converting
 8001b30:	2164      	movs	r1, #100	; 0x64
 8001b32:	482a      	ldr	r0, [pc, #168]	; (8001bdc <main+0xe0>)
 8001b34:	f000 fd22 	bl	800257c <HAL_ADC_PollForConversion>
	  i = HAL_ADC_GetValue(&hadc1);  //Take values from ADC.
 8001b38:	4828      	ldr	r0, [pc, #160]	; (8001bdc <main+0xe0>)
 8001b3a:	f000 fe25 	bl	8002788 <HAL_ADC_GetValue>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff f861 	bl	8000c08 <__aeabi_ui2f>
 8001b46:	4603      	mov	r3, r0
 8001b48:	677b      	str	r3, [r7, #116]	; 0x74
	  HAL_ADC_Stop(&hadc1); //Stop converting
 8001b4a:	4824      	ldr	r0, [pc, #144]	; (8001bdc <main+0xe0>)
 8001b4c:	f000 fcea 	bl	8002524 <HAL_ADC_Stop>
	  volt = i*k*2;
 8001b50:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001b52:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001b54:	f7ff f8b0 	bl	8000cb8 <__aeabi_fmul>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe ffa3 	bl	8000aa8 <__addsf3>
 8001b62:	4603      	mov	r3, r0
 8001b64:	66fb      	str	r3, [r7, #108]	; 0x6c
	  current = i*k;
 8001b66:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001b68:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001b6a:	f7ff f8a5 	bl	8000cb8 <__aeabi_fmul>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	66bb      	str	r3, [r7, #104]	; 0x68
	  get_Temperature();
 8001b72:	f7ff fe91 	bl	8001898 <get_Temperature>
	  HAL_Delay(2000);
 8001b76:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b7a:	f000 fb29 	bl	80021d0 <HAL_Delay>
	  char buffer[100];
	  sprintf(buffer, "%d,%d,%f,%f\n",(int)Temp[0], (int)Temp[1], volt, current);
 8001b7e:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <main+0xe4>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff f9e8 	bl	8000f58 <__aeabi_f2iz>
 8001b88:	4606      	mov	r6, r0
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <main+0xe4>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff f9e2 	bl	8000f58 <__aeabi_f2iz>
 8001b94:	4680      	mov	r8, r0
 8001b96:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001b98:	f7fe fc50 	bl	800043c <__aeabi_f2d>
 8001b9c:	4604      	mov	r4, r0
 8001b9e:	460d      	mov	r5, r1
 8001ba0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001ba2:	f7fe fc4b 	bl	800043c <__aeabi_f2d>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	1d38      	adds	r0, r7, #4
 8001bac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001bb0:	e9cd 4500 	strd	r4, r5, [sp]
 8001bb4:	4643      	mov	r3, r8
 8001bb6:	4632      	mov	r2, r6
 8001bb8:	490a      	ldr	r1, [pc, #40]	; (8001be4 <main+0xe8>)
 8001bba:	f003 faf7 	bl	80051ac <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe facf 	bl	8000164 <strlen>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	1d39      	adds	r1, r7, #4
 8001bcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd0:	4805      	ldr	r0, [pc, #20]	; (8001be8 <main+0xec>)
 8001bd2:	f002 f9cf 	bl	8003f74 <HAL_UART_Transmit>
  {
 8001bd6:	e7a8      	b.n	8001b2a <main+0x2e>
 8001bd8:	3a96bb99 	.word	0x3a96bb99
 8001bdc:	2000026c 	.word	0x2000026c
 8001be0:	2000024c 	.word	0x2000024c
 8001be4:	08007694 	.word	0x08007694
 8001be8:	200002e0 	.word	0x200002e0

08001bec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b094      	sub	sp, #80	; 0x50
 8001bf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bf2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bf6:	2228      	movs	r2, #40	; 0x28
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f002 fe6e 	bl	80048dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	609a      	str	r2, [r3, #8]
 8001c1a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c26:	2300      	movs	r3, #0
 8001c28:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c38:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c42:	4618      	mov	r0, r3
 8001c44:	f001 fb60 	bl	8003308 <HAL_RCC_OscConfig>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001c4e:	f000 f828 	bl	8001ca2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c52:	230f      	movs	r3, #15
 8001c54:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c56:	2302      	movs	r3, #2
 8001c58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c62:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c64:	2300      	movs	r3, #0
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c68:	f107 0314 	add.w	r3, r7, #20
 8001c6c:	2102      	movs	r1, #2
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f001 fdca 	bl	8003808 <HAL_RCC_ClockConfig>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001c7a:	f000 f812 	bl	8001ca2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001c82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c86:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f001 ff56 	bl	8003b3c <HAL_RCCEx_PeriphCLKConfig>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001c96:	f000 f804 	bl	8001ca2 <Error_Handler>
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	3750      	adds	r7, #80	; 0x50
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca6:	b672      	cpsid	i
}
 8001ca8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001caa:	e7fe      	b.n	8001caa <Error_Handler+0x8>

08001cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <HAL_MspInit+0x5c>)
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	4a14      	ldr	r2, [pc, #80]	; (8001d08 <HAL_MspInit+0x5c>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6193      	str	r3, [r2, #24]
 8001cbe:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <HAL_MspInit+0x5c>)
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cca:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <HAL_MspInit+0x5c>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	4a0e      	ldr	r2, [pc, #56]	; (8001d08 <HAL_MspInit+0x5c>)
 8001cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	61d3      	str	r3, [r2, #28]
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <HAL_MspInit+0x5c>)
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cde:	607b      	str	r3, [r7, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <HAL_MspInit+0x60>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <HAL_MspInit+0x60>)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40010000 	.word	0x40010000

08001d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d14:	e7fe      	b.n	8001d14 <NMI_Handler+0x4>

08001d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d1a:	e7fe      	b.n	8001d1a <HardFault_Handler+0x4>

08001d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d20:	e7fe      	b.n	8001d20 <MemManage_Handler+0x4>

08001d22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d26:	e7fe      	b.n	8001d26 <BusFault_Handler+0x4>

08001d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d2c:	e7fe      	b.n	8001d2c <UsageFault_Handler+0x4>

08001d2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr

08001d3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr

08001d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr

08001d52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d56:	f000 fa1f 	bl	8002198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <ADC1_2_IRQHandler+0x10>)
 8001d66:	f000 fd1b 	bl	80027a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	2000026c 	.word	0x2000026c

08001d74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	owReadHandler();
 8001d78:	f7ff f9a2 	bl	80010c0 <owReadHandler>

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d7c:	4802      	ldr	r0, [pc, #8]	; (8001d88 <USART1_IRQHandler+0x14>)
 8001d7e:	f002 f98b 	bl	8004098 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	2000029c 	.word	0x2000029c

08001d8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
	return 1;
 8001d90:	2301      	movs	r3, #1
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr

08001d9a <_kill>:

int _kill(int pid, int sig)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001da4:	f002 fd70 	bl	8004888 <__errno>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2216      	movs	r2, #22
 8001dac:	601a      	str	r2, [r3, #0]
	return -1;
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <_exit>:

void _exit (int status)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001dc2:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff ffe7 	bl	8001d9a <_kill>
	while (1) {}		/* Make sure we hang here */
 8001dcc:	e7fe      	b.n	8001dcc <_exit+0x12>

08001dce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b086      	sub	sp, #24
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	60f8      	str	r0, [r7, #12]
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	e00a      	b.n	8001df6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001de0:	f3af 8000 	nop.w
 8001de4:	4601      	mov	r1, r0
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	60ba      	str	r2, [r7, #8]
 8001dec:	b2ca      	uxtb	r2, r1
 8001dee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	3301      	adds	r3, #1
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	dbf0      	blt.n	8001de0 <_read+0x12>
	}

return len;
 8001dfe:	687b      	ldr	r3, [r7, #4]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	e009      	b.n	8001e2e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	1c5a      	adds	r2, r3, #1
 8001e1e:	60ba      	str	r2, [r7, #8]
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	dbf1      	blt.n	8001e1a <_write+0x12>
	}
	return len;
 8001e36:	687b      	ldr	r3, [r7, #4]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <_close>:

int _close(int file)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	return -1;
 8001e48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr

08001e56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e66:	605a      	str	r2, [r3, #4]
	return 0;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <_isatty>:

int _isatty(int file)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
	return 1;
 8001e7c:	2301      	movs	r3, #1
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr

08001e88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
	return 0;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ea8:	4a14      	ldr	r2, [pc, #80]	; (8001efc <_sbrk+0x5c>)
 8001eaa:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <_sbrk+0x60>)
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <_sbrk+0x64>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d102      	bne.n	8001ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ebc:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <_sbrk+0x64>)
 8001ebe:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <_sbrk+0x68>)
 8001ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <_sbrk+0x64>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d207      	bcs.n	8001ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ed0:	f002 fcda 	bl	8004888 <__errno>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eda:	f04f 33ff 	mov.w	r3, #4294967295
 8001ede:	e009      	b.n	8001ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <_sbrk+0x64>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ee6:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <_sbrk+0x64>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	4a05      	ldr	r2, [pc, #20]	; (8001f04 <_sbrk+0x64>)
 8001ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20005000 	.word	0x20005000
 8001f00:	00000400 	.word	0x00000400
 8001f04:	200001fc 	.word	0x200001fc
 8001f08:	20000338 	.word	0x20000338

08001f0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <MX_USART1_UART_Init+0x4c>)
 8001f1e:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <MX_USART1_UART_Init+0x50>)
 8001f20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <MX_USART1_UART_Init+0x4c>)
 8001f24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <MX_USART1_UART_Init+0x4c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <MX_USART1_UART_Init+0x4c>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f36:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <MX_USART1_UART_Init+0x4c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <MX_USART1_UART_Init+0x4c>)
 8001f3e:	220c      	movs	r2, #12
 8001f40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f42:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <MX_USART1_UART_Init+0x4c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <MX_USART1_UART_Init+0x4c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001f4e:	4805      	ldr	r0, [pc, #20]	; (8001f64 <MX_USART1_UART_Init+0x4c>)
 8001f50:	f001 ffbb 	bl	8003eca <HAL_HalfDuplex_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f5a:	f7ff fea2 	bl	8001ca2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	2000029c 	.word	0x2000029c
 8001f68:	40013800 	.word	0x40013800

08001f6c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f70:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <MX_USART2_UART_Init+0x4c>)
 8001f72:	4a12      	ldr	r2, [pc, #72]	; (8001fbc <MX_USART2_UART_Init+0x50>)
 8001f74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <MX_USART2_UART_Init+0x4c>)
 8001f78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <MX_USART2_UART_Init+0x4c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <MX_USART2_UART_Init+0x4c>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <MX_USART2_UART_Init+0x4c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <MX_USART2_UART_Init+0x4c>)
 8001f92:	220c      	movs	r2, #12
 8001f94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <MX_USART2_UART_Init+0x4c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <MX_USART2_UART_Init+0x4c>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fa2:	4805      	ldr	r0, [pc, #20]	; (8001fb8 <MX_USART2_UART_Init+0x4c>)
 8001fa4:	f001 ff44 	bl	8003e30 <HAL_UART_Init>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fae:	f7ff fe78 	bl	8001ca2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200002e0 	.word	0x200002e0
 8001fbc:	40004400 	.word	0x40004400

08001fc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08a      	sub	sp, #40	; 0x28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 0318 	add.w	r3, r7, #24
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a35      	ldr	r2, [pc, #212]	; (80020b0 <HAL_UART_MspInit+0xf0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d12d      	bne.n	800203c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fe0:	4b34      	ldr	r3, [pc, #208]	; (80020b4 <HAL_UART_MspInit+0xf4>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	4a33      	ldr	r2, [pc, #204]	; (80020b4 <HAL_UART_MspInit+0xf4>)
 8001fe6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fea:	6193      	str	r3, [r2, #24]
 8001fec:	4b31      	ldr	r3, [pc, #196]	; (80020b4 <HAL_UART_MspInit+0xf4>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff8:	4b2e      	ldr	r3, [pc, #184]	; (80020b4 <HAL_UART_MspInit+0xf4>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	4a2d      	ldr	r2, [pc, #180]	; (80020b4 <HAL_UART_MspInit+0xf4>)
 8001ffe:	f043 0304 	orr.w	r3, r3, #4
 8002002:	6193      	str	r3, [r2, #24]
 8002004:	4b2b      	ldr	r3, [pc, #172]	; (80020b4 <HAL_UART_MspInit+0xf4>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002016:	2312      	movs	r3, #18
 8002018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800201a:	2303      	movs	r3, #3
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201e:	f107 0318 	add.w	r3, r7, #24
 8002022:	4619      	mov	r1, r3
 8002024:	4824      	ldr	r0, [pc, #144]	; (80020b8 <HAL_UART_MspInit+0xf8>)
 8002026:	f000 ffeb 	bl	8003000 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800202a:	2200      	movs	r2, #0
 800202c:	2100      	movs	r1, #0
 800202e:	2025      	movs	r0, #37	; 0x25
 8002030:	f000 feff 	bl	8002e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002034:	2025      	movs	r0, #37	; 0x25
 8002036:	f000 ff18 	bl	8002e6a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800203a:	e034      	b.n	80020a6 <HAL_UART_MspInit+0xe6>
  else if(uartHandle->Instance==USART2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a1e      	ldr	r2, [pc, #120]	; (80020bc <HAL_UART_MspInit+0xfc>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d12f      	bne.n	80020a6 <HAL_UART_MspInit+0xe6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002046:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <HAL_UART_MspInit+0xf4>)
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	4a1a      	ldr	r2, [pc, #104]	; (80020b4 <HAL_UART_MspInit+0xf4>)
 800204c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002050:	61d3      	str	r3, [r2, #28]
 8002052:	4b18      	ldr	r3, [pc, #96]	; (80020b4 <HAL_UART_MspInit+0xf4>)
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <HAL_UART_MspInit+0xf4>)
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	4a14      	ldr	r2, [pc, #80]	; (80020b4 <HAL_UART_MspInit+0xf4>)
 8002064:	f043 0304 	orr.w	r3, r3, #4
 8002068:	6193      	str	r3, [r2, #24]
 800206a:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <HAL_UART_MspInit+0xf4>)
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002076:	2304      	movs	r3, #4
 8002078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207a:	2302      	movs	r3, #2
 800207c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800207e:	2303      	movs	r3, #3
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002082:	f107 0318 	add.w	r3, r7, #24
 8002086:	4619      	mov	r1, r3
 8002088:	480b      	ldr	r0, [pc, #44]	; (80020b8 <HAL_UART_MspInit+0xf8>)
 800208a:	f000 ffb9 	bl	8003000 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800208e:	2308      	movs	r3, #8
 8002090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209a:	f107 0318 	add.w	r3, r7, #24
 800209e:	4619      	mov	r1, r3
 80020a0:	4805      	ldr	r0, [pc, #20]	; (80020b8 <HAL_UART_MspInit+0xf8>)
 80020a2:	f000 ffad 	bl	8003000 <HAL_GPIO_Init>
}
 80020a6:	bf00      	nop
 80020a8:	3728      	adds	r7, #40	; 0x28
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40013800 	.word	0x40013800
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40010800 	.word	0x40010800
 80020bc:	40004400 	.word	0x40004400

080020c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020c0:	480c      	ldr	r0, [pc, #48]	; (80020f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020c2:	490d      	ldr	r1, [pc, #52]	; (80020f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020c4:	4a0d      	ldr	r2, [pc, #52]	; (80020fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c8:	e002      	b.n	80020d0 <LoopCopyDataInit>

080020ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ce:	3304      	adds	r3, #4

080020d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d4:	d3f9      	bcc.n	80020ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020d6:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020d8:	4c0a      	ldr	r4, [pc, #40]	; (8002104 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020dc:	e001      	b.n	80020e2 <LoopFillZerobss>

080020de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e0:	3204      	adds	r2, #4

080020e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e4:	d3fb      	bcc.n	80020de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020e6:	f7ff ff11 	bl	8001f0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ea:	f002 fbd3 	bl	8004894 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020ee:	f7ff fd05 	bl	8001afc <main>
  bx lr
 80020f2:	4770      	bx	lr
  ldr r0, =_sdata
 80020f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80020fc:	08007ac4 	.word	0x08007ac4
  ldr r2, =_sbss
 8002100:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002104:	20000338 	.word	0x20000338

08002108 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002108:	e7fe      	b.n	8002108 <CAN1_RX1_IRQHandler>
	...

0800210c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002110:	4b08      	ldr	r3, [pc, #32]	; (8002134 <HAL_Init+0x28>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a07      	ldr	r2, [pc, #28]	; (8002134 <HAL_Init+0x28>)
 8002116:	f043 0310 	orr.w	r3, r3, #16
 800211a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800211c:	2003      	movs	r0, #3
 800211e:	f000 fe7d 	bl	8002e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002122:	200f      	movs	r0, #15
 8002124:	f000 f808 	bl	8002138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002128:	f7ff fdc0 	bl	8001cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40022000 	.word	0x40022000

08002138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002140:	4b12      	ldr	r3, [pc, #72]	; (800218c <HAL_InitTick+0x54>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_InitTick+0x58>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	4619      	mov	r1, r3
 800214a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800214e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002152:	fbb2 f3f3 	udiv	r3, r2, r3
 8002156:	4618      	mov	r0, r3
 8002158:	f000 fe95 	bl	8002e86 <HAL_SYSTICK_Config>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e00e      	b.n	8002184 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b0f      	cmp	r3, #15
 800216a:	d80a      	bhi.n	8002182 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800216c:	2200      	movs	r2, #0
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	f04f 30ff 	mov.w	r0, #4294967295
 8002174:	f000 fe5d 	bl	8002e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002178:	4a06      	ldr	r2, [pc, #24]	; (8002194 <HAL_InitTick+0x5c>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	e000      	b.n	8002184 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
}
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000004 	.word	0x20000004
 8002190:	2000000c 	.word	0x2000000c
 8002194:	20000008 	.word	0x20000008

08002198 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <HAL_IncTick+0x1c>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <HAL_IncTick+0x20>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4413      	add	r3, r2
 80021a8:	4a03      	ldr	r2, [pc, #12]	; (80021b8 <HAL_IncTick+0x20>)
 80021aa:	6013      	str	r3, [r2, #0]
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	2000000c 	.word	0x2000000c
 80021b8:	20000324 	.word	0x20000324

080021bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return uwTick;
 80021c0:	4b02      	ldr	r3, [pc, #8]	; (80021cc <HAL_GetTick+0x10>)
 80021c2:	681b      	ldr	r3, [r3, #0]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr
 80021cc:	20000324 	.word	0x20000324

080021d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d8:	f7ff fff0 	bl	80021bc <HAL_GetTick>
 80021dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e8:	d005      	beq.n	80021f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <HAL_Delay+0x44>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4413      	add	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021f6:	bf00      	nop
 80021f8:	f7ff ffe0 	bl	80021bc <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	429a      	cmp	r2, r3
 8002206:	d8f7      	bhi.n	80021f8 <HAL_Delay+0x28>
  {
  }
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	2000000c 	.word	0x2000000c

08002218 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e0be      	b.n	80023b8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002244:	2b00      	cmp	r3, #0
 8002246:	d109      	bne.n	800225c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff fbea 	bl	8001a30 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 fcc7 	bl	8002bf0 <ADC_ConversionStop_Disable>
 8002262:	4603      	mov	r3, r0
 8002264:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226a:	f003 0310 	and.w	r3, r3, #16
 800226e:	2b00      	cmp	r3, #0
 8002270:	f040 8099 	bne.w	80023a6 <HAL_ADC_Init+0x18e>
 8002274:	7dfb      	ldrb	r3, [r7, #23]
 8002276:	2b00      	cmp	r3, #0
 8002278:	f040 8095 	bne.w	80023a6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002284:	f023 0302 	bic.w	r3, r3, #2
 8002288:	f043 0202 	orr.w	r2, r3, #2
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002298:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	7b1b      	ldrb	r3, [r3, #12]
 800229e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022a0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022b0:	d003      	beq.n	80022ba <HAL_ADC_Init+0xa2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d102      	bne.n	80022c0 <HAL_ADC_Init+0xa8>
 80022ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022be:	e000      	b.n	80022c2 <HAL_ADC_Init+0xaa>
 80022c0:	2300      	movs	r3, #0
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	7d1b      	ldrb	r3, [r3, #20]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d119      	bne.n	8002304 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	7b1b      	ldrb	r3, [r3, #12]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d109      	bne.n	80022ec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	3b01      	subs	r3, #1
 80022de:	035a      	lsls	r2, r3, #13
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	e00b      	b.n	8002304 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	f043 0220 	orr.w	r2, r3, #32
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	f043 0201 	orr.w	r2, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	430a      	orrs	r2, r1
 8002316:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	4b28      	ldr	r3, [pc, #160]	; (80023c0 <HAL_ADC_Init+0x1a8>)
 8002320:	4013      	ands	r3, r2
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	68b9      	ldr	r1, [r7, #8]
 8002328:	430b      	orrs	r3, r1
 800232a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002334:	d003      	beq.n	800233e <HAL_ADC_Init+0x126>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d104      	bne.n	8002348 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	3b01      	subs	r3, #1
 8002344:	051b      	lsls	r3, r3, #20
 8002346:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	430a      	orrs	r2, r1
 800235a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <HAL_ADC_Init+0x1ac>)
 8002364:	4013      	ands	r3, r2
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	429a      	cmp	r2, r3
 800236a:	d10b      	bne.n	8002384 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002376:	f023 0303 	bic.w	r3, r3, #3
 800237a:	f043 0201 	orr.w	r2, r3, #1
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002382:	e018      	b.n	80023b6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002388:	f023 0312 	bic.w	r3, r3, #18
 800238c:	f043 0210 	orr.w	r2, r3, #16
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	f043 0201 	orr.w	r2, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023a4:	e007      	b.n	80023b6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023aa:	f043 0210 	orr.w	r2, r3, #16
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	ffe1f7fd 	.word	0xffe1f7fd
 80023c4:	ff1f0efe 	.word	0xff1f0efe

080023c8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <HAL_ADC_Start+0x1a>
 80023de:	2302      	movs	r3, #2
 80023e0:	e098      	b.n	8002514 <HAL_ADC_Start+0x14c>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 fba6 	bl	8002b3c <ADC_Enable>
 80023f0:	4603      	mov	r3, r0
 80023f2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f040 8087 	bne.w	800250a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002404:	f023 0301 	bic.w	r3, r3, #1
 8002408:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a41      	ldr	r2, [pc, #260]	; (800251c <HAL_ADC_Start+0x154>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d105      	bne.n	8002426 <HAL_ADC_Start+0x5e>
 800241a:	4b41      	ldr	r3, [pc, #260]	; (8002520 <HAL_ADC_Start+0x158>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d115      	bne.n	8002452 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243c:	2b00      	cmp	r3, #0
 800243e:	d026      	beq.n	800248e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002444:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002448:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002450:	e01d      	b.n	800248e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a2f      	ldr	r2, [pc, #188]	; (8002520 <HAL_ADC_Start+0x158>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d004      	beq.n	8002472 <HAL_ADC_Start+0xaa>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a2b      	ldr	r2, [pc, #172]	; (800251c <HAL_ADC_Start+0x154>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d10d      	bne.n	800248e <HAL_ADC_Start+0xc6>
 8002472:	4b2b      	ldr	r3, [pc, #172]	; (8002520 <HAL_ADC_Start+0x158>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247a:	2b00      	cmp	r3, #0
 800247c:	d007      	beq.n	800248e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002482:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002486:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002492:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d006      	beq.n	80024a8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249e:	f023 0206 	bic.w	r2, r3, #6
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80024a6:	e002      	b.n	80024ae <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f06f 0202 	mvn.w	r2, #2
 80024be:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80024ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80024ce:	d113      	bne.n	80024f8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80024d4:	4a11      	ldr	r2, [pc, #68]	; (800251c <HAL_ADC_Start+0x154>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d105      	bne.n	80024e6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80024da:	4b11      	ldr	r3, [pc, #68]	; (8002520 <HAL_ADC_Start+0x158>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d108      	bne.n	80024f8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80024f4:	609a      	str	r2, [r3, #8]
 80024f6:	e00c      	b.n	8002512 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	e003      	b.n	8002512 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002512:	7bfb      	ldrb	r3, [r7, #15]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40012800 	.word	0x40012800
 8002520:	40012400 	.word	0x40012400

08002524 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_ADC_Stop+0x1a>
 800253a:	2302      	movs	r3, #2
 800253c:	e01a      	b.n	8002574 <HAL_ADC_Stop+0x50>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 fb52 	bl	8002bf0 <ADC_ConversionStop_Disable>
 800254c:	4603      	mov	r3, r0
 800254e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d109      	bne.n	800256a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800255e:	f023 0301 	bic.w	r3, r3, #1
 8002562:	f043 0201 	orr.w	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002572:	7bfb      	ldrb	r3, [r7, #15]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800257c:	b590      	push	{r4, r7, lr}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800258e:	2300      	movs	r3, #0
 8002590:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002592:	f7ff fe13 	bl	80021bc <HAL_GetTick>
 8002596:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00b      	beq.n	80025be <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025aa:	f043 0220 	orr.w	r2, r3, #32
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e0d3      	b.n	8002766 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d131      	bne.n	8002630 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d12a      	bne.n	8002630 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80025da:	e021      	b.n	8002620 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e2:	d01d      	beq.n	8002620 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d007      	beq.n	80025fa <HAL_ADC_PollForConversion+0x7e>
 80025ea:	f7ff fde7 	bl	80021bc <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d212      	bcs.n	8002620 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10b      	bne.n	8002620 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260c:	f043 0204 	orr.w	r2, r3, #4
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e0a2      	b.n	8002766 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0d6      	beq.n	80025dc <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800262e:	e070      	b.n	8002712 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002630:	4b4f      	ldr	r3, [pc, #316]	; (8002770 <HAL_ADC_PollForConversion+0x1f4>)
 8002632:	681c      	ldr	r4, [r3, #0]
 8002634:	2002      	movs	r0, #2
 8002636:	f001 fb37 	bl	8003ca8 <HAL_RCCEx_GetPeriphCLKFreq>
 800263a:	4603      	mov	r3, r0
 800263c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6919      	ldr	r1, [r3, #16]
 8002646:	4b4b      	ldr	r3, [pc, #300]	; (8002774 <HAL_ADC_PollForConversion+0x1f8>)
 8002648:	400b      	ands	r3, r1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d118      	bne.n	8002680 <HAL_ADC_PollForConversion+0x104>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68d9      	ldr	r1, [r3, #12]
 8002654:	4b48      	ldr	r3, [pc, #288]	; (8002778 <HAL_ADC_PollForConversion+0x1fc>)
 8002656:	400b      	ands	r3, r1
 8002658:	2b00      	cmp	r3, #0
 800265a:	d111      	bne.n	8002680 <HAL_ADC_PollForConversion+0x104>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6919      	ldr	r1, [r3, #16]
 8002662:	4b46      	ldr	r3, [pc, #280]	; (800277c <HAL_ADC_PollForConversion+0x200>)
 8002664:	400b      	ands	r3, r1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d108      	bne.n	800267c <HAL_ADC_PollForConversion+0x100>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68d9      	ldr	r1, [r3, #12]
 8002670:	4b43      	ldr	r3, [pc, #268]	; (8002780 <HAL_ADC_PollForConversion+0x204>)
 8002672:	400b      	ands	r3, r1
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_ADC_PollForConversion+0x100>
 8002678:	2314      	movs	r3, #20
 800267a:	e020      	b.n	80026be <HAL_ADC_PollForConversion+0x142>
 800267c:	2329      	movs	r3, #41	; 0x29
 800267e:	e01e      	b.n	80026be <HAL_ADC_PollForConversion+0x142>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6919      	ldr	r1, [r3, #16]
 8002686:	4b3d      	ldr	r3, [pc, #244]	; (800277c <HAL_ADC_PollForConversion+0x200>)
 8002688:	400b      	ands	r3, r1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d106      	bne.n	800269c <HAL_ADC_PollForConversion+0x120>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68d9      	ldr	r1, [r3, #12]
 8002694:	4b3a      	ldr	r3, [pc, #232]	; (8002780 <HAL_ADC_PollForConversion+0x204>)
 8002696:	400b      	ands	r3, r1
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00d      	beq.n	80026b8 <HAL_ADC_PollForConversion+0x13c>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6919      	ldr	r1, [r3, #16]
 80026a2:	4b38      	ldr	r3, [pc, #224]	; (8002784 <HAL_ADC_PollForConversion+0x208>)
 80026a4:	400b      	ands	r3, r1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d108      	bne.n	80026bc <HAL_ADC_PollForConversion+0x140>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68d9      	ldr	r1, [r3, #12]
 80026b0:	4b34      	ldr	r3, [pc, #208]	; (8002784 <HAL_ADC_PollForConversion+0x208>)
 80026b2:	400b      	ands	r3, r1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_ADC_PollForConversion+0x140>
 80026b8:	2354      	movs	r3, #84	; 0x54
 80026ba:	e000      	b.n	80026be <HAL_ADC_PollForConversion+0x142>
 80026bc:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80026be:	fb02 f303 	mul.w	r3, r2, r3
 80026c2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80026c4:	e021      	b.n	800270a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026cc:	d01a      	beq.n	8002704 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d007      	beq.n	80026e4 <HAL_ADC_PollForConversion+0x168>
 80026d4:	f7ff fd72 	bl	80021bc <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d20f      	bcs.n	8002704 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d90b      	bls.n	8002704 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f0:	f043 0204 	orr.w	r2, r3, #4
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e030      	b.n	8002766 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	3301      	adds	r3, #1
 8002708:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	429a      	cmp	r2, r3
 8002710:	d8d9      	bhi.n	80026c6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f06f 0212 	mvn.w	r2, #18
 800271a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002732:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002736:	d115      	bne.n	8002764 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800273c:	2b00      	cmp	r3, #0
 800273e:	d111      	bne.n	8002764 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002744:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002750:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d105      	bne.n	8002764 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	f043 0201 	orr.w	r2, r3, #1
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	371c      	adds	r7, #28
 800276a:	46bd      	mov	sp, r7
 800276c:	bd90      	pop	{r4, r7, pc}
 800276e:	bf00      	nop
 8002770:	20000004 	.word	0x20000004
 8002774:	24924924 	.word	0x24924924
 8002778:	00924924 	.word	0x00924924
 800277c:	12492492 	.word	0x12492492
 8002780:	00492492 	.word	0x00492492
 8002784:	00249249 	.word	0x00249249

08002788 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 0320 	and.w	r3, r3, #32
 80027b2:	2b20      	cmp	r3, #32
 80027b4:	d140      	bne.n	8002838 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d139      	bne.n	8002838 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c8:	f003 0310 	and.w	r3, r3, #16
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d105      	bne.n	80027dc <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80027e6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80027ea:	d11d      	bne.n	8002828 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d119      	bne.n	8002828 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0220 	bic.w	r2, r2, #32
 8002802:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002808:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d105      	bne.n	8002828 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002820:	f043 0201 	orr.w	r2, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 f87c 	bl	8002926 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f06f 0212 	mvn.w	r2, #18
 8002836:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002842:	2b80      	cmp	r3, #128	; 0x80
 8002844:	d14f      	bne.n	80028e6 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b04      	cmp	r3, #4
 8002852:	d148      	bne.n	80028e6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002858:	f003 0310 	and.w	r3, r3, #16
 800285c:	2b00      	cmp	r3, #0
 800285e:	d105      	bne.n	800286c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002876:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800287a:	d012      	beq.n	80028a2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002886:	2b00      	cmp	r3, #0
 8002888:	d125      	bne.n	80028d6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002894:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002898:	d11d      	bne.n	80028d6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d119      	bne.n	80028d6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028b0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d105      	bne.n	80028d6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ce:	f043 0201 	orr.w	r2, r3, #1
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f9cb 	bl	8002c72 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f06f 020c 	mvn.w	r2, #12
 80028e4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f0:	2b40      	cmp	r3, #64	; 0x40
 80028f2:	d114      	bne.n	800291e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d10d      	bne.n	800291e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f812 	bl	8002938 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f06f 0201 	mvn.w	r2, #1
 800291c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr
	...

0800294c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <HAL_ADC_ConfigChannel+0x20>
 8002968:	2302      	movs	r3, #2
 800296a:	e0dc      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x1da>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b06      	cmp	r3, #6
 800297a:	d81c      	bhi.n	80029b6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	3b05      	subs	r3, #5
 800298e:	221f      	movs	r2, #31
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	4019      	ands	r1, r3
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	3b05      	subs	r3, #5
 80029a8:	fa00 f203 	lsl.w	r2, r0, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	635a      	str	r2, [r3, #52]	; 0x34
 80029b4:	e03c      	b.n	8002a30 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b0c      	cmp	r3, #12
 80029bc:	d81c      	bhi.n	80029f8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	3b23      	subs	r3, #35	; 0x23
 80029d0:	221f      	movs	r2, #31
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	4019      	ands	r1, r3
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6818      	ldr	r0, [r3, #0]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	3b23      	subs	r3, #35	; 0x23
 80029ea:	fa00 f203 	lsl.w	r2, r0, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	631a      	str	r2, [r3, #48]	; 0x30
 80029f6:	e01b      	b.n	8002a30 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	3b41      	subs	r3, #65	; 0x41
 8002a0a:	221f      	movs	r2, #31
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	4019      	ands	r1, r3
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	6818      	ldr	r0, [r3, #0]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	3b41      	subs	r3, #65	; 0x41
 8002a24:	fa00 f203 	lsl.w	r2, r0, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b09      	cmp	r3, #9
 8002a36:	d91c      	bls.n	8002a72 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68d9      	ldr	r1, [r3, #12]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	4613      	mov	r3, r2
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4413      	add	r3, r2
 8002a48:	3b1e      	subs	r3, #30
 8002a4a:	2207      	movs	r2, #7
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	4019      	ands	r1, r3
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	6898      	ldr	r0, [r3, #8]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	4413      	add	r3, r2
 8002a62:	3b1e      	subs	r3, #30
 8002a64:	fa00 f203 	lsl.w	r2, r0, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	60da      	str	r2, [r3, #12]
 8002a70:	e019      	b.n	8002aa6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6919      	ldr	r1, [r3, #16]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	4413      	add	r3, r2
 8002a82:	2207      	movs	r2, #7
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	4019      	ands	r1, r3
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	6898      	ldr	r0, [r3, #8]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	4613      	mov	r3, r2
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	4413      	add	r3, r2
 8002a9a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b10      	cmp	r3, #16
 8002aac:	d003      	beq.n	8002ab6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ab2:	2b11      	cmp	r3, #17
 8002ab4:	d132      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a1d      	ldr	r2, [pc, #116]	; (8002b30 <HAL_ADC_ConfigChannel+0x1e4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d125      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d126      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002adc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2b10      	cmp	r3, #16
 8002ae4:	d11a      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ae6:	4b13      	ldr	r3, [pc, #76]	; (8002b34 <HAL_ADC_ConfigChannel+0x1e8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a13      	ldr	r2, [pc, #76]	; (8002b38 <HAL_ADC_ConfigChannel+0x1ec>)
 8002aec:	fba2 2303 	umull	r2, r3, r2, r3
 8002af0:	0c9a      	lsrs	r2, r3, #18
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002afc:	e002      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3b01      	subs	r3, #1
 8002b02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f9      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x1b2>
 8002b0a:	e007      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b10:	f043 0220 	orr.w	r2, r3, #32
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr
 8002b30:	40012400 	.word	0x40012400
 8002b34:	20000004 	.word	0x20000004
 8002b38:	431bde83 	.word	0x431bde83

08002b3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d040      	beq.n	8002bdc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 0201 	orr.w	r2, r2, #1
 8002b68:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b6a:	4b1f      	ldr	r3, [pc, #124]	; (8002be8 <ADC_Enable+0xac>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a1f      	ldr	r2, [pc, #124]	; (8002bec <ADC_Enable+0xb0>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	0c9b      	lsrs	r3, r3, #18
 8002b76:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b78:	e002      	b.n	8002b80 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f9      	bne.n	8002b7a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b86:	f7ff fb19 	bl	80021bc <HAL_GetTick>
 8002b8a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b8c:	e01f      	b.n	8002bce <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b8e:	f7ff fb15 	bl	80021bc <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d918      	bls.n	8002bce <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d011      	beq.n	8002bce <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bae:	f043 0210 	orr.w	r2, r3, #16
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bba:	f043 0201 	orr.w	r2, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e007      	b.n	8002bde <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d1d8      	bne.n	8002b8e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20000004 	.word	0x20000004
 8002bec:	431bde83 	.word	0x431bde83

08002bf0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d12e      	bne.n	8002c68 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0201 	bic.w	r2, r2, #1
 8002c18:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c1a:	f7ff facf 	bl	80021bc <HAL_GetTick>
 8002c1e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c20:	e01b      	b.n	8002c5a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c22:	f7ff facb 	bl	80021bc <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d914      	bls.n	8002c5a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d10d      	bne.n	8002c5a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c42:	f043 0210 	orr.w	r2, r3, #16
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4e:	f043 0201 	orr.w	r2, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e007      	b.n	8002c6a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d0dc      	beq.n	8002c22 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr

08002c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c94:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cb6:	4a04      	ldr	r2, [pc, #16]	; (8002cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	60d3      	str	r3, [r2, #12]
}
 8002cbc:	bf00      	nop
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	e000ed00 	.word	0xe000ed00

08002ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cd0:	4b04      	ldr	r3, [pc, #16]	; (8002ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	0a1b      	lsrs	r3, r3, #8
 8002cd6:	f003 0307 	and.w	r3, r3, #7
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	db0b      	blt.n	8002d12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cfa:	79fb      	ldrb	r3, [r7, #7]
 8002cfc:	f003 021f 	and.w	r2, r3, #31
 8002d00:	4906      	ldr	r1, [pc, #24]	; (8002d1c <__NVIC_EnableIRQ+0x34>)
 8002d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d06:	095b      	lsrs	r3, r3, #5
 8002d08:	2001      	movs	r0, #1
 8002d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr
 8002d1c:	e000e100 	.word	0xe000e100

08002d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	6039      	str	r1, [r7, #0]
 8002d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	db0a      	blt.n	8002d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	490c      	ldr	r1, [pc, #48]	; (8002d6c <__NVIC_SetPriority+0x4c>)
 8002d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3e:	0112      	lsls	r2, r2, #4
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	440b      	add	r3, r1
 8002d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d48:	e00a      	b.n	8002d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	4908      	ldr	r1, [pc, #32]	; (8002d70 <__NVIC_SetPriority+0x50>)
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	3b04      	subs	r3, #4
 8002d58:	0112      	lsls	r2, r2, #4
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	761a      	strb	r2, [r3, #24]
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	e000e100 	.word	0xe000e100
 8002d70:	e000ed00 	.word	0xe000ed00

08002d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b089      	sub	sp, #36	; 0x24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f1c3 0307 	rsb	r3, r3, #7
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	bf28      	it	cs
 8002d92:	2304      	movcs	r3, #4
 8002d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	3304      	adds	r3, #4
 8002d9a:	2b06      	cmp	r3, #6
 8002d9c:	d902      	bls.n	8002da4 <NVIC_EncodePriority+0x30>
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	3b03      	subs	r3, #3
 8002da2:	e000      	b.n	8002da6 <NVIC_EncodePriority+0x32>
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43da      	mvns	r2, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	401a      	ands	r2, r3
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc6:	43d9      	mvns	r1, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dcc:	4313      	orrs	r3, r2
         );
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3724      	adds	r7, #36	; 0x24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr

08002dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002de8:	d301      	bcc.n	8002dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dea:	2301      	movs	r3, #1
 8002dec:	e00f      	b.n	8002e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dee:	4a0a      	ldr	r2, [pc, #40]	; (8002e18 <SysTick_Config+0x40>)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002df6:	210f      	movs	r1, #15
 8002df8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dfc:	f7ff ff90 	bl	8002d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e00:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <SysTick_Config+0x40>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e06:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <SysTick_Config+0x40>)
 8002e08:	2207      	movs	r2, #7
 8002e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	e000e010 	.word	0xe000e010

08002e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f7ff ff2d 	bl	8002c84 <__NVIC_SetPriorityGrouping>
}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b086      	sub	sp, #24
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	4603      	mov	r3, r0
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
 8002e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e44:	f7ff ff42 	bl	8002ccc <__NVIC_GetPriorityGrouping>
 8002e48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	68b9      	ldr	r1, [r7, #8]
 8002e4e:	6978      	ldr	r0, [r7, #20]
 8002e50:	f7ff ff90 	bl	8002d74 <NVIC_EncodePriority>
 8002e54:	4602      	mov	r2, r0
 8002e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff ff5f 	bl	8002d20 <__NVIC_SetPriority>
}
 8002e62:	bf00      	nop
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	4603      	mov	r3, r0
 8002e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff ff35 	bl	8002ce8 <__NVIC_EnableIRQ>
}
 8002e7e:	bf00      	nop
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7ff ffa2 	bl	8002dd8 <SysTick_Config>
 8002e94:	4603      	mov	r3, r0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b085      	sub	sp, #20
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d008      	beq.n	8002ec6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2204      	movs	r2, #4
 8002eb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e020      	b.n	8002f08 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 020e 	bic.w	r2, r2, #14
 8002ed4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0201 	bic.w	r2, r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eee:	2101      	movs	r1, #1
 8002ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr
	...

08002f14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d005      	beq.n	8002f36 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
 8002f34:	e051      	b.n	8002fda <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 020e 	bic.w	r2, r2, #14
 8002f44:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0201 	bic.w	r2, r2, #1
 8002f54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a22      	ldr	r2, [pc, #136]	; (8002fe4 <HAL_DMA_Abort_IT+0xd0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d029      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0xa0>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a20      	ldr	r2, [pc, #128]	; (8002fe8 <HAL_DMA_Abort_IT+0xd4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d022      	beq.n	8002fb0 <HAL_DMA_Abort_IT+0x9c>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1f      	ldr	r2, [pc, #124]	; (8002fec <HAL_DMA_Abort_IT+0xd8>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d01a      	beq.n	8002faa <HAL_DMA_Abort_IT+0x96>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1d      	ldr	r2, [pc, #116]	; (8002ff0 <HAL_DMA_Abort_IT+0xdc>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d012      	beq.n	8002fa4 <HAL_DMA_Abort_IT+0x90>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1c      	ldr	r2, [pc, #112]	; (8002ff4 <HAL_DMA_Abort_IT+0xe0>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d00a      	beq.n	8002f9e <HAL_DMA_Abort_IT+0x8a>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1a      	ldr	r2, [pc, #104]	; (8002ff8 <HAL_DMA_Abort_IT+0xe4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d102      	bne.n	8002f98 <HAL_DMA_Abort_IT+0x84>
 8002f92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f96:	e00e      	b.n	8002fb6 <HAL_DMA_Abort_IT+0xa2>
 8002f98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f9c:	e00b      	b.n	8002fb6 <HAL_DMA_Abort_IT+0xa2>
 8002f9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fa2:	e008      	b.n	8002fb6 <HAL_DMA_Abort_IT+0xa2>
 8002fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fa8:	e005      	b.n	8002fb6 <HAL_DMA_Abort_IT+0xa2>
 8002faa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fae:	e002      	b.n	8002fb6 <HAL_DMA_Abort_IT+0xa2>
 8002fb0:	2310      	movs	r3, #16
 8002fb2:	e000      	b.n	8002fb6 <HAL_DMA_Abort_IT+0xa2>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	4a11      	ldr	r2, [pc, #68]	; (8002ffc <HAL_DMA_Abort_IT+0xe8>)
 8002fb8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	4798      	blx	r3
    } 
  }
  return status;
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40020008 	.word	0x40020008
 8002fe8:	4002001c 	.word	0x4002001c
 8002fec:	40020030 	.word	0x40020030
 8002ff0:	40020044 	.word	0x40020044
 8002ff4:	40020058 	.word	0x40020058
 8002ff8:	4002006c 	.word	0x4002006c
 8002ffc:	40020000 	.word	0x40020000

08003000 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003000:	b480      	push	{r7}
 8003002:	b08b      	sub	sp, #44	; 0x2c
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800300a:	2300      	movs	r3, #0
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800300e:	2300      	movs	r3, #0
 8003010:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003012:	e169      	b.n	80032e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003014:	2201      	movs	r2, #1
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	69fa      	ldr	r2, [r7, #28]
 8003024:	4013      	ands	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	429a      	cmp	r2, r3
 800302e:	f040 8158 	bne.w	80032e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	4a9a      	ldr	r2, [pc, #616]	; (80032a0 <HAL_GPIO_Init+0x2a0>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d05e      	beq.n	80030fa <HAL_GPIO_Init+0xfa>
 800303c:	4a98      	ldr	r2, [pc, #608]	; (80032a0 <HAL_GPIO_Init+0x2a0>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d875      	bhi.n	800312e <HAL_GPIO_Init+0x12e>
 8003042:	4a98      	ldr	r2, [pc, #608]	; (80032a4 <HAL_GPIO_Init+0x2a4>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d058      	beq.n	80030fa <HAL_GPIO_Init+0xfa>
 8003048:	4a96      	ldr	r2, [pc, #600]	; (80032a4 <HAL_GPIO_Init+0x2a4>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d86f      	bhi.n	800312e <HAL_GPIO_Init+0x12e>
 800304e:	4a96      	ldr	r2, [pc, #600]	; (80032a8 <HAL_GPIO_Init+0x2a8>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d052      	beq.n	80030fa <HAL_GPIO_Init+0xfa>
 8003054:	4a94      	ldr	r2, [pc, #592]	; (80032a8 <HAL_GPIO_Init+0x2a8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d869      	bhi.n	800312e <HAL_GPIO_Init+0x12e>
 800305a:	4a94      	ldr	r2, [pc, #592]	; (80032ac <HAL_GPIO_Init+0x2ac>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d04c      	beq.n	80030fa <HAL_GPIO_Init+0xfa>
 8003060:	4a92      	ldr	r2, [pc, #584]	; (80032ac <HAL_GPIO_Init+0x2ac>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d863      	bhi.n	800312e <HAL_GPIO_Init+0x12e>
 8003066:	4a92      	ldr	r2, [pc, #584]	; (80032b0 <HAL_GPIO_Init+0x2b0>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d046      	beq.n	80030fa <HAL_GPIO_Init+0xfa>
 800306c:	4a90      	ldr	r2, [pc, #576]	; (80032b0 <HAL_GPIO_Init+0x2b0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d85d      	bhi.n	800312e <HAL_GPIO_Init+0x12e>
 8003072:	2b12      	cmp	r3, #18
 8003074:	d82a      	bhi.n	80030cc <HAL_GPIO_Init+0xcc>
 8003076:	2b12      	cmp	r3, #18
 8003078:	d859      	bhi.n	800312e <HAL_GPIO_Init+0x12e>
 800307a:	a201      	add	r2, pc, #4	; (adr r2, 8003080 <HAL_GPIO_Init+0x80>)
 800307c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003080:	080030fb 	.word	0x080030fb
 8003084:	080030d5 	.word	0x080030d5
 8003088:	080030e7 	.word	0x080030e7
 800308c:	08003129 	.word	0x08003129
 8003090:	0800312f 	.word	0x0800312f
 8003094:	0800312f 	.word	0x0800312f
 8003098:	0800312f 	.word	0x0800312f
 800309c:	0800312f 	.word	0x0800312f
 80030a0:	0800312f 	.word	0x0800312f
 80030a4:	0800312f 	.word	0x0800312f
 80030a8:	0800312f 	.word	0x0800312f
 80030ac:	0800312f 	.word	0x0800312f
 80030b0:	0800312f 	.word	0x0800312f
 80030b4:	0800312f 	.word	0x0800312f
 80030b8:	0800312f 	.word	0x0800312f
 80030bc:	0800312f 	.word	0x0800312f
 80030c0:	0800312f 	.word	0x0800312f
 80030c4:	080030dd 	.word	0x080030dd
 80030c8:	080030f1 	.word	0x080030f1
 80030cc:	4a79      	ldr	r2, [pc, #484]	; (80032b4 <HAL_GPIO_Init+0x2b4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d013      	beq.n	80030fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030d2:	e02c      	b.n	800312e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	623b      	str	r3, [r7, #32]
          break;
 80030da:	e029      	b.n	8003130 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	3304      	adds	r3, #4
 80030e2:	623b      	str	r3, [r7, #32]
          break;
 80030e4:	e024      	b.n	8003130 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	3308      	adds	r3, #8
 80030ec:	623b      	str	r3, [r7, #32]
          break;
 80030ee:	e01f      	b.n	8003130 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	330c      	adds	r3, #12
 80030f6:	623b      	str	r3, [r7, #32]
          break;
 80030f8:	e01a      	b.n	8003130 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d102      	bne.n	8003108 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003102:	2304      	movs	r3, #4
 8003104:	623b      	str	r3, [r7, #32]
          break;
 8003106:	e013      	b.n	8003130 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d105      	bne.n	800311c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003110:	2308      	movs	r3, #8
 8003112:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	69fa      	ldr	r2, [r7, #28]
 8003118:	611a      	str	r2, [r3, #16]
          break;
 800311a:	e009      	b.n	8003130 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800311c:	2308      	movs	r3, #8
 800311e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69fa      	ldr	r2, [r7, #28]
 8003124:	615a      	str	r2, [r3, #20]
          break;
 8003126:	e003      	b.n	8003130 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003128:	2300      	movs	r3, #0
 800312a:	623b      	str	r3, [r7, #32]
          break;
 800312c:	e000      	b.n	8003130 <HAL_GPIO_Init+0x130>
          break;
 800312e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	2bff      	cmp	r3, #255	; 0xff
 8003134:	d801      	bhi.n	800313a <HAL_GPIO_Init+0x13a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	e001      	b.n	800313e <HAL_GPIO_Init+0x13e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3304      	adds	r3, #4
 800313e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	2bff      	cmp	r3, #255	; 0xff
 8003144:	d802      	bhi.n	800314c <HAL_GPIO_Init+0x14c>
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	e002      	b.n	8003152 <HAL_GPIO_Init+0x152>
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	3b08      	subs	r3, #8
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	210f      	movs	r1, #15
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	fa01 f303 	lsl.w	r3, r1, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	401a      	ands	r2, r3
 8003164:	6a39      	ldr	r1, [r7, #32]
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	fa01 f303 	lsl.w	r3, r1, r3
 800316c:	431a      	orrs	r2, r3
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 80b1 	beq.w	80032e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003180:	4b4d      	ldr	r3, [pc, #308]	; (80032b8 <HAL_GPIO_Init+0x2b8>)
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	4a4c      	ldr	r2, [pc, #304]	; (80032b8 <HAL_GPIO_Init+0x2b8>)
 8003186:	f043 0301 	orr.w	r3, r3, #1
 800318a:	6193      	str	r3, [r2, #24]
 800318c:	4b4a      	ldr	r3, [pc, #296]	; (80032b8 <HAL_GPIO_Init+0x2b8>)
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	60bb      	str	r3, [r7, #8]
 8003196:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003198:	4a48      	ldr	r2, [pc, #288]	; (80032bc <HAL_GPIO_Init+0x2bc>)
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	089b      	lsrs	r3, r3, #2
 800319e:	3302      	adds	r3, #2
 80031a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	220f      	movs	r2, #15
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4013      	ands	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a40      	ldr	r2, [pc, #256]	; (80032c0 <HAL_GPIO_Init+0x2c0>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d013      	beq.n	80031ec <HAL_GPIO_Init+0x1ec>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a3f      	ldr	r2, [pc, #252]	; (80032c4 <HAL_GPIO_Init+0x2c4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00d      	beq.n	80031e8 <HAL_GPIO_Init+0x1e8>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a3e      	ldr	r2, [pc, #248]	; (80032c8 <HAL_GPIO_Init+0x2c8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d007      	beq.n	80031e4 <HAL_GPIO_Init+0x1e4>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a3d      	ldr	r2, [pc, #244]	; (80032cc <HAL_GPIO_Init+0x2cc>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d101      	bne.n	80031e0 <HAL_GPIO_Init+0x1e0>
 80031dc:	2303      	movs	r3, #3
 80031de:	e006      	b.n	80031ee <HAL_GPIO_Init+0x1ee>
 80031e0:	2304      	movs	r3, #4
 80031e2:	e004      	b.n	80031ee <HAL_GPIO_Init+0x1ee>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e002      	b.n	80031ee <HAL_GPIO_Init+0x1ee>
 80031e8:	2301      	movs	r3, #1
 80031ea:	e000      	b.n	80031ee <HAL_GPIO_Init+0x1ee>
 80031ec:	2300      	movs	r3, #0
 80031ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f0:	f002 0203 	and.w	r2, r2, #3
 80031f4:	0092      	lsls	r2, r2, #2
 80031f6:	4093      	lsls	r3, r2
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031fe:	492f      	ldr	r1, [pc, #188]	; (80032bc <HAL_GPIO_Init+0x2bc>)
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	089b      	lsrs	r3, r3, #2
 8003204:	3302      	adds	r3, #2
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d006      	beq.n	8003226 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003218:	4b2d      	ldr	r3, [pc, #180]	; (80032d0 <HAL_GPIO_Init+0x2d0>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	492c      	ldr	r1, [pc, #176]	; (80032d0 <HAL_GPIO_Init+0x2d0>)
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	4313      	orrs	r3, r2
 8003222:	600b      	str	r3, [r1, #0]
 8003224:	e006      	b.n	8003234 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003226:	4b2a      	ldr	r3, [pc, #168]	; (80032d0 <HAL_GPIO_Init+0x2d0>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	43db      	mvns	r3, r3
 800322e:	4928      	ldr	r1, [pc, #160]	; (80032d0 <HAL_GPIO_Init+0x2d0>)
 8003230:	4013      	ands	r3, r2
 8003232:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d006      	beq.n	800324e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003240:	4b23      	ldr	r3, [pc, #140]	; (80032d0 <HAL_GPIO_Init+0x2d0>)
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	4922      	ldr	r1, [pc, #136]	; (80032d0 <HAL_GPIO_Init+0x2d0>)
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	4313      	orrs	r3, r2
 800324a:	604b      	str	r3, [r1, #4]
 800324c:	e006      	b.n	800325c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800324e:	4b20      	ldr	r3, [pc, #128]	; (80032d0 <HAL_GPIO_Init+0x2d0>)
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	43db      	mvns	r3, r3
 8003256:	491e      	ldr	r1, [pc, #120]	; (80032d0 <HAL_GPIO_Init+0x2d0>)
 8003258:	4013      	ands	r3, r2
 800325a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d006      	beq.n	8003276 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003268:	4b19      	ldr	r3, [pc, #100]	; (80032d0 <HAL_GPIO_Init+0x2d0>)
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	4918      	ldr	r1, [pc, #96]	; (80032d0 <HAL_GPIO_Init+0x2d0>)
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	4313      	orrs	r3, r2
 8003272:	608b      	str	r3, [r1, #8]
 8003274:	e006      	b.n	8003284 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003276:	4b16      	ldr	r3, [pc, #88]	; (80032d0 <HAL_GPIO_Init+0x2d0>)
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	43db      	mvns	r3, r3
 800327e:	4914      	ldr	r1, [pc, #80]	; (80032d0 <HAL_GPIO_Init+0x2d0>)
 8003280:	4013      	ands	r3, r2
 8003282:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d021      	beq.n	80032d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003290:	4b0f      	ldr	r3, [pc, #60]	; (80032d0 <HAL_GPIO_Init+0x2d0>)
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	490e      	ldr	r1, [pc, #56]	; (80032d0 <HAL_GPIO_Init+0x2d0>)
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	4313      	orrs	r3, r2
 800329a:	60cb      	str	r3, [r1, #12]
 800329c:	e021      	b.n	80032e2 <HAL_GPIO_Init+0x2e2>
 800329e:	bf00      	nop
 80032a0:	10320000 	.word	0x10320000
 80032a4:	10310000 	.word	0x10310000
 80032a8:	10220000 	.word	0x10220000
 80032ac:	10210000 	.word	0x10210000
 80032b0:	10120000 	.word	0x10120000
 80032b4:	10110000 	.word	0x10110000
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40010000 	.word	0x40010000
 80032c0:	40010800 	.word	0x40010800
 80032c4:	40010c00 	.word	0x40010c00
 80032c8:	40011000 	.word	0x40011000
 80032cc:	40011400 	.word	0x40011400
 80032d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032d4:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <HAL_GPIO_Init+0x304>)
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	43db      	mvns	r3, r3
 80032dc:	4909      	ldr	r1, [pc, #36]	; (8003304 <HAL_GPIO_Init+0x304>)
 80032de:	4013      	ands	r3, r2
 80032e0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	3301      	adds	r3, #1
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	fa22 f303 	lsr.w	r3, r2, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f47f ae8e 	bne.w	8003014 <HAL_GPIO_Init+0x14>
  }
}
 80032f8:	bf00      	nop
 80032fa:	bf00      	nop
 80032fc:	372c      	adds	r7, #44	; 0x2c
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr
 8003304:	40010400 	.word	0x40010400

08003308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e26c      	b.n	80037f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 8087 	beq.w	8003436 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003328:	4b92      	ldr	r3, [pc, #584]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 030c 	and.w	r3, r3, #12
 8003330:	2b04      	cmp	r3, #4
 8003332:	d00c      	beq.n	800334e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003334:	4b8f      	ldr	r3, [pc, #572]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f003 030c 	and.w	r3, r3, #12
 800333c:	2b08      	cmp	r3, #8
 800333e:	d112      	bne.n	8003366 <HAL_RCC_OscConfig+0x5e>
 8003340:	4b8c      	ldr	r3, [pc, #560]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334c:	d10b      	bne.n	8003366 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334e:	4b89      	ldr	r3, [pc, #548]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d06c      	beq.n	8003434 <HAL_RCC_OscConfig+0x12c>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d168      	bne.n	8003434 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e246      	b.n	80037f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336e:	d106      	bne.n	800337e <HAL_RCC_OscConfig+0x76>
 8003370:	4b80      	ldr	r3, [pc, #512]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a7f      	ldr	r2, [pc, #508]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800337a:	6013      	str	r3, [r2, #0]
 800337c:	e02e      	b.n	80033dc <HAL_RCC_OscConfig+0xd4>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0x98>
 8003386:	4b7b      	ldr	r3, [pc, #492]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a7a      	ldr	r2, [pc, #488]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 800338c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	4b78      	ldr	r3, [pc, #480]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a77      	ldr	r2, [pc, #476]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003398:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	e01d      	b.n	80033dc <HAL_RCC_OscConfig+0xd4>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033a8:	d10c      	bne.n	80033c4 <HAL_RCC_OscConfig+0xbc>
 80033aa:	4b72      	ldr	r3, [pc, #456]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a71      	ldr	r2, [pc, #452]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 80033b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	4b6f      	ldr	r3, [pc, #444]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a6e      	ldr	r2, [pc, #440]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 80033bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	e00b      	b.n	80033dc <HAL_RCC_OscConfig+0xd4>
 80033c4:	4b6b      	ldr	r3, [pc, #428]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a6a      	ldr	r2, [pc, #424]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 80033ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	4b68      	ldr	r3, [pc, #416]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a67      	ldr	r2, [pc, #412]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 80033d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d013      	beq.n	800340c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e4:	f7fe feea 	bl	80021bc <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033ec:	f7fe fee6 	bl	80021bc <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b64      	cmp	r3, #100	; 0x64
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e1fa      	b.n	80037f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fe:	4b5d      	ldr	r3, [pc, #372]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0xe4>
 800340a:	e014      	b.n	8003436 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340c:	f7fe fed6 	bl	80021bc <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003414:	f7fe fed2 	bl	80021bc <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e1e6      	b.n	80037f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003426:	4b53      	ldr	r3, [pc, #332]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f0      	bne.n	8003414 <HAL_RCC_OscConfig+0x10c>
 8003432:	e000      	b.n	8003436 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d063      	beq.n	800350a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003442:	4b4c      	ldr	r3, [pc, #304]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00b      	beq.n	8003466 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800344e:	4b49      	ldr	r3, [pc, #292]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f003 030c 	and.w	r3, r3, #12
 8003456:	2b08      	cmp	r3, #8
 8003458:	d11c      	bne.n	8003494 <HAL_RCC_OscConfig+0x18c>
 800345a:	4b46      	ldr	r3, [pc, #280]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d116      	bne.n	8003494 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003466:	4b43      	ldr	r3, [pc, #268]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d005      	beq.n	800347e <HAL_RCC_OscConfig+0x176>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d001      	beq.n	800347e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e1ba      	b.n	80037f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347e:	4b3d      	ldr	r3, [pc, #244]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	4939      	ldr	r1, [pc, #228]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 800348e:	4313      	orrs	r3, r2
 8003490:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003492:	e03a      	b.n	800350a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d020      	beq.n	80034de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800349c:	4b36      	ldr	r3, [pc, #216]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 800349e:	2201      	movs	r2, #1
 80034a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a2:	f7fe fe8b 	bl	80021bc <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034aa:	f7fe fe87 	bl	80021bc <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e19b      	b.n	80037f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034bc:	4b2d      	ldr	r3, [pc, #180]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f0      	beq.n	80034aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c8:	4b2a      	ldr	r3, [pc, #168]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	4927      	ldr	r1, [pc, #156]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	600b      	str	r3, [r1, #0]
 80034dc:	e015      	b.n	800350a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034de:	4b26      	ldr	r3, [pc, #152]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e4:	f7fe fe6a 	bl	80021bc <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ec:	f7fe fe66 	bl	80021bc <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e17a      	b.n	80037f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034fe:	4b1d      	ldr	r3, [pc, #116]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f0      	bne.n	80034ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d03a      	beq.n	800358c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d019      	beq.n	8003552 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800351e:	4b17      	ldr	r3, [pc, #92]	; (800357c <HAL_RCC_OscConfig+0x274>)
 8003520:	2201      	movs	r2, #1
 8003522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003524:	f7fe fe4a 	bl	80021bc <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800352c:	f7fe fe46 	bl	80021bc <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e15a      	b.n	80037f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800353e:	4b0d      	ldr	r3, [pc, #52]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f0      	beq.n	800352c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800354a:	2001      	movs	r0, #1
 800354c:	f000 fad8 	bl	8003b00 <RCC_Delay>
 8003550:	e01c      	b.n	800358c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003552:	4b0a      	ldr	r3, [pc, #40]	; (800357c <HAL_RCC_OscConfig+0x274>)
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003558:	f7fe fe30 	bl	80021bc <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800355e:	e00f      	b.n	8003580 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003560:	f7fe fe2c 	bl	80021bc <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d908      	bls.n	8003580 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e140      	b.n	80037f4 <HAL_RCC_OscConfig+0x4ec>
 8003572:	bf00      	nop
 8003574:	40021000 	.word	0x40021000
 8003578:	42420000 	.word	0x42420000
 800357c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003580:	4b9e      	ldr	r3, [pc, #632]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1e9      	bne.n	8003560 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80a6 	beq.w	80036e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800359a:	2300      	movs	r3, #0
 800359c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800359e:	4b97      	ldr	r3, [pc, #604]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10d      	bne.n	80035c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035aa:	4b94      	ldr	r3, [pc, #592]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	4a93      	ldr	r2, [pc, #588]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 80035b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b4:	61d3      	str	r3, [r2, #28]
 80035b6:	4b91      	ldr	r3, [pc, #580]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035be:	60bb      	str	r3, [r7, #8]
 80035c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035c2:	2301      	movs	r3, #1
 80035c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c6:	4b8e      	ldr	r3, [pc, #568]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d118      	bne.n	8003604 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035d2:	4b8b      	ldr	r3, [pc, #556]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a8a      	ldr	r2, [pc, #552]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 80035d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035de:	f7fe fded 	bl	80021bc <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e6:	f7fe fde9 	bl	80021bc <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b64      	cmp	r3, #100	; 0x64
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e0fd      	b.n	80037f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f8:	4b81      	ldr	r3, [pc, #516]	; (8003800 <HAL_RCC_OscConfig+0x4f8>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0f0      	beq.n	80035e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d106      	bne.n	800361a <HAL_RCC_OscConfig+0x312>
 800360c:	4b7b      	ldr	r3, [pc, #492]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	4a7a      	ldr	r2, [pc, #488]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 8003612:	f043 0301 	orr.w	r3, r3, #1
 8003616:	6213      	str	r3, [r2, #32]
 8003618:	e02d      	b.n	8003676 <HAL_RCC_OscConfig+0x36e>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10c      	bne.n	800363c <HAL_RCC_OscConfig+0x334>
 8003622:	4b76      	ldr	r3, [pc, #472]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	4a75      	ldr	r2, [pc, #468]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6213      	str	r3, [r2, #32]
 800362e:	4b73      	ldr	r3, [pc, #460]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	4a72      	ldr	r2, [pc, #456]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 8003634:	f023 0304 	bic.w	r3, r3, #4
 8003638:	6213      	str	r3, [r2, #32]
 800363a:	e01c      	b.n	8003676 <HAL_RCC_OscConfig+0x36e>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	2b05      	cmp	r3, #5
 8003642:	d10c      	bne.n	800365e <HAL_RCC_OscConfig+0x356>
 8003644:	4b6d      	ldr	r3, [pc, #436]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	4a6c      	ldr	r2, [pc, #432]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 800364a:	f043 0304 	orr.w	r3, r3, #4
 800364e:	6213      	str	r3, [r2, #32]
 8003650:	4b6a      	ldr	r3, [pc, #424]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	4a69      	ldr	r2, [pc, #420]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	6213      	str	r3, [r2, #32]
 800365c:	e00b      	b.n	8003676 <HAL_RCC_OscConfig+0x36e>
 800365e:	4b67      	ldr	r3, [pc, #412]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	4a66      	ldr	r2, [pc, #408]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	6213      	str	r3, [r2, #32]
 800366a:	4b64      	ldr	r3, [pc, #400]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	4a63      	ldr	r2, [pc, #396]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 8003670:	f023 0304 	bic.w	r3, r3, #4
 8003674:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d015      	beq.n	80036aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800367e:	f7fe fd9d 	bl	80021bc <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003684:	e00a      	b.n	800369c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003686:	f7fe fd99 	bl	80021bc <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f241 3288 	movw	r2, #5000	; 0x1388
 8003694:	4293      	cmp	r3, r2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e0ab      	b.n	80037f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369c:	4b57      	ldr	r3, [pc, #348]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0ee      	beq.n	8003686 <HAL_RCC_OscConfig+0x37e>
 80036a8:	e014      	b.n	80036d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036aa:	f7fe fd87 	bl	80021bc <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b0:	e00a      	b.n	80036c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b2:	f7fe fd83 	bl	80021bc <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e095      	b.n	80037f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c8:	4b4c      	ldr	r3, [pc, #304]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1ee      	bne.n	80036b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d105      	bne.n	80036e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036da:	4b48      	ldr	r3, [pc, #288]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	4a47      	ldr	r2, [pc, #284]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 80036e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 8081 	beq.w	80037f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036f0:	4b42      	ldr	r3, [pc, #264]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 030c 	and.w	r3, r3, #12
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d061      	beq.n	80037c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	2b02      	cmp	r3, #2
 8003702:	d146      	bne.n	8003792 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003704:	4b3f      	ldr	r3, [pc, #252]	; (8003804 <HAL_RCC_OscConfig+0x4fc>)
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370a:	f7fe fd57 	bl	80021bc <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003712:	f7fe fd53 	bl	80021bc <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e067      	b.n	80037f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003724:	4b35      	ldr	r3, [pc, #212]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1f0      	bne.n	8003712 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003738:	d108      	bne.n	800374c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800373a:	4b30      	ldr	r3, [pc, #192]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	492d      	ldr	r1, [pc, #180]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 8003748:	4313      	orrs	r3, r2
 800374a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800374c:	4b2b      	ldr	r3, [pc, #172]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a19      	ldr	r1, [r3, #32]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	430b      	orrs	r3, r1
 800375e:	4927      	ldr	r1, [pc, #156]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 8003760:	4313      	orrs	r3, r2
 8003762:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003764:	4b27      	ldr	r3, [pc, #156]	; (8003804 <HAL_RCC_OscConfig+0x4fc>)
 8003766:	2201      	movs	r2, #1
 8003768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376a:	f7fe fd27 	bl	80021bc <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003770:	e008      	b.n	8003784 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003772:	f7fe fd23 	bl	80021bc <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e037      	b.n	80037f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003784:	4b1d      	ldr	r3, [pc, #116]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0f0      	beq.n	8003772 <HAL_RCC_OscConfig+0x46a>
 8003790:	e02f      	b.n	80037f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003792:	4b1c      	ldr	r3, [pc, #112]	; (8003804 <HAL_RCC_OscConfig+0x4fc>)
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003798:	f7fe fd10 	bl	80021bc <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a0:	f7fe fd0c 	bl	80021bc <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e020      	b.n	80037f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037b2:	4b12      	ldr	r3, [pc, #72]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f0      	bne.n	80037a0 <HAL_RCC_OscConfig+0x498>
 80037be:	e018      	b.n	80037f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e013      	b.n	80037f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037cc:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <HAL_RCC_OscConfig+0x4f4>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d106      	bne.n	80037ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d001      	beq.n	80037f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e000      	b.n	80037f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40021000 	.word	0x40021000
 8003800:	40007000 	.word	0x40007000
 8003804:	42420060 	.word	0x42420060

08003808 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0d0      	b.n	80039be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800381c:	4b6a      	ldr	r3, [pc, #424]	; (80039c8 <HAL_RCC_ClockConfig+0x1c0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d910      	bls.n	800384c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382a:	4b67      	ldr	r3, [pc, #412]	; (80039c8 <HAL_RCC_ClockConfig+0x1c0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f023 0207 	bic.w	r2, r3, #7
 8003832:	4965      	ldr	r1, [pc, #404]	; (80039c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	4313      	orrs	r3, r2
 8003838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800383a:	4b63      	ldr	r3, [pc, #396]	; (80039c8 <HAL_RCC_ClockConfig+0x1c0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d001      	beq.n	800384c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0b8      	b.n	80039be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d020      	beq.n	800389a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003864:	4b59      	ldr	r3, [pc, #356]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	4a58      	ldr	r2, [pc, #352]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 800386a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800386e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0308 	and.w	r3, r3, #8
 8003878:	2b00      	cmp	r3, #0
 800387a:	d005      	beq.n	8003888 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800387c:	4b53      	ldr	r3, [pc, #332]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	4a52      	ldr	r2, [pc, #328]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 8003882:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003886:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003888:	4b50      	ldr	r3, [pc, #320]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	494d      	ldr	r1, [pc, #308]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 8003896:	4313      	orrs	r3, r2
 8003898:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d040      	beq.n	8003928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d107      	bne.n	80038be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ae:	4b47      	ldr	r3, [pc, #284]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d115      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e07f      	b.n	80039be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d107      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038c6:	4b41      	ldr	r3, [pc, #260]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d109      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e073      	b.n	80039be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d6:	4b3d      	ldr	r3, [pc, #244]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e06b      	b.n	80039be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038e6:	4b39      	ldr	r3, [pc, #228]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f023 0203 	bic.w	r2, r3, #3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	4936      	ldr	r1, [pc, #216]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038f8:	f7fe fc60 	bl	80021bc <HAL_GetTick>
 80038fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fe:	e00a      	b.n	8003916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003900:	f7fe fc5c 	bl	80021bc <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	f241 3288 	movw	r2, #5000	; 0x1388
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e053      	b.n	80039be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003916:	4b2d      	ldr	r3, [pc, #180]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f003 020c 	and.w	r2, r3, #12
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	429a      	cmp	r2, r3
 8003926:	d1eb      	bne.n	8003900 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003928:	4b27      	ldr	r3, [pc, #156]	; (80039c8 <HAL_RCC_ClockConfig+0x1c0>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d210      	bcs.n	8003958 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003936:	4b24      	ldr	r3, [pc, #144]	; (80039c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f023 0207 	bic.w	r2, r3, #7
 800393e:	4922      	ldr	r1, [pc, #136]	; (80039c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	4313      	orrs	r3, r2
 8003944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003946:	4b20      	ldr	r3, [pc, #128]	; (80039c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d001      	beq.n	8003958 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e032      	b.n	80039be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d008      	beq.n	8003976 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003964:	4b19      	ldr	r3, [pc, #100]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	4916      	ldr	r1, [pc, #88]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 8003972:	4313      	orrs	r3, r2
 8003974:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d009      	beq.n	8003996 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003982:	4b12      	ldr	r3, [pc, #72]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	490e      	ldr	r1, [pc, #56]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 8003992:	4313      	orrs	r3, r2
 8003994:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003996:	f000 f821 	bl	80039dc <HAL_RCC_GetSysClockFreq>
 800399a:	4602      	mov	r2, r0
 800399c:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	091b      	lsrs	r3, r3, #4
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	490a      	ldr	r1, [pc, #40]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 80039a8:	5ccb      	ldrb	r3, [r1, r3]
 80039aa:	fa22 f303 	lsr.w	r3, r2, r3
 80039ae:	4a09      	ldr	r2, [pc, #36]	; (80039d4 <HAL_RCC_ClockConfig+0x1cc>)
 80039b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039b2:	4b09      	ldr	r3, [pc, #36]	; (80039d8 <HAL_RCC_ClockConfig+0x1d0>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fe fbbe 	bl	8002138 <HAL_InitTick>

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40022000 	.word	0x40022000
 80039cc:	40021000 	.word	0x40021000
 80039d0:	080076c4 	.word	0x080076c4
 80039d4:	20000004 	.word	0x20000004
 80039d8:	20000008 	.word	0x20000008

080039dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039dc:	b490      	push	{r4, r7}
 80039de:	b08a      	sub	sp, #40	; 0x28
 80039e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80039e2:	4b2a      	ldr	r3, [pc, #168]	; (8003a8c <HAL_RCC_GetSysClockFreq+0xb0>)
 80039e4:	1d3c      	adds	r4, r7, #4
 80039e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80039ec:	f240 2301 	movw	r3, #513	; 0x201
 80039f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	61fb      	str	r3, [r7, #28]
 80039f6:	2300      	movs	r3, #0
 80039f8:	61bb      	str	r3, [r7, #24]
 80039fa:	2300      	movs	r3, #0
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a06:	4b22      	ldr	r3, [pc, #136]	; (8003a90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f003 030c 	and.w	r3, r3, #12
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d002      	beq.n	8003a1c <HAL_RCC_GetSysClockFreq+0x40>
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d003      	beq.n	8003a22 <HAL_RCC_GetSysClockFreq+0x46>
 8003a1a:	e02d      	b.n	8003a78 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a1c:	4b1d      	ldr	r3, [pc, #116]	; (8003a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a1e:	623b      	str	r3, [r7, #32]
      break;
 8003a20:	e02d      	b.n	8003a7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	0c9b      	lsrs	r3, r3, #18
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a2e:	4413      	add	r3, r2
 8003a30:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a34:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d013      	beq.n	8003a68 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a40:	4b13      	ldr	r3, [pc, #76]	; (8003a90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	0c5b      	lsrs	r3, r3, #17
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a4e:	4413      	add	r3, r2
 8003a50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	4a0e      	ldr	r2, [pc, #56]	; (8003a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a5a:	fb02 f203 	mul.w	r2, r2, r3
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24
 8003a66:	e004      	b.n	8003a72 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	4a0b      	ldr	r2, [pc, #44]	; (8003a98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a6c:	fb02 f303 	mul.w	r3, r2, r3
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	623b      	str	r3, [r7, #32]
      break;
 8003a76:	e002      	b.n	8003a7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a78:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a7a:	623b      	str	r3, [r7, #32]
      break;
 8003a7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3728      	adds	r7, #40	; 0x28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bc90      	pop	{r4, r7}
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	080076a4 	.word	0x080076a4
 8003a90:	40021000 	.word	0x40021000
 8003a94:	007a1200 	.word	0x007a1200
 8003a98:	003d0900 	.word	0x003d0900

08003a9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aa0:	4b02      	ldr	r3, [pc, #8]	; (8003aac <HAL_RCC_GetHCLKFreq+0x10>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr
 8003aac:	20000004 	.word	0x20000004

08003ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ab4:	f7ff fff2 	bl	8003a9c <HAL_RCC_GetHCLKFreq>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	0a1b      	lsrs	r3, r3, #8
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	4903      	ldr	r1, [pc, #12]	; (8003ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ac6:	5ccb      	ldrb	r3, [r1, r3]
 8003ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	080076d4 	.word	0x080076d4

08003ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003adc:	f7ff ffde 	bl	8003a9c <HAL_RCC_GetHCLKFreq>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	0adb      	lsrs	r3, r3, #11
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	4903      	ldr	r1, [pc, #12]	; (8003afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aee:	5ccb      	ldrb	r3, [r1, r3]
 8003af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40021000 	.word	0x40021000
 8003afc:	080076d4 	.word	0x080076d4

08003b00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b08:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <RCC_Delay+0x34>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a0a      	ldr	r2, [pc, #40]	; (8003b38 <RCC_Delay+0x38>)
 8003b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b12:	0a5b      	lsrs	r3, r3, #9
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	fb02 f303 	mul.w	r3, r2, r3
 8003b1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b1c:	bf00      	nop
  }
  while (Delay --);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	1e5a      	subs	r2, r3, #1
 8003b22:	60fa      	str	r2, [r7, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1f9      	bne.n	8003b1c <RCC_Delay+0x1c>
}
 8003b28:	bf00      	nop
 8003b2a:	bf00      	nop
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr
 8003b34:	20000004 	.word	0x20000004
 8003b38:	10624dd3 	.word	0x10624dd3

08003b3c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	613b      	str	r3, [r7, #16]
 8003b48:	2300      	movs	r3, #0
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d07d      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b5c:	4b4f      	ldr	r3, [pc, #316]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10d      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b68:	4b4c      	ldr	r3, [pc, #304]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	4a4b      	ldr	r2, [pc, #300]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b72:	61d3      	str	r3, [r2, #28]
 8003b74:	4b49      	ldr	r3, [pc, #292]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7c:	60bb      	str	r3, [r7, #8]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b80:	2301      	movs	r3, #1
 8003b82:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b84:	4b46      	ldr	r3, [pc, #280]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d118      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b90:	4b43      	ldr	r3, [pc, #268]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a42      	ldr	r2, [pc, #264]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b9c:	f7fe fb0e 	bl	80021bc <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba4:	f7fe fb0a 	bl	80021bc <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b64      	cmp	r3, #100	; 0x64
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e06d      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb6:	4b3a      	ldr	r3, [pc, #232]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0f0      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bc2:	4b36      	ldr	r3, [pc, #216]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d02e      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d027      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003be0:	4b2e      	ldr	r3, [pc, #184]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003be8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bea:	4b2e      	ldr	r3, [pc, #184]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bec:	2201      	movs	r2, #1
 8003bee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bf0:	4b2c      	ldr	r3, [pc, #176]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bf6:	4a29      	ldr	r2, [pc, #164]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d014      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c06:	f7fe fad9 	bl	80021bc <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0c:	e00a      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0e:	f7fe fad5 	bl	80021bc <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e036      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c24:	4b1d      	ldr	r3, [pc, #116]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0ee      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c30:	4b1a      	ldr	r3, [pc, #104]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	4917      	ldr	r1, [pc, #92]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c42:	7dfb      	ldrb	r3, [r7, #23]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d105      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c48:	4b14      	ldr	r3, [pc, #80]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	4a13      	ldr	r2, [pc, #76]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c60:	4b0e      	ldr	r3, [pc, #56]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	490b      	ldr	r1, [pc, #44]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0310 	and.w	r3, r3, #16
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d008      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c7e:	4b07      	ldr	r3, [pc, #28]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	4904      	ldr	r1, [pc, #16]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	40007000 	.word	0x40007000
 8003ca4:	42420440 	.word	0x42420440

08003ca8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ca8:	b590      	push	{r4, r7, lr}
 8003caa:	b08d      	sub	sp, #52	; 0x34
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003cb0:	4b5a      	ldr	r3, [pc, #360]	; (8003e1c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003cb2:	f107 040c 	add.w	r4, r7, #12
 8003cb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003cbc:	f240 2301 	movw	r3, #513	; 0x201
 8003cc0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cca:	2300      	movs	r3, #0
 8003ccc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	61fb      	str	r3, [r7, #28]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b10      	cmp	r3, #16
 8003cda:	d00a      	beq.n	8003cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b10      	cmp	r3, #16
 8003ce0:	f200 8091 	bhi.w	8003e06 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d04c      	beq.n	8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d07c      	beq.n	8003dea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003cf0:	e089      	b.n	8003e06 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8003cf2:	4b4b      	ldr	r3, [pc, #300]	; (8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003cf8:	4b49      	ldr	r3, [pc, #292]	; (8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 8082 	beq.w	8003e0a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	0c9b      	lsrs	r3, r3, #18
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003d12:	4413      	add	r3, r2
 8003d14:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d18:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d018      	beq.n	8003d56 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d24:	4b3e      	ldr	r3, [pc, #248]	; (8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	0c5b      	lsrs	r3, r3, #17
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003d32:	4413      	add	r3, r2
 8003d34:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00d      	beq.n	8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003d44:	4a37      	ldr	r2, [pc, #220]	; (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	fb02 f303 	mul.w	r3, r2, r3
 8003d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d54:	e004      	b.n	8003d60 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	4a33      	ldr	r2, [pc, #204]	; (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8003d5a:	fb02 f303 	mul.w	r3, r2, r3
 8003d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003d60:	4b2f      	ldr	r3, [pc, #188]	; (8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d6c:	d102      	bne.n	8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8003d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d70:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d72:	e04a      	b.n	8003e0a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8003d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	4a2c      	ldr	r2, [pc, #176]	; (8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8003d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7e:	085b      	lsrs	r3, r3, #1
 8003d80:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d82:	e042      	b.n	8003e0a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8003d84:	4b26      	ldr	r3, [pc, #152]	; (8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d94:	d108      	bne.n	8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8003da0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003da4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003da6:	e01f      	b.n	8003de8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003db2:	d109      	bne.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003db4:	4b1a      	ldr	r3, [pc, #104]	; (8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8003dc0:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dc6:	e00f      	b.n	8003de8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dd2:	d11c      	bne.n	8003e0e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003dd4:	4b12      	ldr	r3, [pc, #72]	; (8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d016      	beq.n	8003e0e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8003de0:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003de4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003de6:	e012      	b.n	8003e0e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003de8:	e011      	b.n	8003e0e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003dea:	f7ff fe75 	bl	8003ad8 <HAL_RCC_GetPCLK2Freq>
 8003dee:	4602      	mov	r2, r0
 8003df0:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	0b9b      	lsrs	r3, r3, #14
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e02:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003e04:	e004      	b.n	8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003e06:	bf00      	nop
 8003e08:	e002      	b.n	8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003e0a:	bf00      	nop
 8003e0c:	e000      	b.n	8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003e0e:	bf00      	nop
    }
  }
  return (frequency);
 8003e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3734      	adds	r7, #52	; 0x34
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd90      	pop	{r4, r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	080076b4 	.word	0x080076b4
 8003e20:	40021000 	.word	0x40021000
 8003e24:	007a1200 	.word	0x007a1200
 8003e28:	003d0900 	.word	0x003d0900
 8003e2c:	aaaaaaab 	.word	0xaaaaaaab

08003e30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e03f      	b.n	8003ec2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fe f8b2 	bl	8001fc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2224      	movs	r2, #36	; 0x24
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 fc79 	bl	800476c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695a      	ldr	r2, [r3, #20]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ea8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b082      	sub	sp, #8
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e047      	b.n	8003f6c <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d106      	bne.n	8003ef6 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f7fe f865 	bl	8001fc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2224      	movs	r2, #36	; 0x24
 8003efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f0c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 fc2c 	bl	800476c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691a      	ldr	r2, [r3, #16]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f22:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695a      	ldr	r2, [r3, #20]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003f32:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695a      	ldr	r2, [r3, #20]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0208 	orr.w	r2, r2, #8
 8003f42:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68da      	ldr	r2, [r3, #12]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f52:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2220      	movs	r2, #32
 8003f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b08a      	sub	sp, #40	; 0x28
 8003f78:	af02      	add	r7, sp, #8
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	603b      	str	r3, [r7, #0]
 8003f80:	4613      	mov	r3, r2
 8003f82:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b20      	cmp	r3, #32
 8003f92:	d17c      	bne.n	800408e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <HAL_UART_Transmit+0x2c>
 8003f9a:	88fb      	ldrh	r3, [r7, #6]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e075      	b.n	8004090 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <HAL_UART_Transmit+0x3e>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e06e      	b.n	8004090 <HAL_UART_Transmit+0x11c>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2221      	movs	r2, #33	; 0x21
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fc8:	f7fe f8f8 	bl	80021bc <HAL_GetTick>
 8003fcc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	88fa      	ldrh	r2, [r7, #6]
 8003fd2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	88fa      	ldrh	r2, [r7, #6]
 8003fd8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe2:	d108      	bne.n	8003ff6 <HAL_UART_Transmit+0x82>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d104      	bne.n	8003ff6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003fec:	2300      	movs	r3, #0
 8003fee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	61bb      	str	r3, [r7, #24]
 8003ff4:	e003      	b.n	8003ffe <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004006:	e02a      	b.n	800405e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	2200      	movs	r2, #0
 8004010:	2180      	movs	r1, #128	; 0x80
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 fa10 	bl	8004438 <UART_WaitOnFlagUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e036      	b.n	8004090 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10b      	bne.n	8004040 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	461a      	mov	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004036:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	3302      	adds	r3, #2
 800403c:	61bb      	str	r3, [r7, #24]
 800403e:	e007      	b.n	8004050 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	781a      	ldrb	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	3301      	adds	r3, #1
 800404e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004054:	b29b      	uxth	r3, r3
 8004056:	3b01      	subs	r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1cf      	bne.n	8004008 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	2200      	movs	r2, #0
 8004070:	2140      	movs	r1, #64	; 0x40
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 f9e0 	bl	8004438 <UART_WaitOnFlagUntilTimeout>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e006      	b.n	8004090 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2220      	movs	r2, #32
 8004086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	e000      	b.n	8004090 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800408e:	2302      	movs	r3, #2
  }
}
 8004090:	4618      	mov	r0, r3
 8004092:	3720      	adds	r7, #32
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08a      	sub	sp, #40	; 0x28
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10d      	bne.n	80040ea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	f003 0320 	and.w	r3, r3, #32
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d008      	beq.n	80040ea <HAL_UART_IRQHandler+0x52>
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	f003 0320 	and.w	r3, r3, #32
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 fa99 	bl	800461a <UART_Receive_IT>
      return;
 80040e8:	e17b      	b.n	80043e2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 80b1 	beq.w	8004254 <HAL_UART_IRQHandler+0x1bc>
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d105      	bne.n	8004108 <HAL_UART_IRQHandler+0x70>
 80040fc:	6a3b      	ldr	r3, [r7, #32]
 80040fe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004102:	2b00      	cmp	r3, #0
 8004104:	f000 80a6 	beq.w	8004254 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <HAL_UART_IRQHandler+0x90>
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	f043 0201 	orr.w	r2, r3, #1
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <HAL_UART_IRQHandler+0xb0>
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	f043 0202 	orr.w	r2, r3, #2
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <HAL_UART_IRQHandler+0xd0>
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004160:	f043 0204 	orr.w	r2, r3, #4
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	f003 0308 	and.w	r3, r3, #8
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00f      	beq.n	8004192 <HAL_UART_IRQHandler+0xfa>
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b00      	cmp	r3, #0
 800417a:	d104      	bne.n	8004186 <HAL_UART_IRQHandler+0xee>
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d005      	beq.n	8004192 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	f043 0208 	orr.w	r2, r3, #8
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 811e 	beq.w	80043d8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	f003 0320 	and.w	r3, r3, #32
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d007      	beq.n	80041b6 <HAL_UART_IRQHandler+0x11e>
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	f003 0320 	and.w	r3, r3, #32
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d002      	beq.n	80041b6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 fa32 	bl	800461a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	bf14      	ite	ne
 80041c4:	2301      	movne	r3, #1
 80041c6:	2300      	moveq	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d102      	bne.n	80041de <HAL_UART_IRQHandler+0x146>
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d031      	beq.n	8004242 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f974 	bl	80044cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d023      	beq.n	800423a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695a      	ldr	r2, [r3, #20]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004200:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004206:	2b00      	cmp	r3, #0
 8004208:	d013      	beq.n	8004232 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420e:	4a76      	ldr	r2, [pc, #472]	; (80043e8 <HAL_UART_IRQHandler+0x350>)
 8004210:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004216:	4618      	mov	r0, r3
 8004218:	f7fe fe7c 	bl	8002f14 <HAL_DMA_Abort_IT>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d016      	beq.n	8004250 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800422c:	4610      	mov	r0, r2
 800422e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004230:	e00e      	b.n	8004250 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f8ec 	bl	8004410 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004238:	e00a      	b.n	8004250 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f8e8 	bl	8004410 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004240:	e006      	b.n	8004250 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f8e4 	bl	8004410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800424e:	e0c3      	b.n	80043d8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004250:	bf00      	nop
    return;
 8004252:	e0c1      	b.n	80043d8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004258:	2b01      	cmp	r3, #1
 800425a:	f040 80a1 	bne.w	80043a0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 809b 	beq.w	80043a0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 8095 	beq.w	80043a0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004276:	2300      	movs	r3, #0
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	d04e      	beq.n	8004338 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80042a4:	8a3b      	ldrh	r3, [r7, #16]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 8098 	beq.w	80043dc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042b0:	8a3a      	ldrh	r2, [r7, #16]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	f080 8092 	bcs.w	80043dc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	8a3a      	ldrh	r2, [r7, #16]
 80042bc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	2b20      	cmp	r3, #32
 80042c6:	d02b      	beq.n	8004320 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042d6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	695a      	ldr	r2, [r3, #20]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0201 	bic.w	r2, r2, #1
 80042e6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	695a      	ldr	r2, [r3, #20]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042f6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0210 	bic.w	r2, r2, #16
 8004314:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431a:	4618      	mov	r0, r3
 800431c:	f7fe fdbf 	bl	8002e9e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004328:	b29b      	uxth	r3, r3
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	b29b      	uxth	r3, r3
 800432e:	4619      	mov	r1, r3
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f876 	bl	8004422 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004336:	e051      	b.n	80043dc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004340:	b29b      	uxth	r3, r3
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d047      	beq.n	80043e0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004350:	8a7b      	ldrh	r3, [r7, #18]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d044      	beq.n	80043e0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68da      	ldr	r2, [r3, #12]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004364:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695a      	ldr	r2, [r3, #20]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0201 	bic.w	r2, r2, #1
 8004374:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2220      	movs	r2, #32
 800437a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 0210 	bic.w	r2, r2, #16
 8004392:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004394:	8a7b      	ldrh	r3, [r7, #18]
 8004396:	4619      	mov	r1, r3
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f842 	bl	8004422 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800439e:	e01f      	b.n	80043e0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d008      	beq.n	80043bc <HAL_UART_IRQHandler+0x324>
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f8c9 	bl	800454c <UART_Transmit_IT>
    return;
 80043ba:	e012      	b.n	80043e2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00d      	beq.n	80043e2 <HAL_UART_IRQHandler+0x34a>
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d008      	beq.n	80043e2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f90a 	bl	80045ea <UART_EndTransmit_IT>
    return;
 80043d6:	e004      	b.n	80043e2 <HAL_UART_IRQHandler+0x34a>
    return;
 80043d8:	bf00      	nop
 80043da:	e002      	b.n	80043e2 <HAL_UART_IRQHandler+0x34a>
      return;
 80043dc:	bf00      	nop
 80043de:	e000      	b.n	80043e2 <HAL_UART_IRQHandler+0x34a>
      return;
 80043e0:	bf00      	nop
  }
}
 80043e2:	3728      	adds	r7, #40	; 0x28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	08004525 	.word	0x08004525

080043ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bc80      	pop	{r7}
 80043fc:	4770      	bx	lr

080043fe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr

08004410 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	4770      	bx	lr

08004422 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
 800442a:	460b      	mov	r3, r1
 800442c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr

08004438 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	4613      	mov	r3, r2
 8004446:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004448:	e02c      	b.n	80044a4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004450:	d028      	beq.n	80044a4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d007      	beq.n	8004468 <UART_WaitOnFlagUntilTimeout+0x30>
 8004458:	f7fd feb0 	bl	80021bc <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	429a      	cmp	r2, r3
 8004466:	d21d      	bcs.n	80044a4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004476:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695a      	ldr	r2, [r3, #20]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0201 	bic.w	r2, r2, #1
 8004486:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2220      	movs	r2, #32
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2220      	movs	r2, #32
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e00f      	b.n	80044c4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	4013      	ands	r3, r2
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	bf0c      	ite	eq
 80044b4:	2301      	moveq	r3, #1
 80044b6:	2300      	movne	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	461a      	mov	r2, r3
 80044bc:	79fb      	ldrb	r3, [r7, #7]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d0c3      	beq.n	800444a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80044e2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695a      	ldr	r2, [r3, #20]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0201 	bic.w	r2, r2, #1
 80044f2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d107      	bne.n	800450c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0210 	bic.w	r2, r2, #16
 800450a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2220      	movs	r2, #32
 8004510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	631a      	str	r2, [r3, #48]	; 0x30
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	bc80      	pop	{r7}
 8004522:	4770      	bx	lr

08004524 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f7ff ff66 	bl	8004410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004544:	bf00      	nop
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b21      	cmp	r3, #33	; 0x21
 800455e:	d13e      	bne.n	80045de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004568:	d114      	bne.n	8004594 <UART_Transmit_IT+0x48>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d110      	bne.n	8004594 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	881b      	ldrh	r3, [r3, #0]
 800457c:	461a      	mov	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004586:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	1c9a      	adds	r2, r3, #2
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	621a      	str	r2, [r3, #32]
 8004592:	e008      	b.n	80045a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	1c59      	adds	r1, r3, #1
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6211      	str	r1, [r2, #32]
 800459e:	781a      	ldrb	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	4619      	mov	r1, r3
 80045b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10f      	bne.n	80045da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68da      	ldr	r2, [r3, #12]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	e000      	b.n	80045e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045de:	2302      	movs	r3, #2
  }
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bc80      	pop	{r7}
 80045e8:	4770      	bx	lr

080045ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b082      	sub	sp, #8
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68da      	ldr	r2, [r3, #12]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004600:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2220      	movs	r2, #32
 8004606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7ff feee 	bl	80043ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b086      	sub	sp, #24
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b22      	cmp	r3, #34	; 0x22
 800462c:	f040 8099 	bne.w	8004762 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004638:	d117      	bne.n	800466a <UART_Receive_IT+0x50>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d113      	bne.n	800466a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	b29b      	uxth	r3, r3
 8004654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004658:	b29a      	uxth	r2, r3
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004662:	1c9a      	adds	r2, r3, #2
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	629a      	str	r2, [r3, #40]	; 0x28
 8004668:	e026      	b.n	80046b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004670:	2300      	movs	r3, #0
 8004672:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467c:	d007      	beq.n	800468e <UART_Receive_IT+0x74>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10a      	bne.n	800469c <UART_Receive_IT+0x82>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	b2da      	uxtb	r2, r3
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	701a      	strb	r2, [r3, #0]
 800469a:	e008      	b.n	80046ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046bc:	b29b      	uxth	r3, r3
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	4619      	mov	r1, r3
 80046c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d148      	bne.n	800475e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 0220 	bic.w	r2, r2, #32
 80046da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68da      	ldr	r2, [r3, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695a      	ldr	r2, [r3, #20]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0201 	bic.w	r2, r2, #1
 80046fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2220      	movs	r2, #32
 8004700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004708:	2b01      	cmp	r3, #1
 800470a:	d123      	bne.n	8004754 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0210 	bic.w	r2, r2, #16
 8004720:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0310 	and.w	r3, r3, #16
 800472c:	2b10      	cmp	r3, #16
 800472e:	d10a      	bne.n	8004746 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004730:	2300      	movs	r3, #0
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800474a:	4619      	mov	r1, r3
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7ff fe68 	bl	8004422 <HAL_UARTEx_RxEventCallback>
 8004752:	e002      	b.n	800475a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7ff fe52 	bl	80043fe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800475a:	2300      	movs	r3, #0
 800475c:	e002      	b.n	8004764 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800475e:	2300      	movs	r3, #0
 8004760:	e000      	b.n	8004764 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004762:	2302      	movs	r3, #2
  }
}
 8004764:	4618      	mov	r0, r3
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	4313      	orrs	r3, r2
 800479a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80047a6:	f023 030c 	bic.w	r3, r3, #12
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6812      	ldr	r2, [r2, #0]
 80047ae:	68b9      	ldr	r1, [r7, #8]
 80047b0:	430b      	orrs	r3, r1
 80047b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699a      	ldr	r2, [r3, #24]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a2c      	ldr	r2, [pc, #176]	; (8004880 <UART_SetConfig+0x114>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d103      	bne.n	80047dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80047d4:	f7ff f980 	bl	8003ad8 <HAL_RCC_GetPCLK2Freq>
 80047d8:	60f8      	str	r0, [r7, #12]
 80047da:	e002      	b.n	80047e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80047dc:	f7ff f968 	bl	8003ab0 <HAL_RCC_GetPCLK1Freq>
 80047e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4613      	mov	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	009a      	lsls	r2, r3, #2
 80047ec:	441a      	add	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f8:	4a22      	ldr	r2, [pc, #136]	; (8004884 <UART_SetConfig+0x118>)
 80047fa:	fba2 2303 	umull	r2, r3, r2, r3
 80047fe:	095b      	lsrs	r3, r3, #5
 8004800:	0119      	lsls	r1, r3, #4
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4613      	mov	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	009a      	lsls	r2, r3, #2
 800480c:	441a      	add	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	fbb2 f2f3 	udiv	r2, r2, r3
 8004818:	4b1a      	ldr	r3, [pc, #104]	; (8004884 <UART_SetConfig+0x118>)
 800481a:	fba3 0302 	umull	r0, r3, r3, r2
 800481e:	095b      	lsrs	r3, r3, #5
 8004820:	2064      	movs	r0, #100	; 0x64
 8004822:	fb00 f303 	mul.w	r3, r0, r3
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	3332      	adds	r3, #50	; 0x32
 800482c:	4a15      	ldr	r2, [pc, #84]	; (8004884 <UART_SetConfig+0x118>)
 800482e:	fba2 2303 	umull	r2, r3, r2, r3
 8004832:	095b      	lsrs	r3, r3, #5
 8004834:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004838:	4419      	add	r1, r3
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4613      	mov	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	009a      	lsls	r2, r3, #2
 8004844:	441a      	add	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004850:	4b0c      	ldr	r3, [pc, #48]	; (8004884 <UART_SetConfig+0x118>)
 8004852:	fba3 0302 	umull	r0, r3, r3, r2
 8004856:	095b      	lsrs	r3, r3, #5
 8004858:	2064      	movs	r0, #100	; 0x64
 800485a:	fb00 f303 	mul.w	r3, r0, r3
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	3332      	adds	r3, #50	; 0x32
 8004864:	4a07      	ldr	r2, [pc, #28]	; (8004884 <UART_SetConfig+0x118>)
 8004866:	fba2 2303 	umull	r2, r3, r2, r3
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	f003 020f 	and.w	r2, r3, #15
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	440a      	add	r2, r1
 8004876:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004878:	bf00      	nop
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40013800 	.word	0x40013800
 8004884:	51eb851f 	.word	0x51eb851f

08004888 <__errno>:
 8004888:	4b01      	ldr	r3, [pc, #4]	; (8004890 <__errno+0x8>)
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	20000010 	.word	0x20000010

08004894 <__libc_init_array>:
 8004894:	b570      	push	{r4, r5, r6, lr}
 8004896:	2600      	movs	r6, #0
 8004898:	4d0c      	ldr	r5, [pc, #48]	; (80048cc <__libc_init_array+0x38>)
 800489a:	4c0d      	ldr	r4, [pc, #52]	; (80048d0 <__libc_init_array+0x3c>)
 800489c:	1b64      	subs	r4, r4, r5
 800489e:	10a4      	asrs	r4, r4, #2
 80048a0:	42a6      	cmp	r6, r4
 80048a2:	d109      	bne.n	80048b8 <__libc_init_array+0x24>
 80048a4:	f002 feba 	bl	800761c <_init>
 80048a8:	2600      	movs	r6, #0
 80048aa:	4d0a      	ldr	r5, [pc, #40]	; (80048d4 <__libc_init_array+0x40>)
 80048ac:	4c0a      	ldr	r4, [pc, #40]	; (80048d8 <__libc_init_array+0x44>)
 80048ae:	1b64      	subs	r4, r4, r5
 80048b0:	10a4      	asrs	r4, r4, #2
 80048b2:	42a6      	cmp	r6, r4
 80048b4:	d105      	bne.n	80048c2 <__libc_init_array+0x2e>
 80048b6:	bd70      	pop	{r4, r5, r6, pc}
 80048b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80048bc:	4798      	blx	r3
 80048be:	3601      	adds	r6, #1
 80048c0:	e7ee      	b.n	80048a0 <__libc_init_array+0xc>
 80048c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80048c6:	4798      	blx	r3
 80048c8:	3601      	adds	r6, #1
 80048ca:	e7f2      	b.n	80048b2 <__libc_init_array+0x1e>
 80048cc:	08007abc 	.word	0x08007abc
 80048d0:	08007abc 	.word	0x08007abc
 80048d4:	08007abc 	.word	0x08007abc
 80048d8:	08007ac0 	.word	0x08007ac0

080048dc <memset>:
 80048dc:	4603      	mov	r3, r0
 80048de:	4402      	add	r2, r0
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d100      	bne.n	80048e6 <memset+0xa>
 80048e4:	4770      	bx	lr
 80048e6:	f803 1b01 	strb.w	r1, [r3], #1
 80048ea:	e7f9      	b.n	80048e0 <memset+0x4>

080048ec <__cvt>:
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048f2:	461f      	mov	r7, r3
 80048f4:	bfbb      	ittet	lt
 80048f6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80048fa:	461f      	movlt	r7, r3
 80048fc:	2300      	movge	r3, #0
 80048fe:	232d      	movlt	r3, #45	; 0x2d
 8004900:	b088      	sub	sp, #32
 8004902:	4614      	mov	r4, r2
 8004904:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004906:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004908:	7013      	strb	r3, [r2, #0]
 800490a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800490c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004910:	f023 0820 	bic.w	r8, r3, #32
 8004914:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004918:	d005      	beq.n	8004926 <__cvt+0x3a>
 800491a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800491e:	d100      	bne.n	8004922 <__cvt+0x36>
 8004920:	3501      	adds	r5, #1
 8004922:	2302      	movs	r3, #2
 8004924:	e000      	b.n	8004928 <__cvt+0x3c>
 8004926:	2303      	movs	r3, #3
 8004928:	aa07      	add	r2, sp, #28
 800492a:	9204      	str	r2, [sp, #16]
 800492c:	aa06      	add	r2, sp, #24
 800492e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004932:	e9cd 3500 	strd	r3, r5, [sp]
 8004936:	4622      	mov	r2, r4
 8004938:	463b      	mov	r3, r7
 800493a:	f000 fce5 	bl	8005308 <_dtoa_r>
 800493e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004942:	4606      	mov	r6, r0
 8004944:	d102      	bne.n	800494c <__cvt+0x60>
 8004946:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004948:	07db      	lsls	r3, r3, #31
 800494a:	d522      	bpl.n	8004992 <__cvt+0xa6>
 800494c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004950:	eb06 0905 	add.w	r9, r6, r5
 8004954:	d110      	bne.n	8004978 <__cvt+0x8c>
 8004956:	7833      	ldrb	r3, [r6, #0]
 8004958:	2b30      	cmp	r3, #48	; 0x30
 800495a:	d10a      	bne.n	8004972 <__cvt+0x86>
 800495c:	2200      	movs	r2, #0
 800495e:	2300      	movs	r3, #0
 8004960:	4620      	mov	r0, r4
 8004962:	4639      	mov	r1, r7
 8004964:	f7fc f82a 	bl	80009bc <__aeabi_dcmpeq>
 8004968:	b918      	cbnz	r0, 8004972 <__cvt+0x86>
 800496a:	f1c5 0501 	rsb	r5, r5, #1
 800496e:	f8ca 5000 	str.w	r5, [sl]
 8004972:	f8da 3000 	ldr.w	r3, [sl]
 8004976:	4499      	add	r9, r3
 8004978:	2200      	movs	r2, #0
 800497a:	2300      	movs	r3, #0
 800497c:	4620      	mov	r0, r4
 800497e:	4639      	mov	r1, r7
 8004980:	f7fc f81c 	bl	80009bc <__aeabi_dcmpeq>
 8004984:	b108      	cbz	r0, 800498a <__cvt+0x9e>
 8004986:	f8cd 901c 	str.w	r9, [sp, #28]
 800498a:	2230      	movs	r2, #48	; 0x30
 800498c:	9b07      	ldr	r3, [sp, #28]
 800498e:	454b      	cmp	r3, r9
 8004990:	d307      	bcc.n	80049a2 <__cvt+0xb6>
 8004992:	4630      	mov	r0, r6
 8004994:	9b07      	ldr	r3, [sp, #28]
 8004996:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004998:	1b9b      	subs	r3, r3, r6
 800499a:	6013      	str	r3, [r2, #0]
 800499c:	b008      	add	sp, #32
 800499e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a2:	1c59      	adds	r1, r3, #1
 80049a4:	9107      	str	r1, [sp, #28]
 80049a6:	701a      	strb	r2, [r3, #0]
 80049a8:	e7f0      	b.n	800498c <__cvt+0xa0>

080049aa <__exponent>:
 80049aa:	4603      	mov	r3, r0
 80049ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049ae:	2900      	cmp	r1, #0
 80049b0:	f803 2b02 	strb.w	r2, [r3], #2
 80049b4:	bfb6      	itet	lt
 80049b6:	222d      	movlt	r2, #45	; 0x2d
 80049b8:	222b      	movge	r2, #43	; 0x2b
 80049ba:	4249      	neglt	r1, r1
 80049bc:	2909      	cmp	r1, #9
 80049be:	7042      	strb	r2, [r0, #1]
 80049c0:	dd2b      	ble.n	8004a1a <__exponent+0x70>
 80049c2:	f10d 0407 	add.w	r4, sp, #7
 80049c6:	46a4      	mov	ip, r4
 80049c8:	270a      	movs	r7, #10
 80049ca:	fb91 f6f7 	sdiv	r6, r1, r7
 80049ce:	460a      	mov	r2, r1
 80049d0:	46a6      	mov	lr, r4
 80049d2:	fb07 1516 	mls	r5, r7, r6, r1
 80049d6:	2a63      	cmp	r2, #99	; 0x63
 80049d8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80049dc:	4631      	mov	r1, r6
 80049de:	f104 34ff 	add.w	r4, r4, #4294967295
 80049e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80049e6:	dcf0      	bgt.n	80049ca <__exponent+0x20>
 80049e8:	3130      	adds	r1, #48	; 0x30
 80049ea:	f1ae 0502 	sub.w	r5, lr, #2
 80049ee:	f804 1c01 	strb.w	r1, [r4, #-1]
 80049f2:	4629      	mov	r1, r5
 80049f4:	1c44      	adds	r4, r0, #1
 80049f6:	4561      	cmp	r1, ip
 80049f8:	d30a      	bcc.n	8004a10 <__exponent+0x66>
 80049fa:	f10d 0209 	add.w	r2, sp, #9
 80049fe:	eba2 020e 	sub.w	r2, r2, lr
 8004a02:	4565      	cmp	r5, ip
 8004a04:	bf88      	it	hi
 8004a06:	2200      	movhi	r2, #0
 8004a08:	4413      	add	r3, r2
 8004a0a:	1a18      	subs	r0, r3, r0
 8004a0c:	b003      	add	sp, #12
 8004a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a14:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004a18:	e7ed      	b.n	80049f6 <__exponent+0x4c>
 8004a1a:	2330      	movs	r3, #48	; 0x30
 8004a1c:	3130      	adds	r1, #48	; 0x30
 8004a1e:	7083      	strb	r3, [r0, #2]
 8004a20:	70c1      	strb	r1, [r0, #3]
 8004a22:	1d03      	adds	r3, r0, #4
 8004a24:	e7f1      	b.n	8004a0a <__exponent+0x60>
	...

08004a28 <_printf_float>:
 8004a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a2c:	b091      	sub	sp, #68	; 0x44
 8004a2e:	460c      	mov	r4, r1
 8004a30:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004a34:	4616      	mov	r6, r2
 8004a36:	461f      	mov	r7, r3
 8004a38:	4605      	mov	r5, r0
 8004a3a:	f001 fa53 	bl	8005ee4 <_localeconv_r>
 8004a3e:	6803      	ldr	r3, [r0, #0]
 8004a40:	4618      	mov	r0, r3
 8004a42:	9309      	str	r3, [sp, #36]	; 0x24
 8004a44:	f7fb fb8e 	bl	8000164 <strlen>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	930e      	str	r3, [sp, #56]	; 0x38
 8004a4c:	f8d8 3000 	ldr.w	r3, [r8]
 8004a50:	900a      	str	r0, [sp, #40]	; 0x28
 8004a52:	3307      	adds	r3, #7
 8004a54:	f023 0307 	bic.w	r3, r3, #7
 8004a58:	f103 0208 	add.w	r2, r3, #8
 8004a5c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004a60:	f8d4 b000 	ldr.w	fp, [r4]
 8004a64:	f8c8 2000 	str.w	r2, [r8]
 8004a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a70:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004a74:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004a78:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a7e:	4640      	mov	r0, r8
 8004a80:	4b9c      	ldr	r3, [pc, #624]	; (8004cf4 <_printf_float+0x2cc>)
 8004a82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a84:	f7fb ffcc 	bl	8000a20 <__aeabi_dcmpun>
 8004a88:	bb70      	cbnz	r0, 8004ae8 <_printf_float+0xc0>
 8004a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a8e:	4640      	mov	r0, r8
 8004a90:	4b98      	ldr	r3, [pc, #608]	; (8004cf4 <_printf_float+0x2cc>)
 8004a92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a94:	f7fb ffa6 	bl	80009e4 <__aeabi_dcmple>
 8004a98:	bb30      	cbnz	r0, 8004ae8 <_printf_float+0xc0>
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	4640      	mov	r0, r8
 8004aa0:	4651      	mov	r1, sl
 8004aa2:	f7fb ff95 	bl	80009d0 <__aeabi_dcmplt>
 8004aa6:	b110      	cbz	r0, 8004aae <_printf_float+0x86>
 8004aa8:	232d      	movs	r3, #45	; 0x2d
 8004aaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aae:	4b92      	ldr	r3, [pc, #584]	; (8004cf8 <_printf_float+0x2d0>)
 8004ab0:	4892      	ldr	r0, [pc, #584]	; (8004cfc <_printf_float+0x2d4>)
 8004ab2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004ab6:	bf94      	ite	ls
 8004ab8:	4698      	movls	r8, r3
 8004aba:	4680      	movhi	r8, r0
 8004abc:	2303      	movs	r3, #3
 8004abe:	f04f 0a00 	mov.w	sl, #0
 8004ac2:	6123      	str	r3, [r4, #16]
 8004ac4:	f02b 0304 	bic.w	r3, fp, #4
 8004ac8:	6023      	str	r3, [r4, #0]
 8004aca:	4633      	mov	r3, r6
 8004acc:	4621      	mov	r1, r4
 8004ace:	4628      	mov	r0, r5
 8004ad0:	9700      	str	r7, [sp, #0]
 8004ad2:	aa0f      	add	r2, sp, #60	; 0x3c
 8004ad4:	f000 f9d4 	bl	8004e80 <_printf_common>
 8004ad8:	3001      	adds	r0, #1
 8004ada:	f040 8090 	bne.w	8004bfe <_printf_float+0x1d6>
 8004ade:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae2:	b011      	add	sp, #68	; 0x44
 8004ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ae8:	4642      	mov	r2, r8
 8004aea:	4653      	mov	r3, sl
 8004aec:	4640      	mov	r0, r8
 8004aee:	4651      	mov	r1, sl
 8004af0:	f7fb ff96 	bl	8000a20 <__aeabi_dcmpun>
 8004af4:	b148      	cbz	r0, 8004b0a <_printf_float+0xe2>
 8004af6:	f1ba 0f00 	cmp.w	sl, #0
 8004afa:	bfb8      	it	lt
 8004afc:	232d      	movlt	r3, #45	; 0x2d
 8004afe:	4880      	ldr	r0, [pc, #512]	; (8004d00 <_printf_float+0x2d8>)
 8004b00:	bfb8      	it	lt
 8004b02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004b06:	4b7f      	ldr	r3, [pc, #508]	; (8004d04 <_printf_float+0x2dc>)
 8004b08:	e7d3      	b.n	8004ab2 <_printf_float+0x8a>
 8004b0a:	6863      	ldr	r3, [r4, #4]
 8004b0c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	d142      	bne.n	8004b9a <_printf_float+0x172>
 8004b14:	2306      	movs	r3, #6
 8004b16:	6063      	str	r3, [r4, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	9206      	str	r2, [sp, #24]
 8004b1c:	aa0e      	add	r2, sp, #56	; 0x38
 8004b1e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004b22:	aa0d      	add	r2, sp, #52	; 0x34
 8004b24:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004b28:	9203      	str	r2, [sp, #12]
 8004b2a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004b2e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004b32:	6023      	str	r3, [r4, #0]
 8004b34:	6863      	ldr	r3, [r4, #4]
 8004b36:	4642      	mov	r2, r8
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	4653      	mov	r3, sl
 8004b3e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004b40:	f7ff fed4 	bl	80048ec <__cvt>
 8004b44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b46:	4680      	mov	r8, r0
 8004b48:	2947      	cmp	r1, #71	; 0x47
 8004b4a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b4c:	d108      	bne.n	8004b60 <_printf_float+0x138>
 8004b4e:	1cc8      	adds	r0, r1, #3
 8004b50:	db02      	blt.n	8004b58 <_printf_float+0x130>
 8004b52:	6863      	ldr	r3, [r4, #4]
 8004b54:	4299      	cmp	r1, r3
 8004b56:	dd40      	ble.n	8004bda <_printf_float+0x1b2>
 8004b58:	f1a9 0902 	sub.w	r9, r9, #2
 8004b5c:	fa5f f989 	uxtb.w	r9, r9
 8004b60:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004b64:	d81f      	bhi.n	8004ba6 <_printf_float+0x17e>
 8004b66:	464a      	mov	r2, r9
 8004b68:	3901      	subs	r1, #1
 8004b6a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b6e:	910d      	str	r1, [sp, #52]	; 0x34
 8004b70:	f7ff ff1b 	bl	80049aa <__exponent>
 8004b74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b76:	4682      	mov	sl, r0
 8004b78:	1813      	adds	r3, r2, r0
 8004b7a:	2a01      	cmp	r2, #1
 8004b7c:	6123      	str	r3, [r4, #16]
 8004b7e:	dc02      	bgt.n	8004b86 <_printf_float+0x15e>
 8004b80:	6822      	ldr	r2, [r4, #0]
 8004b82:	07d2      	lsls	r2, r2, #31
 8004b84:	d501      	bpl.n	8004b8a <_printf_float+0x162>
 8004b86:	3301      	adds	r3, #1
 8004b88:	6123      	str	r3, [r4, #16]
 8004b8a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d09b      	beq.n	8004aca <_printf_float+0xa2>
 8004b92:	232d      	movs	r3, #45	; 0x2d
 8004b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b98:	e797      	b.n	8004aca <_printf_float+0xa2>
 8004b9a:	2947      	cmp	r1, #71	; 0x47
 8004b9c:	d1bc      	bne.n	8004b18 <_printf_float+0xf0>
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1ba      	bne.n	8004b18 <_printf_float+0xf0>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e7b7      	b.n	8004b16 <_printf_float+0xee>
 8004ba6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004baa:	d118      	bne.n	8004bde <_printf_float+0x1b6>
 8004bac:	2900      	cmp	r1, #0
 8004bae:	6863      	ldr	r3, [r4, #4]
 8004bb0:	dd0b      	ble.n	8004bca <_printf_float+0x1a2>
 8004bb2:	6121      	str	r1, [r4, #16]
 8004bb4:	b913      	cbnz	r3, 8004bbc <_printf_float+0x194>
 8004bb6:	6822      	ldr	r2, [r4, #0]
 8004bb8:	07d0      	lsls	r0, r2, #31
 8004bba:	d502      	bpl.n	8004bc2 <_printf_float+0x19a>
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	440b      	add	r3, r1
 8004bc0:	6123      	str	r3, [r4, #16]
 8004bc2:	f04f 0a00 	mov.w	sl, #0
 8004bc6:	65a1      	str	r1, [r4, #88]	; 0x58
 8004bc8:	e7df      	b.n	8004b8a <_printf_float+0x162>
 8004bca:	b913      	cbnz	r3, 8004bd2 <_printf_float+0x1aa>
 8004bcc:	6822      	ldr	r2, [r4, #0]
 8004bce:	07d2      	lsls	r2, r2, #31
 8004bd0:	d501      	bpl.n	8004bd6 <_printf_float+0x1ae>
 8004bd2:	3302      	adds	r3, #2
 8004bd4:	e7f4      	b.n	8004bc0 <_printf_float+0x198>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e7f2      	b.n	8004bc0 <_printf_float+0x198>
 8004bda:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004bde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004be0:	4299      	cmp	r1, r3
 8004be2:	db05      	blt.n	8004bf0 <_printf_float+0x1c8>
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	6121      	str	r1, [r4, #16]
 8004be8:	07d8      	lsls	r0, r3, #31
 8004bea:	d5ea      	bpl.n	8004bc2 <_printf_float+0x19a>
 8004bec:	1c4b      	adds	r3, r1, #1
 8004bee:	e7e7      	b.n	8004bc0 <_printf_float+0x198>
 8004bf0:	2900      	cmp	r1, #0
 8004bf2:	bfcc      	ite	gt
 8004bf4:	2201      	movgt	r2, #1
 8004bf6:	f1c1 0202 	rsble	r2, r1, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	e7e0      	b.n	8004bc0 <_printf_float+0x198>
 8004bfe:	6823      	ldr	r3, [r4, #0]
 8004c00:	055a      	lsls	r2, r3, #21
 8004c02:	d407      	bmi.n	8004c14 <_printf_float+0x1ec>
 8004c04:	6923      	ldr	r3, [r4, #16]
 8004c06:	4642      	mov	r2, r8
 8004c08:	4631      	mov	r1, r6
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	47b8      	blx	r7
 8004c0e:	3001      	adds	r0, #1
 8004c10:	d12b      	bne.n	8004c6a <_printf_float+0x242>
 8004c12:	e764      	b.n	8004ade <_printf_float+0xb6>
 8004c14:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004c18:	f240 80dd 	bls.w	8004dd6 <_printf_float+0x3ae>
 8004c1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c20:	2200      	movs	r2, #0
 8004c22:	2300      	movs	r3, #0
 8004c24:	f7fb feca 	bl	80009bc <__aeabi_dcmpeq>
 8004c28:	2800      	cmp	r0, #0
 8004c2a:	d033      	beq.n	8004c94 <_printf_float+0x26c>
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	4631      	mov	r1, r6
 8004c30:	4628      	mov	r0, r5
 8004c32:	4a35      	ldr	r2, [pc, #212]	; (8004d08 <_printf_float+0x2e0>)
 8004c34:	47b8      	blx	r7
 8004c36:	3001      	adds	r0, #1
 8004c38:	f43f af51 	beq.w	8004ade <_printf_float+0xb6>
 8004c3c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c40:	429a      	cmp	r2, r3
 8004c42:	db02      	blt.n	8004c4a <_printf_float+0x222>
 8004c44:	6823      	ldr	r3, [r4, #0]
 8004c46:	07d8      	lsls	r0, r3, #31
 8004c48:	d50f      	bpl.n	8004c6a <_printf_float+0x242>
 8004c4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c4e:	4631      	mov	r1, r6
 8004c50:	4628      	mov	r0, r5
 8004c52:	47b8      	blx	r7
 8004c54:	3001      	adds	r0, #1
 8004c56:	f43f af42 	beq.w	8004ade <_printf_float+0xb6>
 8004c5a:	f04f 0800 	mov.w	r8, #0
 8004c5e:	f104 091a 	add.w	r9, r4, #26
 8004c62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c64:	3b01      	subs	r3, #1
 8004c66:	4543      	cmp	r3, r8
 8004c68:	dc09      	bgt.n	8004c7e <_printf_float+0x256>
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	079b      	lsls	r3, r3, #30
 8004c6e:	f100 8102 	bmi.w	8004e76 <_printf_float+0x44e>
 8004c72:	68e0      	ldr	r0, [r4, #12]
 8004c74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c76:	4298      	cmp	r0, r3
 8004c78:	bfb8      	it	lt
 8004c7a:	4618      	movlt	r0, r3
 8004c7c:	e731      	b.n	8004ae2 <_printf_float+0xba>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	464a      	mov	r2, r9
 8004c82:	4631      	mov	r1, r6
 8004c84:	4628      	mov	r0, r5
 8004c86:	47b8      	blx	r7
 8004c88:	3001      	adds	r0, #1
 8004c8a:	f43f af28 	beq.w	8004ade <_printf_float+0xb6>
 8004c8e:	f108 0801 	add.w	r8, r8, #1
 8004c92:	e7e6      	b.n	8004c62 <_printf_float+0x23a>
 8004c94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	dc38      	bgt.n	8004d0c <_printf_float+0x2e4>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	4631      	mov	r1, r6
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	4a19      	ldr	r2, [pc, #100]	; (8004d08 <_printf_float+0x2e0>)
 8004ca2:	47b8      	blx	r7
 8004ca4:	3001      	adds	r0, #1
 8004ca6:	f43f af1a 	beq.w	8004ade <_printf_float+0xb6>
 8004caa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	d102      	bne.n	8004cb8 <_printf_float+0x290>
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	07d9      	lsls	r1, r3, #31
 8004cb6:	d5d8      	bpl.n	8004c6a <_printf_float+0x242>
 8004cb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cbc:	4631      	mov	r1, r6
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	47b8      	blx	r7
 8004cc2:	3001      	adds	r0, #1
 8004cc4:	f43f af0b 	beq.w	8004ade <_printf_float+0xb6>
 8004cc8:	f04f 0900 	mov.w	r9, #0
 8004ccc:	f104 0a1a 	add.w	sl, r4, #26
 8004cd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cd2:	425b      	negs	r3, r3
 8004cd4:	454b      	cmp	r3, r9
 8004cd6:	dc01      	bgt.n	8004cdc <_printf_float+0x2b4>
 8004cd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cda:	e794      	b.n	8004c06 <_printf_float+0x1de>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	4652      	mov	r2, sl
 8004ce0:	4631      	mov	r1, r6
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	47b8      	blx	r7
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	f43f aef9 	beq.w	8004ade <_printf_float+0xb6>
 8004cec:	f109 0901 	add.w	r9, r9, #1
 8004cf0:	e7ee      	b.n	8004cd0 <_printf_float+0x2a8>
 8004cf2:	bf00      	nop
 8004cf4:	7fefffff 	.word	0x7fefffff
 8004cf8:	080076e0 	.word	0x080076e0
 8004cfc:	080076e4 	.word	0x080076e4
 8004d00:	080076ec 	.word	0x080076ec
 8004d04:	080076e8 	.word	0x080076e8
 8004d08:	080076f0 	.word	0x080076f0
 8004d0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d10:	429a      	cmp	r2, r3
 8004d12:	bfa8      	it	ge
 8004d14:	461a      	movge	r2, r3
 8004d16:	2a00      	cmp	r2, #0
 8004d18:	4691      	mov	r9, r2
 8004d1a:	dc37      	bgt.n	8004d8c <_printf_float+0x364>
 8004d1c:	f04f 0b00 	mov.w	fp, #0
 8004d20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d24:	f104 021a 	add.w	r2, r4, #26
 8004d28:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004d2c:	ebaa 0309 	sub.w	r3, sl, r9
 8004d30:	455b      	cmp	r3, fp
 8004d32:	dc33      	bgt.n	8004d9c <_printf_float+0x374>
 8004d34:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	db3b      	blt.n	8004db4 <_printf_float+0x38c>
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	07da      	lsls	r2, r3, #31
 8004d40:	d438      	bmi.n	8004db4 <_printf_float+0x38c>
 8004d42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d44:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004d46:	eba2 030a 	sub.w	r3, r2, sl
 8004d4a:	eba2 0901 	sub.w	r9, r2, r1
 8004d4e:	4599      	cmp	r9, r3
 8004d50:	bfa8      	it	ge
 8004d52:	4699      	movge	r9, r3
 8004d54:	f1b9 0f00 	cmp.w	r9, #0
 8004d58:	dc34      	bgt.n	8004dc4 <_printf_float+0x39c>
 8004d5a:	f04f 0800 	mov.w	r8, #0
 8004d5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d62:	f104 0a1a 	add.w	sl, r4, #26
 8004d66:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d6a:	1a9b      	subs	r3, r3, r2
 8004d6c:	eba3 0309 	sub.w	r3, r3, r9
 8004d70:	4543      	cmp	r3, r8
 8004d72:	f77f af7a 	ble.w	8004c6a <_printf_float+0x242>
 8004d76:	2301      	movs	r3, #1
 8004d78:	4652      	mov	r2, sl
 8004d7a:	4631      	mov	r1, r6
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	47b8      	blx	r7
 8004d80:	3001      	adds	r0, #1
 8004d82:	f43f aeac 	beq.w	8004ade <_printf_float+0xb6>
 8004d86:	f108 0801 	add.w	r8, r8, #1
 8004d8a:	e7ec      	b.n	8004d66 <_printf_float+0x33e>
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	4631      	mov	r1, r6
 8004d90:	4642      	mov	r2, r8
 8004d92:	4628      	mov	r0, r5
 8004d94:	47b8      	blx	r7
 8004d96:	3001      	adds	r0, #1
 8004d98:	d1c0      	bne.n	8004d1c <_printf_float+0x2f4>
 8004d9a:	e6a0      	b.n	8004ade <_printf_float+0xb6>
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	4631      	mov	r1, r6
 8004da0:	4628      	mov	r0, r5
 8004da2:	920b      	str	r2, [sp, #44]	; 0x2c
 8004da4:	47b8      	blx	r7
 8004da6:	3001      	adds	r0, #1
 8004da8:	f43f ae99 	beq.w	8004ade <_printf_float+0xb6>
 8004dac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004dae:	f10b 0b01 	add.w	fp, fp, #1
 8004db2:	e7b9      	b.n	8004d28 <_printf_float+0x300>
 8004db4:	4631      	mov	r1, r6
 8004db6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dba:	4628      	mov	r0, r5
 8004dbc:	47b8      	blx	r7
 8004dbe:	3001      	adds	r0, #1
 8004dc0:	d1bf      	bne.n	8004d42 <_printf_float+0x31a>
 8004dc2:	e68c      	b.n	8004ade <_printf_float+0xb6>
 8004dc4:	464b      	mov	r3, r9
 8004dc6:	4631      	mov	r1, r6
 8004dc8:	4628      	mov	r0, r5
 8004dca:	eb08 020a 	add.w	r2, r8, sl
 8004dce:	47b8      	blx	r7
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	d1c2      	bne.n	8004d5a <_printf_float+0x332>
 8004dd4:	e683      	b.n	8004ade <_printf_float+0xb6>
 8004dd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004dd8:	2a01      	cmp	r2, #1
 8004dda:	dc01      	bgt.n	8004de0 <_printf_float+0x3b8>
 8004ddc:	07db      	lsls	r3, r3, #31
 8004dde:	d537      	bpl.n	8004e50 <_printf_float+0x428>
 8004de0:	2301      	movs	r3, #1
 8004de2:	4642      	mov	r2, r8
 8004de4:	4631      	mov	r1, r6
 8004de6:	4628      	mov	r0, r5
 8004de8:	47b8      	blx	r7
 8004dea:	3001      	adds	r0, #1
 8004dec:	f43f ae77 	beq.w	8004ade <_printf_float+0xb6>
 8004df0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004df4:	4631      	mov	r1, r6
 8004df6:	4628      	mov	r0, r5
 8004df8:	47b8      	blx	r7
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	f43f ae6f 	beq.w	8004ade <_printf_float+0xb6>
 8004e00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e04:	2200      	movs	r2, #0
 8004e06:	2300      	movs	r3, #0
 8004e08:	f7fb fdd8 	bl	80009bc <__aeabi_dcmpeq>
 8004e0c:	b9d8      	cbnz	r0, 8004e46 <_printf_float+0x41e>
 8004e0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e10:	f108 0201 	add.w	r2, r8, #1
 8004e14:	3b01      	subs	r3, #1
 8004e16:	4631      	mov	r1, r6
 8004e18:	4628      	mov	r0, r5
 8004e1a:	47b8      	blx	r7
 8004e1c:	3001      	adds	r0, #1
 8004e1e:	d10e      	bne.n	8004e3e <_printf_float+0x416>
 8004e20:	e65d      	b.n	8004ade <_printf_float+0xb6>
 8004e22:	2301      	movs	r3, #1
 8004e24:	464a      	mov	r2, r9
 8004e26:	4631      	mov	r1, r6
 8004e28:	4628      	mov	r0, r5
 8004e2a:	47b8      	blx	r7
 8004e2c:	3001      	adds	r0, #1
 8004e2e:	f43f ae56 	beq.w	8004ade <_printf_float+0xb6>
 8004e32:	f108 0801 	add.w	r8, r8, #1
 8004e36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	4543      	cmp	r3, r8
 8004e3c:	dcf1      	bgt.n	8004e22 <_printf_float+0x3fa>
 8004e3e:	4653      	mov	r3, sl
 8004e40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e44:	e6e0      	b.n	8004c08 <_printf_float+0x1e0>
 8004e46:	f04f 0800 	mov.w	r8, #0
 8004e4a:	f104 091a 	add.w	r9, r4, #26
 8004e4e:	e7f2      	b.n	8004e36 <_printf_float+0x40e>
 8004e50:	2301      	movs	r3, #1
 8004e52:	4642      	mov	r2, r8
 8004e54:	e7df      	b.n	8004e16 <_printf_float+0x3ee>
 8004e56:	2301      	movs	r3, #1
 8004e58:	464a      	mov	r2, r9
 8004e5a:	4631      	mov	r1, r6
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	47b8      	blx	r7
 8004e60:	3001      	adds	r0, #1
 8004e62:	f43f ae3c 	beq.w	8004ade <_printf_float+0xb6>
 8004e66:	f108 0801 	add.w	r8, r8, #1
 8004e6a:	68e3      	ldr	r3, [r4, #12]
 8004e6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004e6e:	1a5b      	subs	r3, r3, r1
 8004e70:	4543      	cmp	r3, r8
 8004e72:	dcf0      	bgt.n	8004e56 <_printf_float+0x42e>
 8004e74:	e6fd      	b.n	8004c72 <_printf_float+0x24a>
 8004e76:	f04f 0800 	mov.w	r8, #0
 8004e7a:	f104 0919 	add.w	r9, r4, #25
 8004e7e:	e7f4      	b.n	8004e6a <_printf_float+0x442>

08004e80 <_printf_common>:
 8004e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e84:	4616      	mov	r6, r2
 8004e86:	4699      	mov	r9, r3
 8004e88:	688a      	ldr	r2, [r1, #8]
 8004e8a:	690b      	ldr	r3, [r1, #16]
 8004e8c:	4607      	mov	r7, r0
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	bfb8      	it	lt
 8004e92:	4613      	movlt	r3, r2
 8004e94:	6033      	str	r3, [r6, #0]
 8004e96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e9a:	460c      	mov	r4, r1
 8004e9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ea0:	b10a      	cbz	r2, 8004ea6 <_printf_common+0x26>
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	6033      	str	r3, [r6, #0]
 8004ea6:	6823      	ldr	r3, [r4, #0]
 8004ea8:	0699      	lsls	r1, r3, #26
 8004eaa:	bf42      	ittt	mi
 8004eac:	6833      	ldrmi	r3, [r6, #0]
 8004eae:	3302      	addmi	r3, #2
 8004eb0:	6033      	strmi	r3, [r6, #0]
 8004eb2:	6825      	ldr	r5, [r4, #0]
 8004eb4:	f015 0506 	ands.w	r5, r5, #6
 8004eb8:	d106      	bne.n	8004ec8 <_printf_common+0x48>
 8004eba:	f104 0a19 	add.w	sl, r4, #25
 8004ebe:	68e3      	ldr	r3, [r4, #12]
 8004ec0:	6832      	ldr	r2, [r6, #0]
 8004ec2:	1a9b      	subs	r3, r3, r2
 8004ec4:	42ab      	cmp	r3, r5
 8004ec6:	dc28      	bgt.n	8004f1a <_printf_common+0x9a>
 8004ec8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ecc:	1e13      	subs	r3, r2, #0
 8004ece:	6822      	ldr	r2, [r4, #0]
 8004ed0:	bf18      	it	ne
 8004ed2:	2301      	movne	r3, #1
 8004ed4:	0692      	lsls	r2, r2, #26
 8004ed6:	d42d      	bmi.n	8004f34 <_printf_common+0xb4>
 8004ed8:	4649      	mov	r1, r9
 8004eda:	4638      	mov	r0, r7
 8004edc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ee0:	47c0      	blx	r8
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	d020      	beq.n	8004f28 <_printf_common+0xa8>
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	68e5      	ldr	r5, [r4, #12]
 8004eea:	f003 0306 	and.w	r3, r3, #6
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	bf18      	it	ne
 8004ef2:	2500      	movne	r5, #0
 8004ef4:	6832      	ldr	r2, [r6, #0]
 8004ef6:	f04f 0600 	mov.w	r6, #0
 8004efa:	68a3      	ldr	r3, [r4, #8]
 8004efc:	bf08      	it	eq
 8004efe:	1aad      	subeq	r5, r5, r2
 8004f00:	6922      	ldr	r2, [r4, #16]
 8004f02:	bf08      	it	eq
 8004f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	bfc4      	itt	gt
 8004f0c:	1a9b      	subgt	r3, r3, r2
 8004f0e:	18ed      	addgt	r5, r5, r3
 8004f10:	341a      	adds	r4, #26
 8004f12:	42b5      	cmp	r5, r6
 8004f14:	d11a      	bne.n	8004f4c <_printf_common+0xcc>
 8004f16:	2000      	movs	r0, #0
 8004f18:	e008      	b.n	8004f2c <_printf_common+0xac>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	4652      	mov	r2, sl
 8004f1e:	4649      	mov	r1, r9
 8004f20:	4638      	mov	r0, r7
 8004f22:	47c0      	blx	r8
 8004f24:	3001      	adds	r0, #1
 8004f26:	d103      	bne.n	8004f30 <_printf_common+0xb0>
 8004f28:	f04f 30ff 	mov.w	r0, #4294967295
 8004f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f30:	3501      	adds	r5, #1
 8004f32:	e7c4      	b.n	8004ebe <_printf_common+0x3e>
 8004f34:	2030      	movs	r0, #48	; 0x30
 8004f36:	18e1      	adds	r1, r4, r3
 8004f38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f42:	4422      	add	r2, r4
 8004f44:	3302      	adds	r3, #2
 8004f46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f4a:	e7c5      	b.n	8004ed8 <_printf_common+0x58>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	4622      	mov	r2, r4
 8004f50:	4649      	mov	r1, r9
 8004f52:	4638      	mov	r0, r7
 8004f54:	47c0      	blx	r8
 8004f56:	3001      	adds	r0, #1
 8004f58:	d0e6      	beq.n	8004f28 <_printf_common+0xa8>
 8004f5a:	3601      	adds	r6, #1
 8004f5c:	e7d9      	b.n	8004f12 <_printf_common+0x92>
	...

08004f60 <_printf_i>:
 8004f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f64:	460c      	mov	r4, r1
 8004f66:	7e27      	ldrb	r7, [r4, #24]
 8004f68:	4691      	mov	r9, r2
 8004f6a:	2f78      	cmp	r7, #120	; 0x78
 8004f6c:	4680      	mov	r8, r0
 8004f6e:	469a      	mov	sl, r3
 8004f70:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f76:	d807      	bhi.n	8004f88 <_printf_i+0x28>
 8004f78:	2f62      	cmp	r7, #98	; 0x62
 8004f7a:	d80a      	bhi.n	8004f92 <_printf_i+0x32>
 8004f7c:	2f00      	cmp	r7, #0
 8004f7e:	f000 80d9 	beq.w	8005134 <_printf_i+0x1d4>
 8004f82:	2f58      	cmp	r7, #88	; 0x58
 8004f84:	f000 80a4 	beq.w	80050d0 <_printf_i+0x170>
 8004f88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f90:	e03a      	b.n	8005008 <_printf_i+0xa8>
 8004f92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f96:	2b15      	cmp	r3, #21
 8004f98:	d8f6      	bhi.n	8004f88 <_printf_i+0x28>
 8004f9a:	a001      	add	r0, pc, #4	; (adr r0, 8004fa0 <_printf_i+0x40>)
 8004f9c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004fa0:	08004ff9 	.word	0x08004ff9
 8004fa4:	0800500d 	.word	0x0800500d
 8004fa8:	08004f89 	.word	0x08004f89
 8004fac:	08004f89 	.word	0x08004f89
 8004fb0:	08004f89 	.word	0x08004f89
 8004fb4:	08004f89 	.word	0x08004f89
 8004fb8:	0800500d 	.word	0x0800500d
 8004fbc:	08004f89 	.word	0x08004f89
 8004fc0:	08004f89 	.word	0x08004f89
 8004fc4:	08004f89 	.word	0x08004f89
 8004fc8:	08004f89 	.word	0x08004f89
 8004fcc:	0800511b 	.word	0x0800511b
 8004fd0:	0800503d 	.word	0x0800503d
 8004fd4:	080050fd 	.word	0x080050fd
 8004fd8:	08004f89 	.word	0x08004f89
 8004fdc:	08004f89 	.word	0x08004f89
 8004fe0:	0800513d 	.word	0x0800513d
 8004fe4:	08004f89 	.word	0x08004f89
 8004fe8:	0800503d 	.word	0x0800503d
 8004fec:	08004f89 	.word	0x08004f89
 8004ff0:	08004f89 	.word	0x08004f89
 8004ff4:	08005105 	.word	0x08005105
 8004ff8:	680b      	ldr	r3, [r1, #0]
 8004ffa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ffe:	1d1a      	adds	r2, r3, #4
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	600a      	str	r2, [r1, #0]
 8005004:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005008:	2301      	movs	r3, #1
 800500a:	e0a4      	b.n	8005156 <_printf_i+0x1f6>
 800500c:	6825      	ldr	r5, [r4, #0]
 800500e:	6808      	ldr	r0, [r1, #0]
 8005010:	062e      	lsls	r6, r5, #24
 8005012:	f100 0304 	add.w	r3, r0, #4
 8005016:	d50a      	bpl.n	800502e <_printf_i+0xce>
 8005018:	6805      	ldr	r5, [r0, #0]
 800501a:	600b      	str	r3, [r1, #0]
 800501c:	2d00      	cmp	r5, #0
 800501e:	da03      	bge.n	8005028 <_printf_i+0xc8>
 8005020:	232d      	movs	r3, #45	; 0x2d
 8005022:	426d      	negs	r5, r5
 8005024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005028:	230a      	movs	r3, #10
 800502a:	485e      	ldr	r0, [pc, #376]	; (80051a4 <_printf_i+0x244>)
 800502c:	e019      	b.n	8005062 <_printf_i+0x102>
 800502e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005032:	6805      	ldr	r5, [r0, #0]
 8005034:	600b      	str	r3, [r1, #0]
 8005036:	bf18      	it	ne
 8005038:	b22d      	sxthne	r5, r5
 800503a:	e7ef      	b.n	800501c <_printf_i+0xbc>
 800503c:	680b      	ldr	r3, [r1, #0]
 800503e:	6825      	ldr	r5, [r4, #0]
 8005040:	1d18      	adds	r0, r3, #4
 8005042:	6008      	str	r0, [r1, #0]
 8005044:	0628      	lsls	r0, r5, #24
 8005046:	d501      	bpl.n	800504c <_printf_i+0xec>
 8005048:	681d      	ldr	r5, [r3, #0]
 800504a:	e002      	b.n	8005052 <_printf_i+0xf2>
 800504c:	0669      	lsls	r1, r5, #25
 800504e:	d5fb      	bpl.n	8005048 <_printf_i+0xe8>
 8005050:	881d      	ldrh	r5, [r3, #0]
 8005052:	2f6f      	cmp	r7, #111	; 0x6f
 8005054:	bf0c      	ite	eq
 8005056:	2308      	moveq	r3, #8
 8005058:	230a      	movne	r3, #10
 800505a:	4852      	ldr	r0, [pc, #328]	; (80051a4 <_printf_i+0x244>)
 800505c:	2100      	movs	r1, #0
 800505e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005062:	6866      	ldr	r6, [r4, #4]
 8005064:	2e00      	cmp	r6, #0
 8005066:	bfa8      	it	ge
 8005068:	6821      	ldrge	r1, [r4, #0]
 800506a:	60a6      	str	r6, [r4, #8]
 800506c:	bfa4      	itt	ge
 800506e:	f021 0104 	bicge.w	r1, r1, #4
 8005072:	6021      	strge	r1, [r4, #0]
 8005074:	b90d      	cbnz	r5, 800507a <_printf_i+0x11a>
 8005076:	2e00      	cmp	r6, #0
 8005078:	d04d      	beq.n	8005116 <_printf_i+0x1b6>
 800507a:	4616      	mov	r6, r2
 800507c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005080:	fb03 5711 	mls	r7, r3, r1, r5
 8005084:	5dc7      	ldrb	r7, [r0, r7]
 8005086:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800508a:	462f      	mov	r7, r5
 800508c:	42bb      	cmp	r3, r7
 800508e:	460d      	mov	r5, r1
 8005090:	d9f4      	bls.n	800507c <_printf_i+0x11c>
 8005092:	2b08      	cmp	r3, #8
 8005094:	d10b      	bne.n	80050ae <_printf_i+0x14e>
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	07df      	lsls	r7, r3, #31
 800509a:	d508      	bpl.n	80050ae <_printf_i+0x14e>
 800509c:	6923      	ldr	r3, [r4, #16]
 800509e:	6861      	ldr	r1, [r4, #4]
 80050a0:	4299      	cmp	r1, r3
 80050a2:	bfde      	ittt	le
 80050a4:	2330      	movle	r3, #48	; 0x30
 80050a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050ae:	1b92      	subs	r2, r2, r6
 80050b0:	6122      	str	r2, [r4, #16]
 80050b2:	464b      	mov	r3, r9
 80050b4:	4621      	mov	r1, r4
 80050b6:	4640      	mov	r0, r8
 80050b8:	f8cd a000 	str.w	sl, [sp]
 80050bc:	aa03      	add	r2, sp, #12
 80050be:	f7ff fedf 	bl	8004e80 <_printf_common>
 80050c2:	3001      	adds	r0, #1
 80050c4:	d14c      	bne.n	8005160 <_printf_i+0x200>
 80050c6:	f04f 30ff 	mov.w	r0, #4294967295
 80050ca:	b004      	add	sp, #16
 80050cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d0:	4834      	ldr	r0, [pc, #208]	; (80051a4 <_printf_i+0x244>)
 80050d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050d6:	680e      	ldr	r6, [r1, #0]
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	f856 5b04 	ldr.w	r5, [r6], #4
 80050de:	061f      	lsls	r7, r3, #24
 80050e0:	600e      	str	r6, [r1, #0]
 80050e2:	d514      	bpl.n	800510e <_printf_i+0x1ae>
 80050e4:	07d9      	lsls	r1, r3, #31
 80050e6:	bf44      	itt	mi
 80050e8:	f043 0320 	orrmi.w	r3, r3, #32
 80050ec:	6023      	strmi	r3, [r4, #0]
 80050ee:	b91d      	cbnz	r5, 80050f8 <_printf_i+0x198>
 80050f0:	6823      	ldr	r3, [r4, #0]
 80050f2:	f023 0320 	bic.w	r3, r3, #32
 80050f6:	6023      	str	r3, [r4, #0]
 80050f8:	2310      	movs	r3, #16
 80050fa:	e7af      	b.n	800505c <_printf_i+0xfc>
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	f043 0320 	orr.w	r3, r3, #32
 8005102:	6023      	str	r3, [r4, #0]
 8005104:	2378      	movs	r3, #120	; 0x78
 8005106:	4828      	ldr	r0, [pc, #160]	; (80051a8 <_printf_i+0x248>)
 8005108:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800510c:	e7e3      	b.n	80050d6 <_printf_i+0x176>
 800510e:	065e      	lsls	r6, r3, #25
 8005110:	bf48      	it	mi
 8005112:	b2ad      	uxthmi	r5, r5
 8005114:	e7e6      	b.n	80050e4 <_printf_i+0x184>
 8005116:	4616      	mov	r6, r2
 8005118:	e7bb      	b.n	8005092 <_printf_i+0x132>
 800511a:	680b      	ldr	r3, [r1, #0]
 800511c:	6826      	ldr	r6, [r4, #0]
 800511e:	1d1d      	adds	r5, r3, #4
 8005120:	6960      	ldr	r0, [r4, #20]
 8005122:	600d      	str	r5, [r1, #0]
 8005124:	0635      	lsls	r5, r6, #24
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	d501      	bpl.n	800512e <_printf_i+0x1ce>
 800512a:	6018      	str	r0, [r3, #0]
 800512c:	e002      	b.n	8005134 <_printf_i+0x1d4>
 800512e:	0671      	lsls	r1, r6, #25
 8005130:	d5fb      	bpl.n	800512a <_printf_i+0x1ca>
 8005132:	8018      	strh	r0, [r3, #0]
 8005134:	2300      	movs	r3, #0
 8005136:	4616      	mov	r6, r2
 8005138:	6123      	str	r3, [r4, #16]
 800513a:	e7ba      	b.n	80050b2 <_printf_i+0x152>
 800513c:	680b      	ldr	r3, [r1, #0]
 800513e:	1d1a      	adds	r2, r3, #4
 8005140:	600a      	str	r2, [r1, #0]
 8005142:	681e      	ldr	r6, [r3, #0]
 8005144:	2100      	movs	r1, #0
 8005146:	4630      	mov	r0, r6
 8005148:	6862      	ldr	r2, [r4, #4]
 800514a:	f000 fed7 	bl	8005efc <memchr>
 800514e:	b108      	cbz	r0, 8005154 <_printf_i+0x1f4>
 8005150:	1b80      	subs	r0, r0, r6
 8005152:	6060      	str	r0, [r4, #4]
 8005154:	6863      	ldr	r3, [r4, #4]
 8005156:	6123      	str	r3, [r4, #16]
 8005158:	2300      	movs	r3, #0
 800515a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800515e:	e7a8      	b.n	80050b2 <_printf_i+0x152>
 8005160:	4632      	mov	r2, r6
 8005162:	4649      	mov	r1, r9
 8005164:	4640      	mov	r0, r8
 8005166:	6923      	ldr	r3, [r4, #16]
 8005168:	47d0      	blx	sl
 800516a:	3001      	adds	r0, #1
 800516c:	d0ab      	beq.n	80050c6 <_printf_i+0x166>
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	079b      	lsls	r3, r3, #30
 8005172:	d413      	bmi.n	800519c <_printf_i+0x23c>
 8005174:	68e0      	ldr	r0, [r4, #12]
 8005176:	9b03      	ldr	r3, [sp, #12]
 8005178:	4298      	cmp	r0, r3
 800517a:	bfb8      	it	lt
 800517c:	4618      	movlt	r0, r3
 800517e:	e7a4      	b.n	80050ca <_printf_i+0x16a>
 8005180:	2301      	movs	r3, #1
 8005182:	4632      	mov	r2, r6
 8005184:	4649      	mov	r1, r9
 8005186:	4640      	mov	r0, r8
 8005188:	47d0      	blx	sl
 800518a:	3001      	adds	r0, #1
 800518c:	d09b      	beq.n	80050c6 <_printf_i+0x166>
 800518e:	3501      	adds	r5, #1
 8005190:	68e3      	ldr	r3, [r4, #12]
 8005192:	9903      	ldr	r1, [sp, #12]
 8005194:	1a5b      	subs	r3, r3, r1
 8005196:	42ab      	cmp	r3, r5
 8005198:	dcf2      	bgt.n	8005180 <_printf_i+0x220>
 800519a:	e7eb      	b.n	8005174 <_printf_i+0x214>
 800519c:	2500      	movs	r5, #0
 800519e:	f104 0619 	add.w	r6, r4, #25
 80051a2:	e7f5      	b.n	8005190 <_printf_i+0x230>
 80051a4:	080076f2 	.word	0x080076f2
 80051a8:	08007703 	.word	0x08007703

080051ac <siprintf>:
 80051ac:	b40e      	push	{r1, r2, r3}
 80051ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051b2:	b500      	push	{lr}
 80051b4:	b09c      	sub	sp, #112	; 0x70
 80051b6:	ab1d      	add	r3, sp, #116	; 0x74
 80051b8:	9002      	str	r0, [sp, #8]
 80051ba:	9006      	str	r0, [sp, #24]
 80051bc:	9107      	str	r1, [sp, #28]
 80051be:	9104      	str	r1, [sp, #16]
 80051c0:	4808      	ldr	r0, [pc, #32]	; (80051e4 <siprintf+0x38>)
 80051c2:	4909      	ldr	r1, [pc, #36]	; (80051e8 <siprintf+0x3c>)
 80051c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80051c8:	9105      	str	r1, [sp, #20]
 80051ca:	6800      	ldr	r0, [r0, #0]
 80051cc:	a902      	add	r1, sp, #8
 80051ce:	9301      	str	r3, [sp, #4]
 80051d0:	f001 fb42 	bl	8006858 <_svfiprintf_r>
 80051d4:	2200      	movs	r2, #0
 80051d6:	9b02      	ldr	r3, [sp, #8]
 80051d8:	701a      	strb	r2, [r3, #0]
 80051da:	b01c      	add	sp, #112	; 0x70
 80051dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80051e0:	b003      	add	sp, #12
 80051e2:	4770      	bx	lr
 80051e4:	20000010 	.word	0x20000010
 80051e8:	ffff0208 	.word	0xffff0208

080051ec <quorem>:
 80051ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051f0:	6903      	ldr	r3, [r0, #16]
 80051f2:	690c      	ldr	r4, [r1, #16]
 80051f4:	4607      	mov	r7, r0
 80051f6:	42a3      	cmp	r3, r4
 80051f8:	f2c0 8083 	blt.w	8005302 <quorem+0x116>
 80051fc:	3c01      	subs	r4, #1
 80051fe:	f100 0514 	add.w	r5, r0, #20
 8005202:	f101 0814 	add.w	r8, r1, #20
 8005206:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800520a:	9301      	str	r3, [sp, #4]
 800520c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005210:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005214:	3301      	adds	r3, #1
 8005216:	429a      	cmp	r2, r3
 8005218:	fbb2 f6f3 	udiv	r6, r2, r3
 800521c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005220:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005224:	d332      	bcc.n	800528c <quorem+0xa0>
 8005226:	f04f 0e00 	mov.w	lr, #0
 800522a:	4640      	mov	r0, r8
 800522c:	46ac      	mov	ip, r5
 800522e:	46f2      	mov	sl, lr
 8005230:	f850 2b04 	ldr.w	r2, [r0], #4
 8005234:	b293      	uxth	r3, r2
 8005236:	fb06 e303 	mla	r3, r6, r3, lr
 800523a:	0c12      	lsrs	r2, r2, #16
 800523c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005240:	fb06 e202 	mla	r2, r6, r2, lr
 8005244:	b29b      	uxth	r3, r3
 8005246:	ebaa 0303 	sub.w	r3, sl, r3
 800524a:	f8dc a000 	ldr.w	sl, [ip]
 800524e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005252:	fa1f fa8a 	uxth.w	sl, sl
 8005256:	4453      	add	r3, sl
 8005258:	fa1f fa82 	uxth.w	sl, r2
 800525c:	f8dc 2000 	ldr.w	r2, [ip]
 8005260:	4581      	cmp	r9, r0
 8005262:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005266:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800526a:	b29b      	uxth	r3, r3
 800526c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005270:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005274:	f84c 3b04 	str.w	r3, [ip], #4
 8005278:	d2da      	bcs.n	8005230 <quorem+0x44>
 800527a:	f855 300b 	ldr.w	r3, [r5, fp]
 800527e:	b92b      	cbnz	r3, 800528c <quorem+0xa0>
 8005280:	9b01      	ldr	r3, [sp, #4]
 8005282:	3b04      	subs	r3, #4
 8005284:	429d      	cmp	r5, r3
 8005286:	461a      	mov	r2, r3
 8005288:	d32f      	bcc.n	80052ea <quorem+0xfe>
 800528a:	613c      	str	r4, [r7, #16]
 800528c:	4638      	mov	r0, r7
 800528e:	f001 f8cb 	bl	8006428 <__mcmp>
 8005292:	2800      	cmp	r0, #0
 8005294:	db25      	blt.n	80052e2 <quorem+0xf6>
 8005296:	4628      	mov	r0, r5
 8005298:	f04f 0c00 	mov.w	ip, #0
 800529c:	3601      	adds	r6, #1
 800529e:	f858 1b04 	ldr.w	r1, [r8], #4
 80052a2:	f8d0 e000 	ldr.w	lr, [r0]
 80052a6:	b28b      	uxth	r3, r1
 80052a8:	ebac 0303 	sub.w	r3, ip, r3
 80052ac:	fa1f f28e 	uxth.w	r2, lr
 80052b0:	4413      	add	r3, r2
 80052b2:	0c0a      	lsrs	r2, r1, #16
 80052b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80052b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052bc:	b29b      	uxth	r3, r3
 80052be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052c2:	45c1      	cmp	r9, r8
 80052c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80052c8:	f840 3b04 	str.w	r3, [r0], #4
 80052cc:	d2e7      	bcs.n	800529e <quorem+0xb2>
 80052ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052d6:	b922      	cbnz	r2, 80052e2 <quorem+0xf6>
 80052d8:	3b04      	subs	r3, #4
 80052da:	429d      	cmp	r5, r3
 80052dc:	461a      	mov	r2, r3
 80052de:	d30a      	bcc.n	80052f6 <quorem+0x10a>
 80052e0:	613c      	str	r4, [r7, #16]
 80052e2:	4630      	mov	r0, r6
 80052e4:	b003      	add	sp, #12
 80052e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ea:	6812      	ldr	r2, [r2, #0]
 80052ec:	3b04      	subs	r3, #4
 80052ee:	2a00      	cmp	r2, #0
 80052f0:	d1cb      	bne.n	800528a <quorem+0x9e>
 80052f2:	3c01      	subs	r4, #1
 80052f4:	e7c6      	b.n	8005284 <quorem+0x98>
 80052f6:	6812      	ldr	r2, [r2, #0]
 80052f8:	3b04      	subs	r3, #4
 80052fa:	2a00      	cmp	r2, #0
 80052fc:	d1f0      	bne.n	80052e0 <quorem+0xf4>
 80052fe:	3c01      	subs	r4, #1
 8005300:	e7eb      	b.n	80052da <quorem+0xee>
 8005302:	2000      	movs	r0, #0
 8005304:	e7ee      	b.n	80052e4 <quorem+0xf8>
	...

08005308 <_dtoa_r>:
 8005308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800530c:	4616      	mov	r6, r2
 800530e:	461f      	mov	r7, r3
 8005310:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005312:	b099      	sub	sp, #100	; 0x64
 8005314:	4605      	mov	r5, r0
 8005316:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800531a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800531e:	b974      	cbnz	r4, 800533e <_dtoa_r+0x36>
 8005320:	2010      	movs	r0, #16
 8005322:	f000 fde3 	bl	8005eec <malloc>
 8005326:	4602      	mov	r2, r0
 8005328:	6268      	str	r0, [r5, #36]	; 0x24
 800532a:	b920      	cbnz	r0, 8005336 <_dtoa_r+0x2e>
 800532c:	21ea      	movs	r1, #234	; 0xea
 800532e:	4bae      	ldr	r3, [pc, #696]	; (80055e8 <_dtoa_r+0x2e0>)
 8005330:	48ae      	ldr	r0, [pc, #696]	; (80055ec <_dtoa_r+0x2e4>)
 8005332:	f001 fba1 	bl	8006a78 <__assert_func>
 8005336:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800533a:	6004      	str	r4, [r0, #0]
 800533c:	60c4      	str	r4, [r0, #12]
 800533e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005340:	6819      	ldr	r1, [r3, #0]
 8005342:	b151      	cbz	r1, 800535a <_dtoa_r+0x52>
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	2301      	movs	r3, #1
 8005348:	4093      	lsls	r3, r2
 800534a:	604a      	str	r2, [r1, #4]
 800534c:	608b      	str	r3, [r1, #8]
 800534e:	4628      	mov	r0, r5
 8005350:	f000 fe30 	bl	8005fb4 <_Bfree>
 8005354:	2200      	movs	r2, #0
 8005356:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	1e3b      	subs	r3, r7, #0
 800535c:	bfaf      	iteee	ge
 800535e:	2300      	movge	r3, #0
 8005360:	2201      	movlt	r2, #1
 8005362:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005366:	9305      	strlt	r3, [sp, #20]
 8005368:	bfa8      	it	ge
 800536a:	f8c8 3000 	strge.w	r3, [r8]
 800536e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005372:	4b9f      	ldr	r3, [pc, #636]	; (80055f0 <_dtoa_r+0x2e8>)
 8005374:	bfb8      	it	lt
 8005376:	f8c8 2000 	strlt.w	r2, [r8]
 800537a:	ea33 0309 	bics.w	r3, r3, r9
 800537e:	d119      	bne.n	80053b4 <_dtoa_r+0xac>
 8005380:	f242 730f 	movw	r3, #9999	; 0x270f
 8005384:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005386:	6013      	str	r3, [r2, #0]
 8005388:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800538c:	4333      	orrs	r3, r6
 800538e:	f000 8580 	beq.w	8005e92 <_dtoa_r+0xb8a>
 8005392:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005394:	b953      	cbnz	r3, 80053ac <_dtoa_r+0xa4>
 8005396:	4b97      	ldr	r3, [pc, #604]	; (80055f4 <_dtoa_r+0x2ec>)
 8005398:	e022      	b.n	80053e0 <_dtoa_r+0xd8>
 800539a:	4b97      	ldr	r3, [pc, #604]	; (80055f8 <_dtoa_r+0x2f0>)
 800539c:	9308      	str	r3, [sp, #32]
 800539e:	3308      	adds	r3, #8
 80053a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80053a2:	6013      	str	r3, [r2, #0]
 80053a4:	9808      	ldr	r0, [sp, #32]
 80053a6:	b019      	add	sp, #100	; 0x64
 80053a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ac:	4b91      	ldr	r3, [pc, #580]	; (80055f4 <_dtoa_r+0x2ec>)
 80053ae:	9308      	str	r3, [sp, #32]
 80053b0:	3303      	adds	r3, #3
 80053b2:	e7f5      	b.n	80053a0 <_dtoa_r+0x98>
 80053b4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80053b8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80053bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053c0:	2200      	movs	r2, #0
 80053c2:	2300      	movs	r3, #0
 80053c4:	f7fb fafa 	bl	80009bc <__aeabi_dcmpeq>
 80053c8:	4680      	mov	r8, r0
 80053ca:	b158      	cbz	r0, 80053e4 <_dtoa_r+0xdc>
 80053cc:	2301      	movs	r3, #1
 80053ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 8559 	beq.w	8005e8c <_dtoa_r+0xb84>
 80053da:	4888      	ldr	r0, [pc, #544]	; (80055fc <_dtoa_r+0x2f4>)
 80053dc:	6018      	str	r0, [r3, #0]
 80053de:	1e43      	subs	r3, r0, #1
 80053e0:	9308      	str	r3, [sp, #32]
 80053e2:	e7df      	b.n	80053a4 <_dtoa_r+0x9c>
 80053e4:	ab16      	add	r3, sp, #88	; 0x58
 80053e6:	9301      	str	r3, [sp, #4]
 80053e8:	ab17      	add	r3, sp, #92	; 0x5c
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	4628      	mov	r0, r5
 80053ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80053f2:	f001 f8c5 	bl	8006580 <__d2b>
 80053f6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80053fa:	4682      	mov	sl, r0
 80053fc:	2c00      	cmp	r4, #0
 80053fe:	d07e      	beq.n	80054fe <_dtoa_r+0x1f6>
 8005400:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005404:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005406:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800540a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800540e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005412:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005416:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800541a:	2200      	movs	r2, #0
 800541c:	4b78      	ldr	r3, [pc, #480]	; (8005600 <_dtoa_r+0x2f8>)
 800541e:	f7fa fead 	bl	800017c <__aeabi_dsub>
 8005422:	a36b      	add	r3, pc, #428	; (adr r3, 80055d0 <_dtoa_r+0x2c8>)
 8005424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005428:	f7fb f860 	bl	80004ec <__aeabi_dmul>
 800542c:	a36a      	add	r3, pc, #424	; (adr r3, 80055d8 <_dtoa_r+0x2d0>)
 800542e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005432:	f7fa fea5 	bl	8000180 <__adddf3>
 8005436:	4606      	mov	r6, r0
 8005438:	4620      	mov	r0, r4
 800543a:	460f      	mov	r7, r1
 800543c:	f7fa ffec 	bl	8000418 <__aeabi_i2d>
 8005440:	a367      	add	r3, pc, #412	; (adr r3, 80055e0 <_dtoa_r+0x2d8>)
 8005442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005446:	f7fb f851 	bl	80004ec <__aeabi_dmul>
 800544a:	4602      	mov	r2, r0
 800544c:	460b      	mov	r3, r1
 800544e:	4630      	mov	r0, r6
 8005450:	4639      	mov	r1, r7
 8005452:	f7fa fe95 	bl	8000180 <__adddf3>
 8005456:	4606      	mov	r6, r0
 8005458:	460f      	mov	r7, r1
 800545a:	f7fb faf7 	bl	8000a4c <__aeabi_d2iz>
 800545e:	2200      	movs	r2, #0
 8005460:	4681      	mov	r9, r0
 8005462:	2300      	movs	r3, #0
 8005464:	4630      	mov	r0, r6
 8005466:	4639      	mov	r1, r7
 8005468:	f7fb fab2 	bl	80009d0 <__aeabi_dcmplt>
 800546c:	b148      	cbz	r0, 8005482 <_dtoa_r+0x17a>
 800546e:	4648      	mov	r0, r9
 8005470:	f7fa ffd2 	bl	8000418 <__aeabi_i2d>
 8005474:	4632      	mov	r2, r6
 8005476:	463b      	mov	r3, r7
 8005478:	f7fb faa0 	bl	80009bc <__aeabi_dcmpeq>
 800547c:	b908      	cbnz	r0, 8005482 <_dtoa_r+0x17a>
 800547e:	f109 39ff 	add.w	r9, r9, #4294967295
 8005482:	f1b9 0f16 	cmp.w	r9, #22
 8005486:	d857      	bhi.n	8005538 <_dtoa_r+0x230>
 8005488:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800548c:	4b5d      	ldr	r3, [pc, #372]	; (8005604 <_dtoa_r+0x2fc>)
 800548e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005496:	f7fb fa9b 	bl	80009d0 <__aeabi_dcmplt>
 800549a:	2800      	cmp	r0, #0
 800549c:	d04e      	beq.n	800553c <_dtoa_r+0x234>
 800549e:	2300      	movs	r3, #0
 80054a0:	f109 39ff 	add.w	r9, r9, #4294967295
 80054a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80054a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80054a8:	1b1c      	subs	r4, r3, r4
 80054aa:	1e63      	subs	r3, r4, #1
 80054ac:	9309      	str	r3, [sp, #36]	; 0x24
 80054ae:	bf49      	itett	mi
 80054b0:	f1c4 0301 	rsbmi	r3, r4, #1
 80054b4:	2300      	movpl	r3, #0
 80054b6:	9306      	strmi	r3, [sp, #24]
 80054b8:	2300      	movmi	r3, #0
 80054ba:	bf54      	ite	pl
 80054bc:	9306      	strpl	r3, [sp, #24]
 80054be:	9309      	strmi	r3, [sp, #36]	; 0x24
 80054c0:	f1b9 0f00 	cmp.w	r9, #0
 80054c4:	db3c      	blt.n	8005540 <_dtoa_r+0x238>
 80054c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054c8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80054cc:	444b      	add	r3, r9
 80054ce:	9309      	str	r3, [sp, #36]	; 0x24
 80054d0:	2300      	movs	r3, #0
 80054d2:	930a      	str	r3, [sp, #40]	; 0x28
 80054d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054d6:	2b09      	cmp	r3, #9
 80054d8:	d86c      	bhi.n	80055b4 <_dtoa_r+0x2ac>
 80054da:	2b05      	cmp	r3, #5
 80054dc:	bfc4      	itt	gt
 80054de:	3b04      	subgt	r3, #4
 80054e0:	9322      	strgt	r3, [sp, #136]	; 0x88
 80054e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054e4:	bfc8      	it	gt
 80054e6:	2400      	movgt	r4, #0
 80054e8:	f1a3 0302 	sub.w	r3, r3, #2
 80054ec:	bfd8      	it	le
 80054ee:	2401      	movle	r4, #1
 80054f0:	2b03      	cmp	r3, #3
 80054f2:	f200 808b 	bhi.w	800560c <_dtoa_r+0x304>
 80054f6:	e8df f003 	tbb	[pc, r3]
 80054fa:	4f2d      	.short	0x4f2d
 80054fc:	5b4d      	.short	0x5b4d
 80054fe:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005502:	441c      	add	r4, r3
 8005504:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005508:	2b20      	cmp	r3, #32
 800550a:	bfc3      	ittte	gt
 800550c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005510:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005514:	fa09 f303 	lslgt.w	r3, r9, r3
 8005518:	f1c3 0320 	rsble	r3, r3, #32
 800551c:	bfc6      	itte	gt
 800551e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005522:	4318      	orrgt	r0, r3
 8005524:	fa06 f003 	lslle.w	r0, r6, r3
 8005528:	f7fa ff66 	bl	80003f8 <__aeabi_ui2d>
 800552c:	2301      	movs	r3, #1
 800552e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005532:	3c01      	subs	r4, #1
 8005534:	9313      	str	r3, [sp, #76]	; 0x4c
 8005536:	e770      	b.n	800541a <_dtoa_r+0x112>
 8005538:	2301      	movs	r3, #1
 800553a:	e7b3      	b.n	80054a4 <_dtoa_r+0x19c>
 800553c:	900f      	str	r0, [sp, #60]	; 0x3c
 800553e:	e7b2      	b.n	80054a6 <_dtoa_r+0x19e>
 8005540:	9b06      	ldr	r3, [sp, #24]
 8005542:	eba3 0309 	sub.w	r3, r3, r9
 8005546:	9306      	str	r3, [sp, #24]
 8005548:	f1c9 0300 	rsb	r3, r9, #0
 800554c:	930a      	str	r3, [sp, #40]	; 0x28
 800554e:	2300      	movs	r3, #0
 8005550:	930e      	str	r3, [sp, #56]	; 0x38
 8005552:	e7bf      	b.n	80054d4 <_dtoa_r+0x1cc>
 8005554:	2300      	movs	r3, #0
 8005556:	930b      	str	r3, [sp, #44]	; 0x2c
 8005558:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800555a:	2b00      	cmp	r3, #0
 800555c:	dc59      	bgt.n	8005612 <_dtoa_r+0x30a>
 800555e:	f04f 0b01 	mov.w	fp, #1
 8005562:	465b      	mov	r3, fp
 8005564:	f8cd b008 	str.w	fp, [sp, #8]
 8005568:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800556c:	2200      	movs	r2, #0
 800556e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005570:	6042      	str	r2, [r0, #4]
 8005572:	2204      	movs	r2, #4
 8005574:	f102 0614 	add.w	r6, r2, #20
 8005578:	429e      	cmp	r6, r3
 800557a:	6841      	ldr	r1, [r0, #4]
 800557c:	d94f      	bls.n	800561e <_dtoa_r+0x316>
 800557e:	4628      	mov	r0, r5
 8005580:	f000 fcd8 	bl	8005f34 <_Balloc>
 8005584:	9008      	str	r0, [sp, #32]
 8005586:	2800      	cmp	r0, #0
 8005588:	d14d      	bne.n	8005626 <_dtoa_r+0x31e>
 800558a:	4602      	mov	r2, r0
 800558c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005590:	4b1d      	ldr	r3, [pc, #116]	; (8005608 <_dtoa_r+0x300>)
 8005592:	e6cd      	b.n	8005330 <_dtoa_r+0x28>
 8005594:	2301      	movs	r3, #1
 8005596:	e7de      	b.n	8005556 <_dtoa_r+0x24e>
 8005598:	2300      	movs	r3, #0
 800559a:	930b      	str	r3, [sp, #44]	; 0x2c
 800559c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800559e:	eb09 0b03 	add.w	fp, r9, r3
 80055a2:	f10b 0301 	add.w	r3, fp, #1
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	9302      	str	r3, [sp, #8]
 80055aa:	bfb8      	it	lt
 80055ac:	2301      	movlt	r3, #1
 80055ae:	e7dd      	b.n	800556c <_dtoa_r+0x264>
 80055b0:	2301      	movs	r3, #1
 80055b2:	e7f2      	b.n	800559a <_dtoa_r+0x292>
 80055b4:	2401      	movs	r4, #1
 80055b6:	2300      	movs	r3, #0
 80055b8:	940b      	str	r4, [sp, #44]	; 0x2c
 80055ba:	9322      	str	r3, [sp, #136]	; 0x88
 80055bc:	f04f 3bff 	mov.w	fp, #4294967295
 80055c0:	2200      	movs	r2, #0
 80055c2:	2312      	movs	r3, #18
 80055c4:	f8cd b008 	str.w	fp, [sp, #8]
 80055c8:	9223      	str	r2, [sp, #140]	; 0x8c
 80055ca:	e7cf      	b.n	800556c <_dtoa_r+0x264>
 80055cc:	f3af 8000 	nop.w
 80055d0:	636f4361 	.word	0x636f4361
 80055d4:	3fd287a7 	.word	0x3fd287a7
 80055d8:	8b60c8b3 	.word	0x8b60c8b3
 80055dc:	3fc68a28 	.word	0x3fc68a28
 80055e0:	509f79fb 	.word	0x509f79fb
 80055e4:	3fd34413 	.word	0x3fd34413
 80055e8:	08007721 	.word	0x08007721
 80055ec:	08007738 	.word	0x08007738
 80055f0:	7ff00000 	.word	0x7ff00000
 80055f4:	0800771d 	.word	0x0800771d
 80055f8:	08007714 	.word	0x08007714
 80055fc:	080076f1 	.word	0x080076f1
 8005600:	3ff80000 	.word	0x3ff80000
 8005604:	08007830 	.word	0x08007830
 8005608:	08007797 	.word	0x08007797
 800560c:	2301      	movs	r3, #1
 800560e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005610:	e7d4      	b.n	80055bc <_dtoa_r+0x2b4>
 8005612:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005616:	465b      	mov	r3, fp
 8005618:	f8cd b008 	str.w	fp, [sp, #8]
 800561c:	e7a6      	b.n	800556c <_dtoa_r+0x264>
 800561e:	3101      	adds	r1, #1
 8005620:	6041      	str	r1, [r0, #4]
 8005622:	0052      	lsls	r2, r2, #1
 8005624:	e7a6      	b.n	8005574 <_dtoa_r+0x26c>
 8005626:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005628:	9a08      	ldr	r2, [sp, #32]
 800562a:	601a      	str	r2, [r3, #0]
 800562c:	9b02      	ldr	r3, [sp, #8]
 800562e:	2b0e      	cmp	r3, #14
 8005630:	f200 80a8 	bhi.w	8005784 <_dtoa_r+0x47c>
 8005634:	2c00      	cmp	r4, #0
 8005636:	f000 80a5 	beq.w	8005784 <_dtoa_r+0x47c>
 800563a:	f1b9 0f00 	cmp.w	r9, #0
 800563e:	dd34      	ble.n	80056aa <_dtoa_r+0x3a2>
 8005640:	4a9a      	ldr	r2, [pc, #616]	; (80058ac <_dtoa_r+0x5a4>)
 8005642:	f009 030f 	and.w	r3, r9, #15
 8005646:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800564a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800564e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005652:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005656:	ea4f 1429 	mov.w	r4, r9, asr #4
 800565a:	d016      	beq.n	800568a <_dtoa_r+0x382>
 800565c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005660:	4b93      	ldr	r3, [pc, #588]	; (80058b0 <_dtoa_r+0x5a8>)
 8005662:	2703      	movs	r7, #3
 8005664:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005668:	f7fb f86a 	bl	8000740 <__aeabi_ddiv>
 800566c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005670:	f004 040f 	and.w	r4, r4, #15
 8005674:	4e8e      	ldr	r6, [pc, #568]	; (80058b0 <_dtoa_r+0x5a8>)
 8005676:	b954      	cbnz	r4, 800568e <_dtoa_r+0x386>
 8005678:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800567c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005680:	f7fb f85e 	bl	8000740 <__aeabi_ddiv>
 8005684:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005688:	e029      	b.n	80056de <_dtoa_r+0x3d6>
 800568a:	2702      	movs	r7, #2
 800568c:	e7f2      	b.n	8005674 <_dtoa_r+0x36c>
 800568e:	07e1      	lsls	r1, r4, #31
 8005690:	d508      	bpl.n	80056a4 <_dtoa_r+0x39c>
 8005692:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005696:	e9d6 2300 	ldrd	r2, r3, [r6]
 800569a:	f7fa ff27 	bl	80004ec <__aeabi_dmul>
 800569e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80056a2:	3701      	adds	r7, #1
 80056a4:	1064      	asrs	r4, r4, #1
 80056a6:	3608      	adds	r6, #8
 80056a8:	e7e5      	b.n	8005676 <_dtoa_r+0x36e>
 80056aa:	f000 80a5 	beq.w	80057f8 <_dtoa_r+0x4f0>
 80056ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056b2:	f1c9 0400 	rsb	r4, r9, #0
 80056b6:	4b7d      	ldr	r3, [pc, #500]	; (80058ac <_dtoa_r+0x5a4>)
 80056b8:	f004 020f 	and.w	r2, r4, #15
 80056bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c4:	f7fa ff12 	bl	80004ec <__aeabi_dmul>
 80056c8:	2702      	movs	r7, #2
 80056ca:	2300      	movs	r3, #0
 80056cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056d0:	4e77      	ldr	r6, [pc, #476]	; (80058b0 <_dtoa_r+0x5a8>)
 80056d2:	1124      	asrs	r4, r4, #4
 80056d4:	2c00      	cmp	r4, #0
 80056d6:	f040 8084 	bne.w	80057e2 <_dtoa_r+0x4da>
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1d2      	bne.n	8005684 <_dtoa_r+0x37c>
 80056de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 808b 	beq.w	80057fc <_dtoa_r+0x4f4>
 80056e6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80056ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80056ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056f2:	2200      	movs	r2, #0
 80056f4:	4b6f      	ldr	r3, [pc, #444]	; (80058b4 <_dtoa_r+0x5ac>)
 80056f6:	f7fb f96b 	bl	80009d0 <__aeabi_dcmplt>
 80056fa:	2800      	cmp	r0, #0
 80056fc:	d07e      	beq.n	80057fc <_dtoa_r+0x4f4>
 80056fe:	9b02      	ldr	r3, [sp, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d07b      	beq.n	80057fc <_dtoa_r+0x4f4>
 8005704:	f1bb 0f00 	cmp.w	fp, #0
 8005708:	dd38      	ble.n	800577c <_dtoa_r+0x474>
 800570a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800570e:	2200      	movs	r2, #0
 8005710:	4b69      	ldr	r3, [pc, #420]	; (80058b8 <_dtoa_r+0x5b0>)
 8005712:	f7fa feeb 	bl	80004ec <__aeabi_dmul>
 8005716:	465c      	mov	r4, fp
 8005718:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800571c:	f109 38ff 	add.w	r8, r9, #4294967295
 8005720:	3701      	adds	r7, #1
 8005722:	4638      	mov	r0, r7
 8005724:	f7fa fe78 	bl	8000418 <__aeabi_i2d>
 8005728:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800572c:	f7fa fede 	bl	80004ec <__aeabi_dmul>
 8005730:	2200      	movs	r2, #0
 8005732:	4b62      	ldr	r3, [pc, #392]	; (80058bc <_dtoa_r+0x5b4>)
 8005734:	f7fa fd24 	bl	8000180 <__adddf3>
 8005738:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800573c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005740:	9611      	str	r6, [sp, #68]	; 0x44
 8005742:	2c00      	cmp	r4, #0
 8005744:	d15d      	bne.n	8005802 <_dtoa_r+0x4fa>
 8005746:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800574a:	2200      	movs	r2, #0
 800574c:	4b5c      	ldr	r3, [pc, #368]	; (80058c0 <_dtoa_r+0x5b8>)
 800574e:	f7fa fd15 	bl	800017c <__aeabi_dsub>
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800575a:	4633      	mov	r3, r6
 800575c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800575e:	f7fb f955 	bl	8000a0c <__aeabi_dcmpgt>
 8005762:	2800      	cmp	r0, #0
 8005764:	f040 829e 	bne.w	8005ca4 <_dtoa_r+0x99c>
 8005768:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800576c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800576e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005772:	f7fb f92d 	bl	80009d0 <__aeabi_dcmplt>
 8005776:	2800      	cmp	r0, #0
 8005778:	f040 8292 	bne.w	8005ca0 <_dtoa_r+0x998>
 800577c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005780:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005784:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005786:	2b00      	cmp	r3, #0
 8005788:	f2c0 8153 	blt.w	8005a32 <_dtoa_r+0x72a>
 800578c:	f1b9 0f0e 	cmp.w	r9, #14
 8005790:	f300 814f 	bgt.w	8005a32 <_dtoa_r+0x72a>
 8005794:	4b45      	ldr	r3, [pc, #276]	; (80058ac <_dtoa_r+0x5a4>)
 8005796:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800579a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800579e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80057a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f280 80db 	bge.w	8005960 <_dtoa_r+0x658>
 80057aa:	9b02      	ldr	r3, [sp, #8]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f300 80d7 	bgt.w	8005960 <_dtoa_r+0x658>
 80057b2:	f040 8274 	bne.w	8005c9e <_dtoa_r+0x996>
 80057b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057ba:	2200      	movs	r2, #0
 80057bc:	4b40      	ldr	r3, [pc, #256]	; (80058c0 <_dtoa_r+0x5b8>)
 80057be:	f7fa fe95 	bl	80004ec <__aeabi_dmul>
 80057c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057c6:	f7fb f917 	bl	80009f8 <__aeabi_dcmpge>
 80057ca:	9c02      	ldr	r4, [sp, #8]
 80057cc:	4626      	mov	r6, r4
 80057ce:	2800      	cmp	r0, #0
 80057d0:	f040 824a 	bne.w	8005c68 <_dtoa_r+0x960>
 80057d4:	2331      	movs	r3, #49	; 0x31
 80057d6:	9f08      	ldr	r7, [sp, #32]
 80057d8:	f109 0901 	add.w	r9, r9, #1
 80057dc:	f807 3b01 	strb.w	r3, [r7], #1
 80057e0:	e246      	b.n	8005c70 <_dtoa_r+0x968>
 80057e2:	07e2      	lsls	r2, r4, #31
 80057e4:	d505      	bpl.n	80057f2 <_dtoa_r+0x4ea>
 80057e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80057ea:	f7fa fe7f 	bl	80004ec <__aeabi_dmul>
 80057ee:	2301      	movs	r3, #1
 80057f0:	3701      	adds	r7, #1
 80057f2:	1064      	asrs	r4, r4, #1
 80057f4:	3608      	adds	r6, #8
 80057f6:	e76d      	b.n	80056d4 <_dtoa_r+0x3cc>
 80057f8:	2702      	movs	r7, #2
 80057fa:	e770      	b.n	80056de <_dtoa_r+0x3d6>
 80057fc:	46c8      	mov	r8, r9
 80057fe:	9c02      	ldr	r4, [sp, #8]
 8005800:	e78f      	b.n	8005722 <_dtoa_r+0x41a>
 8005802:	9908      	ldr	r1, [sp, #32]
 8005804:	4b29      	ldr	r3, [pc, #164]	; (80058ac <_dtoa_r+0x5a4>)
 8005806:	4421      	add	r1, r4
 8005808:	9112      	str	r1, [sp, #72]	; 0x48
 800580a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800580c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005810:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005814:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005818:	2900      	cmp	r1, #0
 800581a:	d055      	beq.n	80058c8 <_dtoa_r+0x5c0>
 800581c:	2000      	movs	r0, #0
 800581e:	4929      	ldr	r1, [pc, #164]	; (80058c4 <_dtoa_r+0x5bc>)
 8005820:	f7fa ff8e 	bl	8000740 <__aeabi_ddiv>
 8005824:	463b      	mov	r3, r7
 8005826:	4632      	mov	r2, r6
 8005828:	f7fa fca8 	bl	800017c <__aeabi_dsub>
 800582c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005830:	9f08      	ldr	r7, [sp, #32]
 8005832:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005836:	f7fb f909 	bl	8000a4c <__aeabi_d2iz>
 800583a:	4604      	mov	r4, r0
 800583c:	f7fa fdec 	bl	8000418 <__aeabi_i2d>
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005848:	f7fa fc98 	bl	800017c <__aeabi_dsub>
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	3430      	adds	r4, #48	; 0x30
 8005852:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005856:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800585a:	f807 4b01 	strb.w	r4, [r7], #1
 800585e:	f7fb f8b7 	bl	80009d0 <__aeabi_dcmplt>
 8005862:	2800      	cmp	r0, #0
 8005864:	d174      	bne.n	8005950 <_dtoa_r+0x648>
 8005866:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800586a:	2000      	movs	r0, #0
 800586c:	4911      	ldr	r1, [pc, #68]	; (80058b4 <_dtoa_r+0x5ac>)
 800586e:	f7fa fc85 	bl	800017c <__aeabi_dsub>
 8005872:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005876:	f7fb f8ab 	bl	80009d0 <__aeabi_dcmplt>
 800587a:	2800      	cmp	r0, #0
 800587c:	f040 80b6 	bne.w	80059ec <_dtoa_r+0x6e4>
 8005880:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005882:	429f      	cmp	r7, r3
 8005884:	f43f af7a 	beq.w	800577c <_dtoa_r+0x474>
 8005888:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800588c:	2200      	movs	r2, #0
 800588e:	4b0a      	ldr	r3, [pc, #40]	; (80058b8 <_dtoa_r+0x5b0>)
 8005890:	f7fa fe2c 	bl	80004ec <__aeabi_dmul>
 8005894:	2200      	movs	r2, #0
 8005896:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800589a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800589e:	4b06      	ldr	r3, [pc, #24]	; (80058b8 <_dtoa_r+0x5b0>)
 80058a0:	f7fa fe24 	bl	80004ec <__aeabi_dmul>
 80058a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058a8:	e7c3      	b.n	8005832 <_dtoa_r+0x52a>
 80058aa:	bf00      	nop
 80058ac:	08007830 	.word	0x08007830
 80058b0:	08007808 	.word	0x08007808
 80058b4:	3ff00000 	.word	0x3ff00000
 80058b8:	40240000 	.word	0x40240000
 80058bc:	401c0000 	.word	0x401c0000
 80058c0:	40140000 	.word	0x40140000
 80058c4:	3fe00000 	.word	0x3fe00000
 80058c8:	4630      	mov	r0, r6
 80058ca:	4639      	mov	r1, r7
 80058cc:	f7fa fe0e 	bl	80004ec <__aeabi_dmul>
 80058d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80058d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80058d6:	9c08      	ldr	r4, [sp, #32]
 80058d8:	9314      	str	r3, [sp, #80]	; 0x50
 80058da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058de:	f7fb f8b5 	bl	8000a4c <__aeabi_d2iz>
 80058e2:	9015      	str	r0, [sp, #84]	; 0x54
 80058e4:	f7fa fd98 	bl	8000418 <__aeabi_i2d>
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058f0:	f7fa fc44 	bl	800017c <__aeabi_dsub>
 80058f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80058f6:	4606      	mov	r6, r0
 80058f8:	3330      	adds	r3, #48	; 0x30
 80058fa:	f804 3b01 	strb.w	r3, [r4], #1
 80058fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005900:	460f      	mov	r7, r1
 8005902:	429c      	cmp	r4, r3
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	d124      	bne.n	8005954 <_dtoa_r+0x64c>
 800590a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800590e:	4bb3      	ldr	r3, [pc, #716]	; (8005bdc <_dtoa_r+0x8d4>)
 8005910:	f7fa fc36 	bl	8000180 <__adddf3>
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	4630      	mov	r0, r6
 800591a:	4639      	mov	r1, r7
 800591c:	f7fb f876 	bl	8000a0c <__aeabi_dcmpgt>
 8005920:	2800      	cmp	r0, #0
 8005922:	d162      	bne.n	80059ea <_dtoa_r+0x6e2>
 8005924:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005928:	2000      	movs	r0, #0
 800592a:	49ac      	ldr	r1, [pc, #688]	; (8005bdc <_dtoa_r+0x8d4>)
 800592c:	f7fa fc26 	bl	800017c <__aeabi_dsub>
 8005930:	4602      	mov	r2, r0
 8005932:	460b      	mov	r3, r1
 8005934:	4630      	mov	r0, r6
 8005936:	4639      	mov	r1, r7
 8005938:	f7fb f84a 	bl	80009d0 <__aeabi_dcmplt>
 800593c:	2800      	cmp	r0, #0
 800593e:	f43f af1d 	beq.w	800577c <_dtoa_r+0x474>
 8005942:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005944:	1e7b      	subs	r3, r7, #1
 8005946:	9314      	str	r3, [sp, #80]	; 0x50
 8005948:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800594c:	2b30      	cmp	r3, #48	; 0x30
 800594e:	d0f8      	beq.n	8005942 <_dtoa_r+0x63a>
 8005950:	46c1      	mov	r9, r8
 8005952:	e03a      	b.n	80059ca <_dtoa_r+0x6c2>
 8005954:	4ba2      	ldr	r3, [pc, #648]	; (8005be0 <_dtoa_r+0x8d8>)
 8005956:	f7fa fdc9 	bl	80004ec <__aeabi_dmul>
 800595a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800595e:	e7bc      	b.n	80058da <_dtoa_r+0x5d2>
 8005960:	9f08      	ldr	r7, [sp, #32]
 8005962:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005966:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800596a:	f7fa fee9 	bl	8000740 <__aeabi_ddiv>
 800596e:	f7fb f86d 	bl	8000a4c <__aeabi_d2iz>
 8005972:	4604      	mov	r4, r0
 8005974:	f7fa fd50 	bl	8000418 <__aeabi_i2d>
 8005978:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800597c:	f7fa fdb6 	bl	80004ec <__aeabi_dmul>
 8005980:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005984:	460b      	mov	r3, r1
 8005986:	4602      	mov	r2, r0
 8005988:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800598c:	f7fa fbf6 	bl	800017c <__aeabi_dsub>
 8005990:	f807 6b01 	strb.w	r6, [r7], #1
 8005994:	9e08      	ldr	r6, [sp, #32]
 8005996:	9b02      	ldr	r3, [sp, #8]
 8005998:	1bbe      	subs	r6, r7, r6
 800599a:	42b3      	cmp	r3, r6
 800599c:	d13a      	bne.n	8005a14 <_dtoa_r+0x70c>
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	f7fa fbed 	bl	8000180 <__adddf3>
 80059a6:	4602      	mov	r2, r0
 80059a8:	460b      	mov	r3, r1
 80059aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80059ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059b2:	f7fb f82b 	bl	8000a0c <__aeabi_dcmpgt>
 80059b6:	bb58      	cbnz	r0, 8005a10 <_dtoa_r+0x708>
 80059b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059c0:	f7fa fffc 	bl	80009bc <__aeabi_dcmpeq>
 80059c4:	b108      	cbz	r0, 80059ca <_dtoa_r+0x6c2>
 80059c6:	07e1      	lsls	r1, r4, #31
 80059c8:	d422      	bmi.n	8005a10 <_dtoa_r+0x708>
 80059ca:	4628      	mov	r0, r5
 80059cc:	4651      	mov	r1, sl
 80059ce:	f000 faf1 	bl	8005fb4 <_Bfree>
 80059d2:	2300      	movs	r3, #0
 80059d4:	703b      	strb	r3, [r7, #0]
 80059d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80059d8:	f109 0001 	add.w	r0, r9, #1
 80059dc:	6018      	str	r0, [r3, #0]
 80059de:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f43f acdf 	beq.w	80053a4 <_dtoa_r+0x9c>
 80059e6:	601f      	str	r7, [r3, #0]
 80059e8:	e4dc      	b.n	80053a4 <_dtoa_r+0x9c>
 80059ea:	4627      	mov	r7, r4
 80059ec:	463b      	mov	r3, r7
 80059ee:	461f      	mov	r7, r3
 80059f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059f4:	2a39      	cmp	r2, #57	; 0x39
 80059f6:	d107      	bne.n	8005a08 <_dtoa_r+0x700>
 80059f8:	9a08      	ldr	r2, [sp, #32]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d1f7      	bne.n	80059ee <_dtoa_r+0x6e6>
 80059fe:	2230      	movs	r2, #48	; 0x30
 8005a00:	9908      	ldr	r1, [sp, #32]
 8005a02:	f108 0801 	add.w	r8, r8, #1
 8005a06:	700a      	strb	r2, [r1, #0]
 8005a08:	781a      	ldrb	r2, [r3, #0]
 8005a0a:	3201      	adds	r2, #1
 8005a0c:	701a      	strb	r2, [r3, #0]
 8005a0e:	e79f      	b.n	8005950 <_dtoa_r+0x648>
 8005a10:	46c8      	mov	r8, r9
 8005a12:	e7eb      	b.n	80059ec <_dtoa_r+0x6e4>
 8005a14:	2200      	movs	r2, #0
 8005a16:	4b72      	ldr	r3, [pc, #456]	; (8005be0 <_dtoa_r+0x8d8>)
 8005a18:	f7fa fd68 	bl	80004ec <__aeabi_dmul>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a24:	2200      	movs	r2, #0
 8005a26:	2300      	movs	r3, #0
 8005a28:	f7fa ffc8 	bl	80009bc <__aeabi_dcmpeq>
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	d098      	beq.n	8005962 <_dtoa_r+0x65a>
 8005a30:	e7cb      	b.n	80059ca <_dtoa_r+0x6c2>
 8005a32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a34:	2a00      	cmp	r2, #0
 8005a36:	f000 80cd 	beq.w	8005bd4 <_dtoa_r+0x8cc>
 8005a3a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005a3c:	2a01      	cmp	r2, #1
 8005a3e:	f300 80af 	bgt.w	8005ba0 <_dtoa_r+0x898>
 8005a42:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005a44:	2a00      	cmp	r2, #0
 8005a46:	f000 80a7 	beq.w	8005b98 <_dtoa_r+0x890>
 8005a4a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a4e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005a50:	9f06      	ldr	r7, [sp, #24]
 8005a52:	9a06      	ldr	r2, [sp, #24]
 8005a54:	2101      	movs	r1, #1
 8005a56:	441a      	add	r2, r3
 8005a58:	9206      	str	r2, [sp, #24]
 8005a5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	441a      	add	r2, r3
 8005a60:	9209      	str	r2, [sp, #36]	; 0x24
 8005a62:	f000 fb61 	bl	8006128 <__i2b>
 8005a66:	4606      	mov	r6, r0
 8005a68:	2f00      	cmp	r7, #0
 8005a6a:	dd0c      	ble.n	8005a86 <_dtoa_r+0x77e>
 8005a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	dd09      	ble.n	8005a86 <_dtoa_r+0x77e>
 8005a72:	42bb      	cmp	r3, r7
 8005a74:	bfa8      	it	ge
 8005a76:	463b      	movge	r3, r7
 8005a78:	9a06      	ldr	r2, [sp, #24]
 8005a7a:	1aff      	subs	r7, r7, r3
 8005a7c:	1ad2      	subs	r2, r2, r3
 8005a7e:	9206      	str	r2, [sp, #24]
 8005a80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	9309      	str	r3, [sp, #36]	; 0x24
 8005a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a88:	b1f3      	cbz	r3, 8005ac8 <_dtoa_r+0x7c0>
 8005a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 80a9 	beq.w	8005be4 <_dtoa_r+0x8dc>
 8005a92:	2c00      	cmp	r4, #0
 8005a94:	dd10      	ble.n	8005ab8 <_dtoa_r+0x7b0>
 8005a96:	4631      	mov	r1, r6
 8005a98:	4622      	mov	r2, r4
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	f000 fbfe 	bl	800629c <__pow5mult>
 8005aa0:	4652      	mov	r2, sl
 8005aa2:	4601      	mov	r1, r0
 8005aa4:	4606      	mov	r6, r0
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	f000 fb54 	bl	8006154 <__multiply>
 8005aac:	4680      	mov	r8, r0
 8005aae:	4651      	mov	r1, sl
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	f000 fa7f 	bl	8005fb4 <_Bfree>
 8005ab6:	46c2      	mov	sl, r8
 8005ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aba:	1b1a      	subs	r2, r3, r4
 8005abc:	d004      	beq.n	8005ac8 <_dtoa_r+0x7c0>
 8005abe:	4651      	mov	r1, sl
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	f000 fbeb 	bl	800629c <__pow5mult>
 8005ac6:	4682      	mov	sl, r0
 8005ac8:	2101      	movs	r1, #1
 8005aca:	4628      	mov	r0, r5
 8005acc:	f000 fb2c 	bl	8006128 <__i2b>
 8005ad0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f340 8087 	ble.w	8005be8 <_dtoa_r+0x8e0>
 8005ada:	461a      	mov	r2, r3
 8005adc:	4601      	mov	r1, r0
 8005ade:	4628      	mov	r0, r5
 8005ae0:	f000 fbdc 	bl	800629c <__pow5mult>
 8005ae4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ae6:	4604      	mov	r4, r0
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	f340 8080 	ble.w	8005bee <_dtoa_r+0x8e6>
 8005aee:	f04f 0800 	mov.w	r8, #0
 8005af2:	6923      	ldr	r3, [r4, #16]
 8005af4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005af8:	6918      	ldr	r0, [r3, #16]
 8005afa:	f000 fac7 	bl	800608c <__hi0bits>
 8005afe:	f1c0 0020 	rsb	r0, r0, #32
 8005b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b04:	4418      	add	r0, r3
 8005b06:	f010 001f 	ands.w	r0, r0, #31
 8005b0a:	f000 8092 	beq.w	8005c32 <_dtoa_r+0x92a>
 8005b0e:	f1c0 0320 	rsb	r3, r0, #32
 8005b12:	2b04      	cmp	r3, #4
 8005b14:	f340 808a 	ble.w	8005c2c <_dtoa_r+0x924>
 8005b18:	f1c0 001c 	rsb	r0, r0, #28
 8005b1c:	9b06      	ldr	r3, [sp, #24]
 8005b1e:	4407      	add	r7, r0
 8005b20:	4403      	add	r3, r0
 8005b22:	9306      	str	r3, [sp, #24]
 8005b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b26:	4403      	add	r3, r0
 8005b28:	9309      	str	r3, [sp, #36]	; 0x24
 8005b2a:	9b06      	ldr	r3, [sp, #24]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	dd05      	ble.n	8005b3c <_dtoa_r+0x834>
 8005b30:	4651      	mov	r1, sl
 8005b32:	461a      	mov	r2, r3
 8005b34:	4628      	mov	r0, r5
 8005b36:	f000 fc0b 	bl	8006350 <__lshift>
 8005b3a:	4682      	mov	sl, r0
 8005b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	dd05      	ble.n	8005b4e <_dtoa_r+0x846>
 8005b42:	4621      	mov	r1, r4
 8005b44:	461a      	mov	r2, r3
 8005b46:	4628      	mov	r0, r5
 8005b48:	f000 fc02 	bl	8006350 <__lshift>
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d070      	beq.n	8005c36 <_dtoa_r+0x92e>
 8005b54:	4621      	mov	r1, r4
 8005b56:	4650      	mov	r0, sl
 8005b58:	f000 fc66 	bl	8006428 <__mcmp>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	da6a      	bge.n	8005c36 <_dtoa_r+0x92e>
 8005b60:	2300      	movs	r3, #0
 8005b62:	4651      	mov	r1, sl
 8005b64:	220a      	movs	r2, #10
 8005b66:	4628      	mov	r0, r5
 8005b68:	f000 fa46 	bl	8005ff8 <__multadd>
 8005b6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b6e:	4682      	mov	sl, r0
 8005b70:	f109 39ff 	add.w	r9, r9, #4294967295
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 8193 	beq.w	8005ea0 <_dtoa_r+0xb98>
 8005b7a:	4631      	mov	r1, r6
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	220a      	movs	r2, #10
 8005b80:	4628      	mov	r0, r5
 8005b82:	f000 fa39 	bl	8005ff8 <__multadd>
 8005b86:	f1bb 0f00 	cmp.w	fp, #0
 8005b8a:	4606      	mov	r6, r0
 8005b8c:	f300 8093 	bgt.w	8005cb6 <_dtoa_r+0x9ae>
 8005b90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	dc57      	bgt.n	8005c46 <_dtoa_r+0x93e>
 8005b96:	e08e      	b.n	8005cb6 <_dtoa_r+0x9ae>
 8005b98:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005b9a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b9e:	e756      	b.n	8005a4e <_dtoa_r+0x746>
 8005ba0:	9b02      	ldr	r3, [sp, #8]
 8005ba2:	1e5c      	subs	r4, r3, #1
 8005ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ba6:	42a3      	cmp	r3, r4
 8005ba8:	bfb7      	itett	lt
 8005baa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005bac:	1b1c      	subge	r4, r3, r4
 8005bae:	1ae2      	sublt	r2, r4, r3
 8005bb0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005bb2:	bfbe      	ittt	lt
 8005bb4:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005bb6:	189b      	addlt	r3, r3, r2
 8005bb8:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005bba:	9b02      	ldr	r3, [sp, #8]
 8005bbc:	bfb8      	it	lt
 8005bbe:	2400      	movlt	r4, #0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	bfbb      	ittet	lt
 8005bc4:	9b06      	ldrlt	r3, [sp, #24]
 8005bc6:	9a02      	ldrlt	r2, [sp, #8]
 8005bc8:	9f06      	ldrge	r7, [sp, #24]
 8005bca:	1a9f      	sublt	r7, r3, r2
 8005bcc:	bfac      	ite	ge
 8005bce:	9b02      	ldrge	r3, [sp, #8]
 8005bd0:	2300      	movlt	r3, #0
 8005bd2:	e73e      	b.n	8005a52 <_dtoa_r+0x74a>
 8005bd4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005bd6:	9f06      	ldr	r7, [sp, #24]
 8005bd8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005bda:	e745      	b.n	8005a68 <_dtoa_r+0x760>
 8005bdc:	3fe00000 	.word	0x3fe00000
 8005be0:	40240000 	.word	0x40240000
 8005be4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005be6:	e76a      	b.n	8005abe <_dtoa_r+0x7b6>
 8005be8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	dc19      	bgt.n	8005c22 <_dtoa_r+0x91a>
 8005bee:	9b04      	ldr	r3, [sp, #16]
 8005bf0:	b9bb      	cbnz	r3, 8005c22 <_dtoa_r+0x91a>
 8005bf2:	9b05      	ldr	r3, [sp, #20]
 8005bf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bf8:	b99b      	cbnz	r3, 8005c22 <_dtoa_r+0x91a>
 8005bfa:	9b05      	ldr	r3, [sp, #20]
 8005bfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c00:	0d1b      	lsrs	r3, r3, #20
 8005c02:	051b      	lsls	r3, r3, #20
 8005c04:	b183      	cbz	r3, 8005c28 <_dtoa_r+0x920>
 8005c06:	f04f 0801 	mov.w	r8, #1
 8005c0a:	9b06      	ldr	r3, [sp, #24]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	9306      	str	r3, [sp, #24]
 8005c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c12:	3301      	adds	r3, #1
 8005c14:	9309      	str	r3, [sp, #36]	; 0x24
 8005c16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f47f af6a 	bne.w	8005af2 <_dtoa_r+0x7ea>
 8005c1e:	2001      	movs	r0, #1
 8005c20:	e76f      	b.n	8005b02 <_dtoa_r+0x7fa>
 8005c22:	f04f 0800 	mov.w	r8, #0
 8005c26:	e7f6      	b.n	8005c16 <_dtoa_r+0x90e>
 8005c28:	4698      	mov	r8, r3
 8005c2a:	e7f4      	b.n	8005c16 <_dtoa_r+0x90e>
 8005c2c:	f43f af7d 	beq.w	8005b2a <_dtoa_r+0x822>
 8005c30:	4618      	mov	r0, r3
 8005c32:	301c      	adds	r0, #28
 8005c34:	e772      	b.n	8005b1c <_dtoa_r+0x814>
 8005c36:	9b02      	ldr	r3, [sp, #8]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	dc36      	bgt.n	8005caa <_dtoa_r+0x9a2>
 8005c3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	dd33      	ble.n	8005caa <_dtoa_r+0x9a2>
 8005c42:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005c46:	f1bb 0f00 	cmp.w	fp, #0
 8005c4a:	d10d      	bne.n	8005c68 <_dtoa_r+0x960>
 8005c4c:	4621      	mov	r1, r4
 8005c4e:	465b      	mov	r3, fp
 8005c50:	2205      	movs	r2, #5
 8005c52:	4628      	mov	r0, r5
 8005c54:	f000 f9d0 	bl	8005ff8 <__multadd>
 8005c58:	4601      	mov	r1, r0
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	4650      	mov	r0, sl
 8005c5e:	f000 fbe3 	bl	8006428 <__mcmp>
 8005c62:	2800      	cmp	r0, #0
 8005c64:	f73f adb6 	bgt.w	80057d4 <_dtoa_r+0x4cc>
 8005c68:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c6a:	9f08      	ldr	r7, [sp, #32]
 8005c6c:	ea6f 0903 	mvn.w	r9, r3
 8005c70:	f04f 0800 	mov.w	r8, #0
 8005c74:	4621      	mov	r1, r4
 8005c76:	4628      	mov	r0, r5
 8005c78:	f000 f99c 	bl	8005fb4 <_Bfree>
 8005c7c:	2e00      	cmp	r6, #0
 8005c7e:	f43f aea4 	beq.w	80059ca <_dtoa_r+0x6c2>
 8005c82:	f1b8 0f00 	cmp.w	r8, #0
 8005c86:	d005      	beq.n	8005c94 <_dtoa_r+0x98c>
 8005c88:	45b0      	cmp	r8, r6
 8005c8a:	d003      	beq.n	8005c94 <_dtoa_r+0x98c>
 8005c8c:	4641      	mov	r1, r8
 8005c8e:	4628      	mov	r0, r5
 8005c90:	f000 f990 	bl	8005fb4 <_Bfree>
 8005c94:	4631      	mov	r1, r6
 8005c96:	4628      	mov	r0, r5
 8005c98:	f000 f98c 	bl	8005fb4 <_Bfree>
 8005c9c:	e695      	b.n	80059ca <_dtoa_r+0x6c2>
 8005c9e:	2400      	movs	r4, #0
 8005ca0:	4626      	mov	r6, r4
 8005ca2:	e7e1      	b.n	8005c68 <_dtoa_r+0x960>
 8005ca4:	46c1      	mov	r9, r8
 8005ca6:	4626      	mov	r6, r4
 8005ca8:	e594      	b.n	80057d4 <_dtoa_r+0x4cc>
 8005caa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cac:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 80fc 	beq.w	8005eae <_dtoa_r+0xba6>
 8005cb6:	2f00      	cmp	r7, #0
 8005cb8:	dd05      	ble.n	8005cc6 <_dtoa_r+0x9be>
 8005cba:	4631      	mov	r1, r6
 8005cbc:	463a      	mov	r2, r7
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	f000 fb46 	bl	8006350 <__lshift>
 8005cc4:	4606      	mov	r6, r0
 8005cc6:	f1b8 0f00 	cmp.w	r8, #0
 8005cca:	d05c      	beq.n	8005d86 <_dtoa_r+0xa7e>
 8005ccc:	4628      	mov	r0, r5
 8005cce:	6871      	ldr	r1, [r6, #4]
 8005cd0:	f000 f930 	bl	8005f34 <_Balloc>
 8005cd4:	4607      	mov	r7, r0
 8005cd6:	b928      	cbnz	r0, 8005ce4 <_dtoa_r+0x9dc>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005cde:	4b7e      	ldr	r3, [pc, #504]	; (8005ed8 <_dtoa_r+0xbd0>)
 8005ce0:	f7ff bb26 	b.w	8005330 <_dtoa_r+0x28>
 8005ce4:	6932      	ldr	r2, [r6, #16]
 8005ce6:	f106 010c 	add.w	r1, r6, #12
 8005cea:	3202      	adds	r2, #2
 8005cec:	0092      	lsls	r2, r2, #2
 8005cee:	300c      	adds	r0, #12
 8005cf0:	f000 f912 	bl	8005f18 <memcpy>
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	4639      	mov	r1, r7
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	f000 fb29 	bl	8006350 <__lshift>
 8005cfe:	46b0      	mov	r8, r6
 8005d00:	4606      	mov	r6, r0
 8005d02:	9b08      	ldr	r3, [sp, #32]
 8005d04:	3301      	adds	r3, #1
 8005d06:	9302      	str	r3, [sp, #8]
 8005d08:	9b08      	ldr	r3, [sp, #32]
 8005d0a:	445b      	add	r3, fp
 8005d0c:	930a      	str	r3, [sp, #40]	; 0x28
 8005d0e:	9b04      	ldr	r3, [sp, #16]
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	9309      	str	r3, [sp, #36]	; 0x24
 8005d16:	9b02      	ldr	r3, [sp, #8]
 8005d18:	4621      	mov	r1, r4
 8005d1a:	4650      	mov	r0, sl
 8005d1c:	f103 3bff 	add.w	fp, r3, #4294967295
 8005d20:	f7ff fa64 	bl	80051ec <quorem>
 8005d24:	4603      	mov	r3, r0
 8005d26:	4641      	mov	r1, r8
 8005d28:	3330      	adds	r3, #48	; 0x30
 8005d2a:	9004      	str	r0, [sp, #16]
 8005d2c:	4650      	mov	r0, sl
 8005d2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d30:	f000 fb7a 	bl	8006428 <__mcmp>
 8005d34:	4632      	mov	r2, r6
 8005d36:	9006      	str	r0, [sp, #24]
 8005d38:	4621      	mov	r1, r4
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	f000 fb90 	bl	8006460 <__mdiff>
 8005d40:	68c2      	ldr	r2, [r0, #12]
 8005d42:	4607      	mov	r7, r0
 8005d44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d46:	bb02      	cbnz	r2, 8005d8a <_dtoa_r+0xa82>
 8005d48:	4601      	mov	r1, r0
 8005d4a:	4650      	mov	r0, sl
 8005d4c:	f000 fb6c 	bl	8006428 <__mcmp>
 8005d50:	4602      	mov	r2, r0
 8005d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d54:	4639      	mov	r1, r7
 8005d56:	4628      	mov	r0, r5
 8005d58:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005d5c:	f000 f92a 	bl	8005fb4 <_Bfree>
 8005d60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d64:	9f02      	ldr	r7, [sp, #8]
 8005d66:	ea43 0102 	orr.w	r1, r3, r2
 8005d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d6c:	430b      	orrs	r3, r1
 8005d6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d70:	d10d      	bne.n	8005d8e <_dtoa_r+0xa86>
 8005d72:	2b39      	cmp	r3, #57	; 0x39
 8005d74:	d027      	beq.n	8005dc6 <_dtoa_r+0xabe>
 8005d76:	9a06      	ldr	r2, [sp, #24]
 8005d78:	2a00      	cmp	r2, #0
 8005d7a:	dd01      	ble.n	8005d80 <_dtoa_r+0xa78>
 8005d7c:	9b04      	ldr	r3, [sp, #16]
 8005d7e:	3331      	adds	r3, #49	; 0x31
 8005d80:	f88b 3000 	strb.w	r3, [fp]
 8005d84:	e776      	b.n	8005c74 <_dtoa_r+0x96c>
 8005d86:	4630      	mov	r0, r6
 8005d88:	e7b9      	b.n	8005cfe <_dtoa_r+0x9f6>
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	e7e2      	b.n	8005d54 <_dtoa_r+0xa4c>
 8005d8e:	9906      	ldr	r1, [sp, #24]
 8005d90:	2900      	cmp	r1, #0
 8005d92:	db04      	blt.n	8005d9e <_dtoa_r+0xa96>
 8005d94:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005d96:	4301      	orrs	r1, r0
 8005d98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d9a:	4301      	orrs	r1, r0
 8005d9c:	d120      	bne.n	8005de0 <_dtoa_r+0xad8>
 8005d9e:	2a00      	cmp	r2, #0
 8005da0:	ddee      	ble.n	8005d80 <_dtoa_r+0xa78>
 8005da2:	4651      	mov	r1, sl
 8005da4:	2201      	movs	r2, #1
 8005da6:	4628      	mov	r0, r5
 8005da8:	9302      	str	r3, [sp, #8]
 8005daa:	f000 fad1 	bl	8006350 <__lshift>
 8005dae:	4621      	mov	r1, r4
 8005db0:	4682      	mov	sl, r0
 8005db2:	f000 fb39 	bl	8006428 <__mcmp>
 8005db6:	2800      	cmp	r0, #0
 8005db8:	9b02      	ldr	r3, [sp, #8]
 8005dba:	dc02      	bgt.n	8005dc2 <_dtoa_r+0xaba>
 8005dbc:	d1e0      	bne.n	8005d80 <_dtoa_r+0xa78>
 8005dbe:	07da      	lsls	r2, r3, #31
 8005dc0:	d5de      	bpl.n	8005d80 <_dtoa_r+0xa78>
 8005dc2:	2b39      	cmp	r3, #57	; 0x39
 8005dc4:	d1da      	bne.n	8005d7c <_dtoa_r+0xa74>
 8005dc6:	2339      	movs	r3, #57	; 0x39
 8005dc8:	f88b 3000 	strb.w	r3, [fp]
 8005dcc:	463b      	mov	r3, r7
 8005dce:	461f      	mov	r7, r3
 8005dd0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	2a39      	cmp	r2, #57	; 0x39
 8005dd8:	d050      	beq.n	8005e7c <_dtoa_r+0xb74>
 8005dda:	3201      	adds	r2, #1
 8005ddc:	701a      	strb	r2, [r3, #0]
 8005dde:	e749      	b.n	8005c74 <_dtoa_r+0x96c>
 8005de0:	2a00      	cmp	r2, #0
 8005de2:	dd03      	ble.n	8005dec <_dtoa_r+0xae4>
 8005de4:	2b39      	cmp	r3, #57	; 0x39
 8005de6:	d0ee      	beq.n	8005dc6 <_dtoa_r+0xabe>
 8005de8:	3301      	adds	r3, #1
 8005dea:	e7c9      	b.n	8005d80 <_dtoa_r+0xa78>
 8005dec:	9a02      	ldr	r2, [sp, #8]
 8005dee:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005df0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005df4:	428a      	cmp	r2, r1
 8005df6:	d02a      	beq.n	8005e4e <_dtoa_r+0xb46>
 8005df8:	4651      	mov	r1, sl
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	220a      	movs	r2, #10
 8005dfe:	4628      	mov	r0, r5
 8005e00:	f000 f8fa 	bl	8005ff8 <__multadd>
 8005e04:	45b0      	cmp	r8, r6
 8005e06:	4682      	mov	sl, r0
 8005e08:	f04f 0300 	mov.w	r3, #0
 8005e0c:	f04f 020a 	mov.w	r2, #10
 8005e10:	4641      	mov	r1, r8
 8005e12:	4628      	mov	r0, r5
 8005e14:	d107      	bne.n	8005e26 <_dtoa_r+0xb1e>
 8005e16:	f000 f8ef 	bl	8005ff8 <__multadd>
 8005e1a:	4680      	mov	r8, r0
 8005e1c:	4606      	mov	r6, r0
 8005e1e:	9b02      	ldr	r3, [sp, #8]
 8005e20:	3301      	adds	r3, #1
 8005e22:	9302      	str	r3, [sp, #8]
 8005e24:	e777      	b.n	8005d16 <_dtoa_r+0xa0e>
 8005e26:	f000 f8e7 	bl	8005ff8 <__multadd>
 8005e2a:	4631      	mov	r1, r6
 8005e2c:	4680      	mov	r8, r0
 8005e2e:	2300      	movs	r3, #0
 8005e30:	220a      	movs	r2, #10
 8005e32:	4628      	mov	r0, r5
 8005e34:	f000 f8e0 	bl	8005ff8 <__multadd>
 8005e38:	4606      	mov	r6, r0
 8005e3a:	e7f0      	b.n	8005e1e <_dtoa_r+0xb16>
 8005e3c:	f1bb 0f00 	cmp.w	fp, #0
 8005e40:	bfcc      	ite	gt
 8005e42:	465f      	movgt	r7, fp
 8005e44:	2701      	movle	r7, #1
 8005e46:	f04f 0800 	mov.w	r8, #0
 8005e4a:	9a08      	ldr	r2, [sp, #32]
 8005e4c:	4417      	add	r7, r2
 8005e4e:	4651      	mov	r1, sl
 8005e50:	2201      	movs	r2, #1
 8005e52:	4628      	mov	r0, r5
 8005e54:	9302      	str	r3, [sp, #8]
 8005e56:	f000 fa7b 	bl	8006350 <__lshift>
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	4682      	mov	sl, r0
 8005e5e:	f000 fae3 	bl	8006428 <__mcmp>
 8005e62:	2800      	cmp	r0, #0
 8005e64:	dcb2      	bgt.n	8005dcc <_dtoa_r+0xac4>
 8005e66:	d102      	bne.n	8005e6e <_dtoa_r+0xb66>
 8005e68:	9b02      	ldr	r3, [sp, #8]
 8005e6a:	07db      	lsls	r3, r3, #31
 8005e6c:	d4ae      	bmi.n	8005dcc <_dtoa_r+0xac4>
 8005e6e:	463b      	mov	r3, r7
 8005e70:	461f      	mov	r7, r3
 8005e72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e76:	2a30      	cmp	r2, #48	; 0x30
 8005e78:	d0fa      	beq.n	8005e70 <_dtoa_r+0xb68>
 8005e7a:	e6fb      	b.n	8005c74 <_dtoa_r+0x96c>
 8005e7c:	9a08      	ldr	r2, [sp, #32]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d1a5      	bne.n	8005dce <_dtoa_r+0xac6>
 8005e82:	2331      	movs	r3, #49	; 0x31
 8005e84:	f109 0901 	add.w	r9, r9, #1
 8005e88:	7013      	strb	r3, [r2, #0]
 8005e8a:	e6f3      	b.n	8005c74 <_dtoa_r+0x96c>
 8005e8c:	4b13      	ldr	r3, [pc, #76]	; (8005edc <_dtoa_r+0xbd4>)
 8005e8e:	f7ff baa7 	b.w	80053e0 <_dtoa_r+0xd8>
 8005e92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f47f aa80 	bne.w	800539a <_dtoa_r+0x92>
 8005e9a:	4b11      	ldr	r3, [pc, #68]	; (8005ee0 <_dtoa_r+0xbd8>)
 8005e9c:	f7ff baa0 	b.w	80053e0 <_dtoa_r+0xd8>
 8005ea0:	f1bb 0f00 	cmp.w	fp, #0
 8005ea4:	dc03      	bgt.n	8005eae <_dtoa_r+0xba6>
 8005ea6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	f73f aecc 	bgt.w	8005c46 <_dtoa_r+0x93e>
 8005eae:	9f08      	ldr	r7, [sp, #32]
 8005eb0:	4621      	mov	r1, r4
 8005eb2:	4650      	mov	r0, sl
 8005eb4:	f7ff f99a 	bl	80051ec <quorem>
 8005eb8:	9a08      	ldr	r2, [sp, #32]
 8005eba:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005ebe:	f807 3b01 	strb.w	r3, [r7], #1
 8005ec2:	1aba      	subs	r2, r7, r2
 8005ec4:	4593      	cmp	fp, r2
 8005ec6:	ddb9      	ble.n	8005e3c <_dtoa_r+0xb34>
 8005ec8:	4651      	mov	r1, sl
 8005eca:	2300      	movs	r3, #0
 8005ecc:	220a      	movs	r2, #10
 8005ece:	4628      	mov	r0, r5
 8005ed0:	f000 f892 	bl	8005ff8 <__multadd>
 8005ed4:	4682      	mov	sl, r0
 8005ed6:	e7eb      	b.n	8005eb0 <_dtoa_r+0xba8>
 8005ed8:	08007797 	.word	0x08007797
 8005edc:	080076f0 	.word	0x080076f0
 8005ee0:	08007714 	.word	0x08007714

08005ee4 <_localeconv_r>:
 8005ee4:	4800      	ldr	r0, [pc, #0]	; (8005ee8 <_localeconv_r+0x4>)
 8005ee6:	4770      	bx	lr
 8005ee8:	20000164 	.word	0x20000164

08005eec <malloc>:
 8005eec:	4b02      	ldr	r3, [pc, #8]	; (8005ef8 <malloc+0xc>)
 8005eee:	4601      	mov	r1, r0
 8005ef0:	6818      	ldr	r0, [r3, #0]
 8005ef2:	f000 bbfb 	b.w	80066ec <_malloc_r>
 8005ef6:	bf00      	nop
 8005ef8:	20000010 	.word	0x20000010

08005efc <memchr>:
 8005efc:	4603      	mov	r3, r0
 8005efe:	b510      	push	{r4, lr}
 8005f00:	b2c9      	uxtb	r1, r1
 8005f02:	4402      	add	r2, r0
 8005f04:	4293      	cmp	r3, r2
 8005f06:	4618      	mov	r0, r3
 8005f08:	d101      	bne.n	8005f0e <memchr+0x12>
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	e003      	b.n	8005f16 <memchr+0x1a>
 8005f0e:	7804      	ldrb	r4, [r0, #0]
 8005f10:	3301      	adds	r3, #1
 8005f12:	428c      	cmp	r4, r1
 8005f14:	d1f6      	bne.n	8005f04 <memchr+0x8>
 8005f16:	bd10      	pop	{r4, pc}

08005f18 <memcpy>:
 8005f18:	440a      	add	r2, r1
 8005f1a:	4291      	cmp	r1, r2
 8005f1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f20:	d100      	bne.n	8005f24 <memcpy+0xc>
 8005f22:	4770      	bx	lr
 8005f24:	b510      	push	{r4, lr}
 8005f26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f2a:	4291      	cmp	r1, r2
 8005f2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f30:	d1f9      	bne.n	8005f26 <memcpy+0xe>
 8005f32:	bd10      	pop	{r4, pc}

08005f34 <_Balloc>:
 8005f34:	b570      	push	{r4, r5, r6, lr}
 8005f36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005f38:	4604      	mov	r4, r0
 8005f3a:	460d      	mov	r5, r1
 8005f3c:	b976      	cbnz	r6, 8005f5c <_Balloc+0x28>
 8005f3e:	2010      	movs	r0, #16
 8005f40:	f7ff ffd4 	bl	8005eec <malloc>
 8005f44:	4602      	mov	r2, r0
 8005f46:	6260      	str	r0, [r4, #36]	; 0x24
 8005f48:	b920      	cbnz	r0, 8005f54 <_Balloc+0x20>
 8005f4a:	2166      	movs	r1, #102	; 0x66
 8005f4c:	4b17      	ldr	r3, [pc, #92]	; (8005fac <_Balloc+0x78>)
 8005f4e:	4818      	ldr	r0, [pc, #96]	; (8005fb0 <_Balloc+0x7c>)
 8005f50:	f000 fd92 	bl	8006a78 <__assert_func>
 8005f54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f58:	6006      	str	r6, [r0, #0]
 8005f5a:	60c6      	str	r6, [r0, #12]
 8005f5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005f5e:	68f3      	ldr	r3, [r6, #12]
 8005f60:	b183      	cbz	r3, 8005f84 <_Balloc+0x50>
 8005f62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f6a:	b9b8      	cbnz	r0, 8005f9c <_Balloc+0x68>
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	fa01 f605 	lsl.w	r6, r1, r5
 8005f72:	1d72      	adds	r2, r6, #5
 8005f74:	4620      	mov	r0, r4
 8005f76:	0092      	lsls	r2, r2, #2
 8005f78:	f000 fb5e 	bl	8006638 <_calloc_r>
 8005f7c:	b160      	cbz	r0, 8005f98 <_Balloc+0x64>
 8005f7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005f82:	e00e      	b.n	8005fa2 <_Balloc+0x6e>
 8005f84:	2221      	movs	r2, #33	; 0x21
 8005f86:	2104      	movs	r1, #4
 8005f88:	4620      	mov	r0, r4
 8005f8a:	f000 fb55 	bl	8006638 <_calloc_r>
 8005f8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f90:	60f0      	str	r0, [r6, #12]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1e4      	bne.n	8005f62 <_Balloc+0x2e>
 8005f98:	2000      	movs	r0, #0
 8005f9a:	bd70      	pop	{r4, r5, r6, pc}
 8005f9c:	6802      	ldr	r2, [r0, #0]
 8005f9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005fa8:	e7f7      	b.n	8005f9a <_Balloc+0x66>
 8005faa:	bf00      	nop
 8005fac:	08007721 	.word	0x08007721
 8005fb0:	080077a8 	.word	0x080077a8

08005fb4 <_Bfree>:
 8005fb4:	b570      	push	{r4, r5, r6, lr}
 8005fb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005fb8:	4605      	mov	r5, r0
 8005fba:	460c      	mov	r4, r1
 8005fbc:	b976      	cbnz	r6, 8005fdc <_Bfree+0x28>
 8005fbe:	2010      	movs	r0, #16
 8005fc0:	f7ff ff94 	bl	8005eec <malloc>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	6268      	str	r0, [r5, #36]	; 0x24
 8005fc8:	b920      	cbnz	r0, 8005fd4 <_Bfree+0x20>
 8005fca:	218a      	movs	r1, #138	; 0x8a
 8005fcc:	4b08      	ldr	r3, [pc, #32]	; (8005ff0 <_Bfree+0x3c>)
 8005fce:	4809      	ldr	r0, [pc, #36]	; (8005ff4 <_Bfree+0x40>)
 8005fd0:	f000 fd52 	bl	8006a78 <__assert_func>
 8005fd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fd8:	6006      	str	r6, [r0, #0]
 8005fda:	60c6      	str	r6, [r0, #12]
 8005fdc:	b13c      	cbz	r4, 8005fee <_Bfree+0x3a>
 8005fde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005fe0:	6862      	ldr	r2, [r4, #4]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fe8:	6021      	str	r1, [r4, #0]
 8005fea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005fee:	bd70      	pop	{r4, r5, r6, pc}
 8005ff0:	08007721 	.word	0x08007721
 8005ff4:	080077a8 	.word	0x080077a8

08005ff8 <__multadd>:
 8005ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ffc:	4698      	mov	r8, r3
 8005ffe:	460c      	mov	r4, r1
 8006000:	2300      	movs	r3, #0
 8006002:	690e      	ldr	r6, [r1, #16]
 8006004:	4607      	mov	r7, r0
 8006006:	f101 0014 	add.w	r0, r1, #20
 800600a:	6805      	ldr	r5, [r0, #0]
 800600c:	3301      	adds	r3, #1
 800600e:	b2a9      	uxth	r1, r5
 8006010:	fb02 8101 	mla	r1, r2, r1, r8
 8006014:	0c2d      	lsrs	r5, r5, #16
 8006016:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800601a:	fb02 c505 	mla	r5, r2, r5, ip
 800601e:	b289      	uxth	r1, r1
 8006020:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006024:	429e      	cmp	r6, r3
 8006026:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800602a:	f840 1b04 	str.w	r1, [r0], #4
 800602e:	dcec      	bgt.n	800600a <__multadd+0x12>
 8006030:	f1b8 0f00 	cmp.w	r8, #0
 8006034:	d022      	beq.n	800607c <__multadd+0x84>
 8006036:	68a3      	ldr	r3, [r4, #8]
 8006038:	42b3      	cmp	r3, r6
 800603a:	dc19      	bgt.n	8006070 <__multadd+0x78>
 800603c:	6861      	ldr	r1, [r4, #4]
 800603e:	4638      	mov	r0, r7
 8006040:	3101      	adds	r1, #1
 8006042:	f7ff ff77 	bl	8005f34 <_Balloc>
 8006046:	4605      	mov	r5, r0
 8006048:	b928      	cbnz	r0, 8006056 <__multadd+0x5e>
 800604a:	4602      	mov	r2, r0
 800604c:	21b5      	movs	r1, #181	; 0xb5
 800604e:	4b0d      	ldr	r3, [pc, #52]	; (8006084 <__multadd+0x8c>)
 8006050:	480d      	ldr	r0, [pc, #52]	; (8006088 <__multadd+0x90>)
 8006052:	f000 fd11 	bl	8006a78 <__assert_func>
 8006056:	6922      	ldr	r2, [r4, #16]
 8006058:	f104 010c 	add.w	r1, r4, #12
 800605c:	3202      	adds	r2, #2
 800605e:	0092      	lsls	r2, r2, #2
 8006060:	300c      	adds	r0, #12
 8006062:	f7ff ff59 	bl	8005f18 <memcpy>
 8006066:	4621      	mov	r1, r4
 8006068:	4638      	mov	r0, r7
 800606a:	f7ff ffa3 	bl	8005fb4 <_Bfree>
 800606e:	462c      	mov	r4, r5
 8006070:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006074:	3601      	adds	r6, #1
 8006076:	f8c3 8014 	str.w	r8, [r3, #20]
 800607a:	6126      	str	r6, [r4, #16]
 800607c:	4620      	mov	r0, r4
 800607e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006082:	bf00      	nop
 8006084:	08007797 	.word	0x08007797
 8006088:	080077a8 	.word	0x080077a8

0800608c <__hi0bits>:
 800608c:	0c02      	lsrs	r2, r0, #16
 800608e:	0412      	lsls	r2, r2, #16
 8006090:	4603      	mov	r3, r0
 8006092:	b9ca      	cbnz	r2, 80060c8 <__hi0bits+0x3c>
 8006094:	0403      	lsls	r3, r0, #16
 8006096:	2010      	movs	r0, #16
 8006098:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800609c:	bf04      	itt	eq
 800609e:	021b      	lsleq	r3, r3, #8
 80060a0:	3008      	addeq	r0, #8
 80060a2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80060a6:	bf04      	itt	eq
 80060a8:	011b      	lsleq	r3, r3, #4
 80060aa:	3004      	addeq	r0, #4
 80060ac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80060b0:	bf04      	itt	eq
 80060b2:	009b      	lsleq	r3, r3, #2
 80060b4:	3002      	addeq	r0, #2
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	db05      	blt.n	80060c6 <__hi0bits+0x3a>
 80060ba:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80060be:	f100 0001 	add.w	r0, r0, #1
 80060c2:	bf08      	it	eq
 80060c4:	2020      	moveq	r0, #32
 80060c6:	4770      	bx	lr
 80060c8:	2000      	movs	r0, #0
 80060ca:	e7e5      	b.n	8006098 <__hi0bits+0xc>

080060cc <__lo0bits>:
 80060cc:	6803      	ldr	r3, [r0, #0]
 80060ce:	4602      	mov	r2, r0
 80060d0:	f013 0007 	ands.w	r0, r3, #7
 80060d4:	d00b      	beq.n	80060ee <__lo0bits+0x22>
 80060d6:	07d9      	lsls	r1, r3, #31
 80060d8:	d422      	bmi.n	8006120 <__lo0bits+0x54>
 80060da:	0798      	lsls	r0, r3, #30
 80060dc:	bf49      	itett	mi
 80060de:	085b      	lsrmi	r3, r3, #1
 80060e0:	089b      	lsrpl	r3, r3, #2
 80060e2:	2001      	movmi	r0, #1
 80060e4:	6013      	strmi	r3, [r2, #0]
 80060e6:	bf5c      	itt	pl
 80060e8:	2002      	movpl	r0, #2
 80060ea:	6013      	strpl	r3, [r2, #0]
 80060ec:	4770      	bx	lr
 80060ee:	b299      	uxth	r1, r3
 80060f0:	b909      	cbnz	r1, 80060f6 <__lo0bits+0x2a>
 80060f2:	2010      	movs	r0, #16
 80060f4:	0c1b      	lsrs	r3, r3, #16
 80060f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80060fa:	bf04      	itt	eq
 80060fc:	0a1b      	lsreq	r3, r3, #8
 80060fe:	3008      	addeq	r0, #8
 8006100:	0719      	lsls	r1, r3, #28
 8006102:	bf04      	itt	eq
 8006104:	091b      	lsreq	r3, r3, #4
 8006106:	3004      	addeq	r0, #4
 8006108:	0799      	lsls	r1, r3, #30
 800610a:	bf04      	itt	eq
 800610c:	089b      	lsreq	r3, r3, #2
 800610e:	3002      	addeq	r0, #2
 8006110:	07d9      	lsls	r1, r3, #31
 8006112:	d403      	bmi.n	800611c <__lo0bits+0x50>
 8006114:	085b      	lsrs	r3, r3, #1
 8006116:	f100 0001 	add.w	r0, r0, #1
 800611a:	d003      	beq.n	8006124 <__lo0bits+0x58>
 800611c:	6013      	str	r3, [r2, #0]
 800611e:	4770      	bx	lr
 8006120:	2000      	movs	r0, #0
 8006122:	4770      	bx	lr
 8006124:	2020      	movs	r0, #32
 8006126:	4770      	bx	lr

08006128 <__i2b>:
 8006128:	b510      	push	{r4, lr}
 800612a:	460c      	mov	r4, r1
 800612c:	2101      	movs	r1, #1
 800612e:	f7ff ff01 	bl	8005f34 <_Balloc>
 8006132:	4602      	mov	r2, r0
 8006134:	b928      	cbnz	r0, 8006142 <__i2b+0x1a>
 8006136:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800613a:	4b04      	ldr	r3, [pc, #16]	; (800614c <__i2b+0x24>)
 800613c:	4804      	ldr	r0, [pc, #16]	; (8006150 <__i2b+0x28>)
 800613e:	f000 fc9b 	bl	8006a78 <__assert_func>
 8006142:	2301      	movs	r3, #1
 8006144:	6144      	str	r4, [r0, #20]
 8006146:	6103      	str	r3, [r0, #16]
 8006148:	bd10      	pop	{r4, pc}
 800614a:	bf00      	nop
 800614c:	08007797 	.word	0x08007797
 8006150:	080077a8 	.word	0x080077a8

08006154 <__multiply>:
 8006154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006158:	4614      	mov	r4, r2
 800615a:	690a      	ldr	r2, [r1, #16]
 800615c:	6923      	ldr	r3, [r4, #16]
 800615e:	460d      	mov	r5, r1
 8006160:	429a      	cmp	r2, r3
 8006162:	bfbe      	ittt	lt
 8006164:	460b      	movlt	r3, r1
 8006166:	4625      	movlt	r5, r4
 8006168:	461c      	movlt	r4, r3
 800616a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800616e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006172:	68ab      	ldr	r3, [r5, #8]
 8006174:	6869      	ldr	r1, [r5, #4]
 8006176:	eb0a 0709 	add.w	r7, sl, r9
 800617a:	42bb      	cmp	r3, r7
 800617c:	b085      	sub	sp, #20
 800617e:	bfb8      	it	lt
 8006180:	3101      	addlt	r1, #1
 8006182:	f7ff fed7 	bl	8005f34 <_Balloc>
 8006186:	b930      	cbnz	r0, 8006196 <__multiply+0x42>
 8006188:	4602      	mov	r2, r0
 800618a:	f240 115d 	movw	r1, #349	; 0x15d
 800618e:	4b41      	ldr	r3, [pc, #260]	; (8006294 <__multiply+0x140>)
 8006190:	4841      	ldr	r0, [pc, #260]	; (8006298 <__multiply+0x144>)
 8006192:	f000 fc71 	bl	8006a78 <__assert_func>
 8006196:	f100 0614 	add.w	r6, r0, #20
 800619a:	4633      	mov	r3, r6
 800619c:	2200      	movs	r2, #0
 800619e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80061a2:	4543      	cmp	r3, r8
 80061a4:	d31e      	bcc.n	80061e4 <__multiply+0x90>
 80061a6:	f105 0c14 	add.w	ip, r5, #20
 80061aa:	f104 0314 	add.w	r3, r4, #20
 80061ae:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80061b2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80061b6:	9202      	str	r2, [sp, #8]
 80061b8:	ebac 0205 	sub.w	r2, ip, r5
 80061bc:	3a15      	subs	r2, #21
 80061be:	f022 0203 	bic.w	r2, r2, #3
 80061c2:	3204      	adds	r2, #4
 80061c4:	f105 0115 	add.w	r1, r5, #21
 80061c8:	458c      	cmp	ip, r1
 80061ca:	bf38      	it	cc
 80061cc:	2204      	movcc	r2, #4
 80061ce:	9201      	str	r2, [sp, #4]
 80061d0:	9a02      	ldr	r2, [sp, #8]
 80061d2:	9303      	str	r3, [sp, #12]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d808      	bhi.n	80061ea <__multiply+0x96>
 80061d8:	2f00      	cmp	r7, #0
 80061da:	dc55      	bgt.n	8006288 <__multiply+0x134>
 80061dc:	6107      	str	r7, [r0, #16]
 80061de:	b005      	add	sp, #20
 80061e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061e4:	f843 2b04 	str.w	r2, [r3], #4
 80061e8:	e7db      	b.n	80061a2 <__multiply+0x4e>
 80061ea:	f8b3 a000 	ldrh.w	sl, [r3]
 80061ee:	f1ba 0f00 	cmp.w	sl, #0
 80061f2:	d020      	beq.n	8006236 <__multiply+0xe2>
 80061f4:	46b1      	mov	r9, r6
 80061f6:	2200      	movs	r2, #0
 80061f8:	f105 0e14 	add.w	lr, r5, #20
 80061fc:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006200:	f8d9 b000 	ldr.w	fp, [r9]
 8006204:	b2a1      	uxth	r1, r4
 8006206:	fa1f fb8b 	uxth.w	fp, fp
 800620a:	fb0a b101 	mla	r1, sl, r1, fp
 800620e:	4411      	add	r1, r2
 8006210:	f8d9 2000 	ldr.w	r2, [r9]
 8006214:	0c24      	lsrs	r4, r4, #16
 8006216:	0c12      	lsrs	r2, r2, #16
 8006218:	fb0a 2404 	mla	r4, sl, r4, r2
 800621c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006220:	b289      	uxth	r1, r1
 8006222:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006226:	45f4      	cmp	ip, lr
 8006228:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800622c:	f849 1b04 	str.w	r1, [r9], #4
 8006230:	d8e4      	bhi.n	80061fc <__multiply+0xa8>
 8006232:	9901      	ldr	r1, [sp, #4]
 8006234:	5072      	str	r2, [r6, r1]
 8006236:	9a03      	ldr	r2, [sp, #12]
 8006238:	3304      	adds	r3, #4
 800623a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800623e:	f1b9 0f00 	cmp.w	r9, #0
 8006242:	d01f      	beq.n	8006284 <__multiply+0x130>
 8006244:	46b6      	mov	lr, r6
 8006246:	f04f 0a00 	mov.w	sl, #0
 800624a:	6834      	ldr	r4, [r6, #0]
 800624c:	f105 0114 	add.w	r1, r5, #20
 8006250:	880a      	ldrh	r2, [r1, #0]
 8006252:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006256:	b2a4      	uxth	r4, r4
 8006258:	fb09 b202 	mla	r2, r9, r2, fp
 800625c:	4492      	add	sl, r2
 800625e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006262:	f84e 4b04 	str.w	r4, [lr], #4
 8006266:	f851 4b04 	ldr.w	r4, [r1], #4
 800626a:	f8be 2000 	ldrh.w	r2, [lr]
 800626e:	0c24      	lsrs	r4, r4, #16
 8006270:	fb09 2404 	mla	r4, r9, r4, r2
 8006274:	458c      	cmp	ip, r1
 8006276:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800627a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800627e:	d8e7      	bhi.n	8006250 <__multiply+0xfc>
 8006280:	9a01      	ldr	r2, [sp, #4]
 8006282:	50b4      	str	r4, [r6, r2]
 8006284:	3604      	adds	r6, #4
 8006286:	e7a3      	b.n	80061d0 <__multiply+0x7c>
 8006288:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1a5      	bne.n	80061dc <__multiply+0x88>
 8006290:	3f01      	subs	r7, #1
 8006292:	e7a1      	b.n	80061d8 <__multiply+0x84>
 8006294:	08007797 	.word	0x08007797
 8006298:	080077a8 	.word	0x080077a8

0800629c <__pow5mult>:
 800629c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062a0:	4615      	mov	r5, r2
 80062a2:	f012 0203 	ands.w	r2, r2, #3
 80062a6:	4606      	mov	r6, r0
 80062a8:	460f      	mov	r7, r1
 80062aa:	d007      	beq.n	80062bc <__pow5mult+0x20>
 80062ac:	4c25      	ldr	r4, [pc, #148]	; (8006344 <__pow5mult+0xa8>)
 80062ae:	3a01      	subs	r2, #1
 80062b0:	2300      	movs	r3, #0
 80062b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80062b6:	f7ff fe9f 	bl	8005ff8 <__multadd>
 80062ba:	4607      	mov	r7, r0
 80062bc:	10ad      	asrs	r5, r5, #2
 80062be:	d03d      	beq.n	800633c <__pow5mult+0xa0>
 80062c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80062c2:	b97c      	cbnz	r4, 80062e4 <__pow5mult+0x48>
 80062c4:	2010      	movs	r0, #16
 80062c6:	f7ff fe11 	bl	8005eec <malloc>
 80062ca:	4602      	mov	r2, r0
 80062cc:	6270      	str	r0, [r6, #36]	; 0x24
 80062ce:	b928      	cbnz	r0, 80062dc <__pow5mult+0x40>
 80062d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80062d4:	4b1c      	ldr	r3, [pc, #112]	; (8006348 <__pow5mult+0xac>)
 80062d6:	481d      	ldr	r0, [pc, #116]	; (800634c <__pow5mult+0xb0>)
 80062d8:	f000 fbce 	bl	8006a78 <__assert_func>
 80062dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062e0:	6004      	str	r4, [r0, #0]
 80062e2:	60c4      	str	r4, [r0, #12]
 80062e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80062e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80062ec:	b94c      	cbnz	r4, 8006302 <__pow5mult+0x66>
 80062ee:	f240 2171 	movw	r1, #625	; 0x271
 80062f2:	4630      	mov	r0, r6
 80062f4:	f7ff ff18 	bl	8006128 <__i2b>
 80062f8:	2300      	movs	r3, #0
 80062fa:	4604      	mov	r4, r0
 80062fc:	f8c8 0008 	str.w	r0, [r8, #8]
 8006300:	6003      	str	r3, [r0, #0]
 8006302:	f04f 0900 	mov.w	r9, #0
 8006306:	07eb      	lsls	r3, r5, #31
 8006308:	d50a      	bpl.n	8006320 <__pow5mult+0x84>
 800630a:	4639      	mov	r1, r7
 800630c:	4622      	mov	r2, r4
 800630e:	4630      	mov	r0, r6
 8006310:	f7ff ff20 	bl	8006154 <__multiply>
 8006314:	4680      	mov	r8, r0
 8006316:	4639      	mov	r1, r7
 8006318:	4630      	mov	r0, r6
 800631a:	f7ff fe4b 	bl	8005fb4 <_Bfree>
 800631e:	4647      	mov	r7, r8
 8006320:	106d      	asrs	r5, r5, #1
 8006322:	d00b      	beq.n	800633c <__pow5mult+0xa0>
 8006324:	6820      	ldr	r0, [r4, #0]
 8006326:	b938      	cbnz	r0, 8006338 <__pow5mult+0x9c>
 8006328:	4622      	mov	r2, r4
 800632a:	4621      	mov	r1, r4
 800632c:	4630      	mov	r0, r6
 800632e:	f7ff ff11 	bl	8006154 <__multiply>
 8006332:	6020      	str	r0, [r4, #0]
 8006334:	f8c0 9000 	str.w	r9, [r0]
 8006338:	4604      	mov	r4, r0
 800633a:	e7e4      	b.n	8006306 <__pow5mult+0x6a>
 800633c:	4638      	mov	r0, r7
 800633e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006342:	bf00      	nop
 8006344:	080078f8 	.word	0x080078f8
 8006348:	08007721 	.word	0x08007721
 800634c:	080077a8 	.word	0x080077a8

08006350 <__lshift>:
 8006350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006354:	460c      	mov	r4, r1
 8006356:	4607      	mov	r7, r0
 8006358:	4691      	mov	r9, r2
 800635a:	6923      	ldr	r3, [r4, #16]
 800635c:	6849      	ldr	r1, [r1, #4]
 800635e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006362:	68a3      	ldr	r3, [r4, #8]
 8006364:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006368:	f108 0601 	add.w	r6, r8, #1
 800636c:	42b3      	cmp	r3, r6
 800636e:	db0b      	blt.n	8006388 <__lshift+0x38>
 8006370:	4638      	mov	r0, r7
 8006372:	f7ff fddf 	bl	8005f34 <_Balloc>
 8006376:	4605      	mov	r5, r0
 8006378:	b948      	cbnz	r0, 800638e <__lshift+0x3e>
 800637a:	4602      	mov	r2, r0
 800637c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006380:	4b27      	ldr	r3, [pc, #156]	; (8006420 <__lshift+0xd0>)
 8006382:	4828      	ldr	r0, [pc, #160]	; (8006424 <__lshift+0xd4>)
 8006384:	f000 fb78 	bl	8006a78 <__assert_func>
 8006388:	3101      	adds	r1, #1
 800638a:	005b      	lsls	r3, r3, #1
 800638c:	e7ee      	b.n	800636c <__lshift+0x1c>
 800638e:	2300      	movs	r3, #0
 8006390:	f100 0114 	add.w	r1, r0, #20
 8006394:	f100 0210 	add.w	r2, r0, #16
 8006398:	4618      	mov	r0, r3
 800639a:	4553      	cmp	r3, sl
 800639c:	db33      	blt.n	8006406 <__lshift+0xb6>
 800639e:	6920      	ldr	r0, [r4, #16]
 80063a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80063a4:	f104 0314 	add.w	r3, r4, #20
 80063a8:	f019 091f 	ands.w	r9, r9, #31
 80063ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80063b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80063b4:	d02b      	beq.n	800640e <__lshift+0xbe>
 80063b6:	468a      	mov	sl, r1
 80063b8:	2200      	movs	r2, #0
 80063ba:	f1c9 0e20 	rsb	lr, r9, #32
 80063be:	6818      	ldr	r0, [r3, #0]
 80063c0:	fa00 f009 	lsl.w	r0, r0, r9
 80063c4:	4302      	orrs	r2, r0
 80063c6:	f84a 2b04 	str.w	r2, [sl], #4
 80063ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80063ce:	459c      	cmp	ip, r3
 80063d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80063d4:	d8f3      	bhi.n	80063be <__lshift+0x6e>
 80063d6:	ebac 0304 	sub.w	r3, ip, r4
 80063da:	3b15      	subs	r3, #21
 80063dc:	f023 0303 	bic.w	r3, r3, #3
 80063e0:	3304      	adds	r3, #4
 80063e2:	f104 0015 	add.w	r0, r4, #21
 80063e6:	4584      	cmp	ip, r0
 80063e8:	bf38      	it	cc
 80063ea:	2304      	movcc	r3, #4
 80063ec:	50ca      	str	r2, [r1, r3]
 80063ee:	b10a      	cbz	r2, 80063f4 <__lshift+0xa4>
 80063f0:	f108 0602 	add.w	r6, r8, #2
 80063f4:	3e01      	subs	r6, #1
 80063f6:	4638      	mov	r0, r7
 80063f8:	4621      	mov	r1, r4
 80063fa:	612e      	str	r6, [r5, #16]
 80063fc:	f7ff fdda 	bl	8005fb4 <_Bfree>
 8006400:	4628      	mov	r0, r5
 8006402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006406:	f842 0f04 	str.w	r0, [r2, #4]!
 800640a:	3301      	adds	r3, #1
 800640c:	e7c5      	b.n	800639a <__lshift+0x4a>
 800640e:	3904      	subs	r1, #4
 8006410:	f853 2b04 	ldr.w	r2, [r3], #4
 8006414:	459c      	cmp	ip, r3
 8006416:	f841 2f04 	str.w	r2, [r1, #4]!
 800641a:	d8f9      	bhi.n	8006410 <__lshift+0xc0>
 800641c:	e7ea      	b.n	80063f4 <__lshift+0xa4>
 800641e:	bf00      	nop
 8006420:	08007797 	.word	0x08007797
 8006424:	080077a8 	.word	0x080077a8

08006428 <__mcmp>:
 8006428:	4603      	mov	r3, r0
 800642a:	690a      	ldr	r2, [r1, #16]
 800642c:	6900      	ldr	r0, [r0, #16]
 800642e:	b530      	push	{r4, r5, lr}
 8006430:	1a80      	subs	r0, r0, r2
 8006432:	d10d      	bne.n	8006450 <__mcmp+0x28>
 8006434:	3314      	adds	r3, #20
 8006436:	3114      	adds	r1, #20
 8006438:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800643c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006440:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006444:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006448:	4295      	cmp	r5, r2
 800644a:	d002      	beq.n	8006452 <__mcmp+0x2a>
 800644c:	d304      	bcc.n	8006458 <__mcmp+0x30>
 800644e:	2001      	movs	r0, #1
 8006450:	bd30      	pop	{r4, r5, pc}
 8006452:	42a3      	cmp	r3, r4
 8006454:	d3f4      	bcc.n	8006440 <__mcmp+0x18>
 8006456:	e7fb      	b.n	8006450 <__mcmp+0x28>
 8006458:	f04f 30ff 	mov.w	r0, #4294967295
 800645c:	e7f8      	b.n	8006450 <__mcmp+0x28>
	...

08006460 <__mdiff>:
 8006460:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006464:	460c      	mov	r4, r1
 8006466:	4606      	mov	r6, r0
 8006468:	4611      	mov	r1, r2
 800646a:	4620      	mov	r0, r4
 800646c:	4692      	mov	sl, r2
 800646e:	f7ff ffdb 	bl	8006428 <__mcmp>
 8006472:	1e05      	subs	r5, r0, #0
 8006474:	d111      	bne.n	800649a <__mdiff+0x3a>
 8006476:	4629      	mov	r1, r5
 8006478:	4630      	mov	r0, r6
 800647a:	f7ff fd5b 	bl	8005f34 <_Balloc>
 800647e:	4602      	mov	r2, r0
 8006480:	b928      	cbnz	r0, 800648e <__mdiff+0x2e>
 8006482:	f240 2132 	movw	r1, #562	; 0x232
 8006486:	4b3c      	ldr	r3, [pc, #240]	; (8006578 <__mdiff+0x118>)
 8006488:	483c      	ldr	r0, [pc, #240]	; (800657c <__mdiff+0x11c>)
 800648a:	f000 faf5 	bl	8006a78 <__assert_func>
 800648e:	2301      	movs	r3, #1
 8006490:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006494:	4610      	mov	r0, r2
 8006496:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800649a:	bfa4      	itt	ge
 800649c:	4653      	movge	r3, sl
 800649e:	46a2      	movge	sl, r4
 80064a0:	4630      	mov	r0, r6
 80064a2:	f8da 1004 	ldr.w	r1, [sl, #4]
 80064a6:	bfa6      	itte	ge
 80064a8:	461c      	movge	r4, r3
 80064aa:	2500      	movge	r5, #0
 80064ac:	2501      	movlt	r5, #1
 80064ae:	f7ff fd41 	bl	8005f34 <_Balloc>
 80064b2:	4602      	mov	r2, r0
 80064b4:	b918      	cbnz	r0, 80064be <__mdiff+0x5e>
 80064b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80064ba:	4b2f      	ldr	r3, [pc, #188]	; (8006578 <__mdiff+0x118>)
 80064bc:	e7e4      	b.n	8006488 <__mdiff+0x28>
 80064be:	f100 0814 	add.w	r8, r0, #20
 80064c2:	f8da 7010 	ldr.w	r7, [sl, #16]
 80064c6:	60c5      	str	r5, [r0, #12]
 80064c8:	f04f 0c00 	mov.w	ip, #0
 80064cc:	f10a 0514 	add.w	r5, sl, #20
 80064d0:	f10a 0010 	add.w	r0, sl, #16
 80064d4:	46c2      	mov	sl, r8
 80064d6:	6926      	ldr	r6, [r4, #16]
 80064d8:	f104 0914 	add.w	r9, r4, #20
 80064dc:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80064e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80064e4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80064e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80064ec:	fa1f f18b 	uxth.w	r1, fp
 80064f0:	4461      	add	r1, ip
 80064f2:	fa1f fc83 	uxth.w	ip, r3
 80064f6:	0c1b      	lsrs	r3, r3, #16
 80064f8:	eba1 010c 	sub.w	r1, r1, ip
 80064fc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006500:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006504:	b289      	uxth	r1, r1
 8006506:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800650a:	454e      	cmp	r6, r9
 800650c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006510:	f84a 3b04 	str.w	r3, [sl], #4
 8006514:	d8e6      	bhi.n	80064e4 <__mdiff+0x84>
 8006516:	1b33      	subs	r3, r6, r4
 8006518:	3b15      	subs	r3, #21
 800651a:	f023 0303 	bic.w	r3, r3, #3
 800651e:	3415      	adds	r4, #21
 8006520:	3304      	adds	r3, #4
 8006522:	42a6      	cmp	r6, r4
 8006524:	bf38      	it	cc
 8006526:	2304      	movcc	r3, #4
 8006528:	441d      	add	r5, r3
 800652a:	4443      	add	r3, r8
 800652c:	461e      	mov	r6, r3
 800652e:	462c      	mov	r4, r5
 8006530:	4574      	cmp	r4, lr
 8006532:	d30e      	bcc.n	8006552 <__mdiff+0xf2>
 8006534:	f10e 0103 	add.w	r1, lr, #3
 8006538:	1b49      	subs	r1, r1, r5
 800653a:	f021 0103 	bic.w	r1, r1, #3
 800653e:	3d03      	subs	r5, #3
 8006540:	45ae      	cmp	lr, r5
 8006542:	bf38      	it	cc
 8006544:	2100      	movcc	r1, #0
 8006546:	4419      	add	r1, r3
 8006548:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800654c:	b18b      	cbz	r3, 8006572 <__mdiff+0x112>
 800654e:	6117      	str	r7, [r2, #16]
 8006550:	e7a0      	b.n	8006494 <__mdiff+0x34>
 8006552:	f854 8b04 	ldr.w	r8, [r4], #4
 8006556:	fa1f f188 	uxth.w	r1, r8
 800655a:	4461      	add	r1, ip
 800655c:	1408      	asrs	r0, r1, #16
 800655e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006562:	b289      	uxth	r1, r1
 8006564:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006568:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800656c:	f846 1b04 	str.w	r1, [r6], #4
 8006570:	e7de      	b.n	8006530 <__mdiff+0xd0>
 8006572:	3f01      	subs	r7, #1
 8006574:	e7e8      	b.n	8006548 <__mdiff+0xe8>
 8006576:	bf00      	nop
 8006578:	08007797 	.word	0x08007797
 800657c:	080077a8 	.word	0x080077a8

08006580 <__d2b>:
 8006580:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006584:	2101      	movs	r1, #1
 8006586:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800658a:	4690      	mov	r8, r2
 800658c:	461d      	mov	r5, r3
 800658e:	f7ff fcd1 	bl	8005f34 <_Balloc>
 8006592:	4604      	mov	r4, r0
 8006594:	b930      	cbnz	r0, 80065a4 <__d2b+0x24>
 8006596:	4602      	mov	r2, r0
 8006598:	f240 310a 	movw	r1, #778	; 0x30a
 800659c:	4b24      	ldr	r3, [pc, #144]	; (8006630 <__d2b+0xb0>)
 800659e:	4825      	ldr	r0, [pc, #148]	; (8006634 <__d2b+0xb4>)
 80065a0:	f000 fa6a 	bl	8006a78 <__assert_func>
 80065a4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80065a8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80065ac:	bb2d      	cbnz	r5, 80065fa <__d2b+0x7a>
 80065ae:	9301      	str	r3, [sp, #4]
 80065b0:	f1b8 0300 	subs.w	r3, r8, #0
 80065b4:	d026      	beq.n	8006604 <__d2b+0x84>
 80065b6:	4668      	mov	r0, sp
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	f7ff fd87 	bl	80060cc <__lo0bits>
 80065be:	9900      	ldr	r1, [sp, #0]
 80065c0:	b1f0      	cbz	r0, 8006600 <__d2b+0x80>
 80065c2:	9a01      	ldr	r2, [sp, #4]
 80065c4:	f1c0 0320 	rsb	r3, r0, #32
 80065c8:	fa02 f303 	lsl.w	r3, r2, r3
 80065cc:	430b      	orrs	r3, r1
 80065ce:	40c2      	lsrs	r2, r0
 80065d0:	6163      	str	r3, [r4, #20]
 80065d2:	9201      	str	r2, [sp, #4]
 80065d4:	9b01      	ldr	r3, [sp, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	bf14      	ite	ne
 80065da:	2102      	movne	r1, #2
 80065dc:	2101      	moveq	r1, #1
 80065de:	61a3      	str	r3, [r4, #24]
 80065e0:	6121      	str	r1, [r4, #16]
 80065e2:	b1c5      	cbz	r5, 8006616 <__d2b+0x96>
 80065e4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80065e8:	4405      	add	r5, r0
 80065ea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80065ee:	603d      	str	r5, [r7, #0]
 80065f0:	6030      	str	r0, [r6, #0]
 80065f2:	4620      	mov	r0, r4
 80065f4:	b002      	add	sp, #8
 80065f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065fe:	e7d6      	b.n	80065ae <__d2b+0x2e>
 8006600:	6161      	str	r1, [r4, #20]
 8006602:	e7e7      	b.n	80065d4 <__d2b+0x54>
 8006604:	a801      	add	r0, sp, #4
 8006606:	f7ff fd61 	bl	80060cc <__lo0bits>
 800660a:	2101      	movs	r1, #1
 800660c:	9b01      	ldr	r3, [sp, #4]
 800660e:	6121      	str	r1, [r4, #16]
 8006610:	6163      	str	r3, [r4, #20]
 8006612:	3020      	adds	r0, #32
 8006614:	e7e5      	b.n	80065e2 <__d2b+0x62>
 8006616:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800661a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800661e:	6038      	str	r0, [r7, #0]
 8006620:	6918      	ldr	r0, [r3, #16]
 8006622:	f7ff fd33 	bl	800608c <__hi0bits>
 8006626:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800662a:	6031      	str	r1, [r6, #0]
 800662c:	e7e1      	b.n	80065f2 <__d2b+0x72>
 800662e:	bf00      	nop
 8006630:	08007797 	.word	0x08007797
 8006634:	080077a8 	.word	0x080077a8

08006638 <_calloc_r>:
 8006638:	b538      	push	{r3, r4, r5, lr}
 800663a:	fb02 f501 	mul.w	r5, r2, r1
 800663e:	4629      	mov	r1, r5
 8006640:	f000 f854 	bl	80066ec <_malloc_r>
 8006644:	4604      	mov	r4, r0
 8006646:	b118      	cbz	r0, 8006650 <_calloc_r+0x18>
 8006648:	462a      	mov	r2, r5
 800664a:	2100      	movs	r1, #0
 800664c:	f7fe f946 	bl	80048dc <memset>
 8006650:	4620      	mov	r0, r4
 8006652:	bd38      	pop	{r3, r4, r5, pc}

08006654 <_free_r>:
 8006654:	b538      	push	{r3, r4, r5, lr}
 8006656:	4605      	mov	r5, r0
 8006658:	2900      	cmp	r1, #0
 800665a:	d043      	beq.n	80066e4 <_free_r+0x90>
 800665c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006660:	1f0c      	subs	r4, r1, #4
 8006662:	2b00      	cmp	r3, #0
 8006664:	bfb8      	it	lt
 8006666:	18e4      	addlt	r4, r4, r3
 8006668:	f000 fa62 	bl	8006b30 <__malloc_lock>
 800666c:	4a1e      	ldr	r2, [pc, #120]	; (80066e8 <_free_r+0x94>)
 800666e:	6813      	ldr	r3, [r2, #0]
 8006670:	4610      	mov	r0, r2
 8006672:	b933      	cbnz	r3, 8006682 <_free_r+0x2e>
 8006674:	6063      	str	r3, [r4, #4]
 8006676:	6014      	str	r4, [r2, #0]
 8006678:	4628      	mov	r0, r5
 800667a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800667e:	f000 ba5d 	b.w	8006b3c <__malloc_unlock>
 8006682:	42a3      	cmp	r3, r4
 8006684:	d90a      	bls.n	800669c <_free_r+0x48>
 8006686:	6821      	ldr	r1, [r4, #0]
 8006688:	1862      	adds	r2, r4, r1
 800668a:	4293      	cmp	r3, r2
 800668c:	bf01      	itttt	eq
 800668e:	681a      	ldreq	r2, [r3, #0]
 8006690:	685b      	ldreq	r3, [r3, #4]
 8006692:	1852      	addeq	r2, r2, r1
 8006694:	6022      	streq	r2, [r4, #0]
 8006696:	6063      	str	r3, [r4, #4]
 8006698:	6004      	str	r4, [r0, #0]
 800669a:	e7ed      	b.n	8006678 <_free_r+0x24>
 800669c:	461a      	mov	r2, r3
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	b10b      	cbz	r3, 80066a6 <_free_r+0x52>
 80066a2:	42a3      	cmp	r3, r4
 80066a4:	d9fa      	bls.n	800669c <_free_r+0x48>
 80066a6:	6811      	ldr	r1, [r2, #0]
 80066a8:	1850      	adds	r0, r2, r1
 80066aa:	42a0      	cmp	r0, r4
 80066ac:	d10b      	bne.n	80066c6 <_free_r+0x72>
 80066ae:	6820      	ldr	r0, [r4, #0]
 80066b0:	4401      	add	r1, r0
 80066b2:	1850      	adds	r0, r2, r1
 80066b4:	4283      	cmp	r3, r0
 80066b6:	6011      	str	r1, [r2, #0]
 80066b8:	d1de      	bne.n	8006678 <_free_r+0x24>
 80066ba:	6818      	ldr	r0, [r3, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	4401      	add	r1, r0
 80066c0:	6011      	str	r1, [r2, #0]
 80066c2:	6053      	str	r3, [r2, #4]
 80066c4:	e7d8      	b.n	8006678 <_free_r+0x24>
 80066c6:	d902      	bls.n	80066ce <_free_r+0x7a>
 80066c8:	230c      	movs	r3, #12
 80066ca:	602b      	str	r3, [r5, #0]
 80066cc:	e7d4      	b.n	8006678 <_free_r+0x24>
 80066ce:	6820      	ldr	r0, [r4, #0]
 80066d0:	1821      	adds	r1, r4, r0
 80066d2:	428b      	cmp	r3, r1
 80066d4:	bf01      	itttt	eq
 80066d6:	6819      	ldreq	r1, [r3, #0]
 80066d8:	685b      	ldreq	r3, [r3, #4]
 80066da:	1809      	addeq	r1, r1, r0
 80066dc:	6021      	streq	r1, [r4, #0]
 80066de:	6063      	str	r3, [r4, #4]
 80066e0:	6054      	str	r4, [r2, #4]
 80066e2:	e7c9      	b.n	8006678 <_free_r+0x24>
 80066e4:	bd38      	pop	{r3, r4, r5, pc}
 80066e6:	bf00      	nop
 80066e8:	20000200 	.word	0x20000200

080066ec <_malloc_r>:
 80066ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ee:	1ccd      	adds	r5, r1, #3
 80066f0:	f025 0503 	bic.w	r5, r5, #3
 80066f4:	3508      	adds	r5, #8
 80066f6:	2d0c      	cmp	r5, #12
 80066f8:	bf38      	it	cc
 80066fa:	250c      	movcc	r5, #12
 80066fc:	2d00      	cmp	r5, #0
 80066fe:	4606      	mov	r6, r0
 8006700:	db01      	blt.n	8006706 <_malloc_r+0x1a>
 8006702:	42a9      	cmp	r1, r5
 8006704:	d903      	bls.n	800670e <_malloc_r+0x22>
 8006706:	230c      	movs	r3, #12
 8006708:	6033      	str	r3, [r6, #0]
 800670a:	2000      	movs	r0, #0
 800670c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800670e:	f000 fa0f 	bl	8006b30 <__malloc_lock>
 8006712:	4921      	ldr	r1, [pc, #132]	; (8006798 <_malloc_r+0xac>)
 8006714:	680a      	ldr	r2, [r1, #0]
 8006716:	4614      	mov	r4, r2
 8006718:	b99c      	cbnz	r4, 8006742 <_malloc_r+0x56>
 800671a:	4f20      	ldr	r7, [pc, #128]	; (800679c <_malloc_r+0xb0>)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	b923      	cbnz	r3, 800672a <_malloc_r+0x3e>
 8006720:	4621      	mov	r1, r4
 8006722:	4630      	mov	r0, r6
 8006724:	f000 f998 	bl	8006a58 <_sbrk_r>
 8006728:	6038      	str	r0, [r7, #0]
 800672a:	4629      	mov	r1, r5
 800672c:	4630      	mov	r0, r6
 800672e:	f000 f993 	bl	8006a58 <_sbrk_r>
 8006732:	1c43      	adds	r3, r0, #1
 8006734:	d123      	bne.n	800677e <_malloc_r+0x92>
 8006736:	230c      	movs	r3, #12
 8006738:	4630      	mov	r0, r6
 800673a:	6033      	str	r3, [r6, #0]
 800673c:	f000 f9fe 	bl	8006b3c <__malloc_unlock>
 8006740:	e7e3      	b.n	800670a <_malloc_r+0x1e>
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	1b5b      	subs	r3, r3, r5
 8006746:	d417      	bmi.n	8006778 <_malloc_r+0x8c>
 8006748:	2b0b      	cmp	r3, #11
 800674a:	d903      	bls.n	8006754 <_malloc_r+0x68>
 800674c:	6023      	str	r3, [r4, #0]
 800674e:	441c      	add	r4, r3
 8006750:	6025      	str	r5, [r4, #0]
 8006752:	e004      	b.n	800675e <_malloc_r+0x72>
 8006754:	6863      	ldr	r3, [r4, #4]
 8006756:	42a2      	cmp	r2, r4
 8006758:	bf0c      	ite	eq
 800675a:	600b      	streq	r3, [r1, #0]
 800675c:	6053      	strne	r3, [r2, #4]
 800675e:	4630      	mov	r0, r6
 8006760:	f000 f9ec 	bl	8006b3c <__malloc_unlock>
 8006764:	f104 000b 	add.w	r0, r4, #11
 8006768:	1d23      	adds	r3, r4, #4
 800676a:	f020 0007 	bic.w	r0, r0, #7
 800676e:	1ac2      	subs	r2, r0, r3
 8006770:	d0cc      	beq.n	800670c <_malloc_r+0x20>
 8006772:	1a1b      	subs	r3, r3, r0
 8006774:	50a3      	str	r3, [r4, r2]
 8006776:	e7c9      	b.n	800670c <_malloc_r+0x20>
 8006778:	4622      	mov	r2, r4
 800677a:	6864      	ldr	r4, [r4, #4]
 800677c:	e7cc      	b.n	8006718 <_malloc_r+0x2c>
 800677e:	1cc4      	adds	r4, r0, #3
 8006780:	f024 0403 	bic.w	r4, r4, #3
 8006784:	42a0      	cmp	r0, r4
 8006786:	d0e3      	beq.n	8006750 <_malloc_r+0x64>
 8006788:	1a21      	subs	r1, r4, r0
 800678a:	4630      	mov	r0, r6
 800678c:	f000 f964 	bl	8006a58 <_sbrk_r>
 8006790:	3001      	adds	r0, #1
 8006792:	d1dd      	bne.n	8006750 <_malloc_r+0x64>
 8006794:	e7cf      	b.n	8006736 <_malloc_r+0x4a>
 8006796:	bf00      	nop
 8006798:	20000200 	.word	0x20000200
 800679c:	20000204 	.word	0x20000204

080067a0 <__ssputs_r>:
 80067a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067a4:	688e      	ldr	r6, [r1, #8]
 80067a6:	4682      	mov	sl, r0
 80067a8:	429e      	cmp	r6, r3
 80067aa:	460c      	mov	r4, r1
 80067ac:	4690      	mov	r8, r2
 80067ae:	461f      	mov	r7, r3
 80067b0:	d838      	bhi.n	8006824 <__ssputs_r+0x84>
 80067b2:	898a      	ldrh	r2, [r1, #12]
 80067b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067b8:	d032      	beq.n	8006820 <__ssputs_r+0x80>
 80067ba:	6825      	ldr	r5, [r4, #0]
 80067bc:	6909      	ldr	r1, [r1, #16]
 80067be:	3301      	adds	r3, #1
 80067c0:	eba5 0901 	sub.w	r9, r5, r1
 80067c4:	6965      	ldr	r5, [r4, #20]
 80067c6:	444b      	add	r3, r9
 80067c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067d0:	106d      	asrs	r5, r5, #1
 80067d2:	429d      	cmp	r5, r3
 80067d4:	bf38      	it	cc
 80067d6:	461d      	movcc	r5, r3
 80067d8:	0553      	lsls	r3, r2, #21
 80067da:	d531      	bpl.n	8006840 <__ssputs_r+0xa0>
 80067dc:	4629      	mov	r1, r5
 80067de:	f7ff ff85 	bl	80066ec <_malloc_r>
 80067e2:	4606      	mov	r6, r0
 80067e4:	b950      	cbnz	r0, 80067fc <__ssputs_r+0x5c>
 80067e6:	230c      	movs	r3, #12
 80067e8:	f04f 30ff 	mov.w	r0, #4294967295
 80067ec:	f8ca 3000 	str.w	r3, [sl]
 80067f0:	89a3      	ldrh	r3, [r4, #12]
 80067f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067f6:	81a3      	strh	r3, [r4, #12]
 80067f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067fc:	464a      	mov	r2, r9
 80067fe:	6921      	ldr	r1, [r4, #16]
 8006800:	f7ff fb8a 	bl	8005f18 <memcpy>
 8006804:	89a3      	ldrh	r3, [r4, #12]
 8006806:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800680a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800680e:	81a3      	strh	r3, [r4, #12]
 8006810:	6126      	str	r6, [r4, #16]
 8006812:	444e      	add	r6, r9
 8006814:	6026      	str	r6, [r4, #0]
 8006816:	463e      	mov	r6, r7
 8006818:	6165      	str	r5, [r4, #20]
 800681a:	eba5 0509 	sub.w	r5, r5, r9
 800681e:	60a5      	str	r5, [r4, #8]
 8006820:	42be      	cmp	r6, r7
 8006822:	d900      	bls.n	8006826 <__ssputs_r+0x86>
 8006824:	463e      	mov	r6, r7
 8006826:	4632      	mov	r2, r6
 8006828:	4641      	mov	r1, r8
 800682a:	6820      	ldr	r0, [r4, #0]
 800682c:	f000 f966 	bl	8006afc <memmove>
 8006830:	68a3      	ldr	r3, [r4, #8]
 8006832:	6822      	ldr	r2, [r4, #0]
 8006834:	1b9b      	subs	r3, r3, r6
 8006836:	4432      	add	r2, r6
 8006838:	2000      	movs	r0, #0
 800683a:	60a3      	str	r3, [r4, #8]
 800683c:	6022      	str	r2, [r4, #0]
 800683e:	e7db      	b.n	80067f8 <__ssputs_r+0x58>
 8006840:	462a      	mov	r2, r5
 8006842:	f000 f981 	bl	8006b48 <_realloc_r>
 8006846:	4606      	mov	r6, r0
 8006848:	2800      	cmp	r0, #0
 800684a:	d1e1      	bne.n	8006810 <__ssputs_r+0x70>
 800684c:	4650      	mov	r0, sl
 800684e:	6921      	ldr	r1, [r4, #16]
 8006850:	f7ff ff00 	bl	8006654 <_free_r>
 8006854:	e7c7      	b.n	80067e6 <__ssputs_r+0x46>
	...

08006858 <_svfiprintf_r>:
 8006858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685c:	4698      	mov	r8, r3
 800685e:	898b      	ldrh	r3, [r1, #12]
 8006860:	4607      	mov	r7, r0
 8006862:	061b      	lsls	r3, r3, #24
 8006864:	460d      	mov	r5, r1
 8006866:	4614      	mov	r4, r2
 8006868:	b09d      	sub	sp, #116	; 0x74
 800686a:	d50e      	bpl.n	800688a <_svfiprintf_r+0x32>
 800686c:	690b      	ldr	r3, [r1, #16]
 800686e:	b963      	cbnz	r3, 800688a <_svfiprintf_r+0x32>
 8006870:	2140      	movs	r1, #64	; 0x40
 8006872:	f7ff ff3b 	bl	80066ec <_malloc_r>
 8006876:	6028      	str	r0, [r5, #0]
 8006878:	6128      	str	r0, [r5, #16]
 800687a:	b920      	cbnz	r0, 8006886 <_svfiprintf_r+0x2e>
 800687c:	230c      	movs	r3, #12
 800687e:	603b      	str	r3, [r7, #0]
 8006880:	f04f 30ff 	mov.w	r0, #4294967295
 8006884:	e0d1      	b.n	8006a2a <_svfiprintf_r+0x1d2>
 8006886:	2340      	movs	r3, #64	; 0x40
 8006888:	616b      	str	r3, [r5, #20]
 800688a:	2300      	movs	r3, #0
 800688c:	9309      	str	r3, [sp, #36]	; 0x24
 800688e:	2320      	movs	r3, #32
 8006890:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006894:	2330      	movs	r3, #48	; 0x30
 8006896:	f04f 0901 	mov.w	r9, #1
 800689a:	f8cd 800c 	str.w	r8, [sp, #12]
 800689e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006a44 <_svfiprintf_r+0x1ec>
 80068a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068a6:	4623      	mov	r3, r4
 80068a8:	469a      	mov	sl, r3
 80068aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068ae:	b10a      	cbz	r2, 80068b4 <_svfiprintf_r+0x5c>
 80068b0:	2a25      	cmp	r2, #37	; 0x25
 80068b2:	d1f9      	bne.n	80068a8 <_svfiprintf_r+0x50>
 80068b4:	ebba 0b04 	subs.w	fp, sl, r4
 80068b8:	d00b      	beq.n	80068d2 <_svfiprintf_r+0x7a>
 80068ba:	465b      	mov	r3, fp
 80068bc:	4622      	mov	r2, r4
 80068be:	4629      	mov	r1, r5
 80068c0:	4638      	mov	r0, r7
 80068c2:	f7ff ff6d 	bl	80067a0 <__ssputs_r>
 80068c6:	3001      	adds	r0, #1
 80068c8:	f000 80aa 	beq.w	8006a20 <_svfiprintf_r+0x1c8>
 80068cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068ce:	445a      	add	r2, fp
 80068d0:	9209      	str	r2, [sp, #36]	; 0x24
 80068d2:	f89a 3000 	ldrb.w	r3, [sl]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f000 80a2 	beq.w	8006a20 <_svfiprintf_r+0x1c8>
 80068dc:	2300      	movs	r3, #0
 80068de:	f04f 32ff 	mov.w	r2, #4294967295
 80068e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068e6:	f10a 0a01 	add.w	sl, sl, #1
 80068ea:	9304      	str	r3, [sp, #16]
 80068ec:	9307      	str	r3, [sp, #28]
 80068ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068f2:	931a      	str	r3, [sp, #104]	; 0x68
 80068f4:	4654      	mov	r4, sl
 80068f6:	2205      	movs	r2, #5
 80068f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068fc:	4851      	ldr	r0, [pc, #324]	; (8006a44 <_svfiprintf_r+0x1ec>)
 80068fe:	f7ff fafd 	bl	8005efc <memchr>
 8006902:	9a04      	ldr	r2, [sp, #16]
 8006904:	b9d8      	cbnz	r0, 800693e <_svfiprintf_r+0xe6>
 8006906:	06d0      	lsls	r0, r2, #27
 8006908:	bf44      	itt	mi
 800690a:	2320      	movmi	r3, #32
 800690c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006910:	0711      	lsls	r1, r2, #28
 8006912:	bf44      	itt	mi
 8006914:	232b      	movmi	r3, #43	; 0x2b
 8006916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800691a:	f89a 3000 	ldrb.w	r3, [sl]
 800691e:	2b2a      	cmp	r3, #42	; 0x2a
 8006920:	d015      	beq.n	800694e <_svfiprintf_r+0xf6>
 8006922:	4654      	mov	r4, sl
 8006924:	2000      	movs	r0, #0
 8006926:	f04f 0c0a 	mov.w	ip, #10
 800692a:	9a07      	ldr	r2, [sp, #28]
 800692c:	4621      	mov	r1, r4
 800692e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006932:	3b30      	subs	r3, #48	; 0x30
 8006934:	2b09      	cmp	r3, #9
 8006936:	d94e      	bls.n	80069d6 <_svfiprintf_r+0x17e>
 8006938:	b1b0      	cbz	r0, 8006968 <_svfiprintf_r+0x110>
 800693a:	9207      	str	r2, [sp, #28]
 800693c:	e014      	b.n	8006968 <_svfiprintf_r+0x110>
 800693e:	eba0 0308 	sub.w	r3, r0, r8
 8006942:	fa09 f303 	lsl.w	r3, r9, r3
 8006946:	4313      	orrs	r3, r2
 8006948:	46a2      	mov	sl, r4
 800694a:	9304      	str	r3, [sp, #16]
 800694c:	e7d2      	b.n	80068f4 <_svfiprintf_r+0x9c>
 800694e:	9b03      	ldr	r3, [sp, #12]
 8006950:	1d19      	adds	r1, r3, #4
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	9103      	str	r1, [sp, #12]
 8006956:	2b00      	cmp	r3, #0
 8006958:	bfbb      	ittet	lt
 800695a:	425b      	neglt	r3, r3
 800695c:	f042 0202 	orrlt.w	r2, r2, #2
 8006960:	9307      	strge	r3, [sp, #28]
 8006962:	9307      	strlt	r3, [sp, #28]
 8006964:	bfb8      	it	lt
 8006966:	9204      	strlt	r2, [sp, #16]
 8006968:	7823      	ldrb	r3, [r4, #0]
 800696a:	2b2e      	cmp	r3, #46	; 0x2e
 800696c:	d10c      	bne.n	8006988 <_svfiprintf_r+0x130>
 800696e:	7863      	ldrb	r3, [r4, #1]
 8006970:	2b2a      	cmp	r3, #42	; 0x2a
 8006972:	d135      	bne.n	80069e0 <_svfiprintf_r+0x188>
 8006974:	9b03      	ldr	r3, [sp, #12]
 8006976:	3402      	adds	r4, #2
 8006978:	1d1a      	adds	r2, r3, #4
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	9203      	str	r2, [sp, #12]
 800697e:	2b00      	cmp	r3, #0
 8006980:	bfb8      	it	lt
 8006982:	f04f 33ff 	movlt.w	r3, #4294967295
 8006986:	9305      	str	r3, [sp, #20]
 8006988:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a54 <_svfiprintf_r+0x1fc>
 800698c:	2203      	movs	r2, #3
 800698e:	4650      	mov	r0, sl
 8006990:	7821      	ldrb	r1, [r4, #0]
 8006992:	f7ff fab3 	bl	8005efc <memchr>
 8006996:	b140      	cbz	r0, 80069aa <_svfiprintf_r+0x152>
 8006998:	2340      	movs	r3, #64	; 0x40
 800699a:	eba0 000a 	sub.w	r0, r0, sl
 800699e:	fa03 f000 	lsl.w	r0, r3, r0
 80069a2:	9b04      	ldr	r3, [sp, #16]
 80069a4:	3401      	adds	r4, #1
 80069a6:	4303      	orrs	r3, r0
 80069a8:	9304      	str	r3, [sp, #16]
 80069aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069ae:	2206      	movs	r2, #6
 80069b0:	4825      	ldr	r0, [pc, #148]	; (8006a48 <_svfiprintf_r+0x1f0>)
 80069b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069b6:	f7ff faa1 	bl	8005efc <memchr>
 80069ba:	2800      	cmp	r0, #0
 80069bc:	d038      	beq.n	8006a30 <_svfiprintf_r+0x1d8>
 80069be:	4b23      	ldr	r3, [pc, #140]	; (8006a4c <_svfiprintf_r+0x1f4>)
 80069c0:	bb1b      	cbnz	r3, 8006a0a <_svfiprintf_r+0x1b2>
 80069c2:	9b03      	ldr	r3, [sp, #12]
 80069c4:	3307      	adds	r3, #7
 80069c6:	f023 0307 	bic.w	r3, r3, #7
 80069ca:	3308      	adds	r3, #8
 80069cc:	9303      	str	r3, [sp, #12]
 80069ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069d0:	4433      	add	r3, r6
 80069d2:	9309      	str	r3, [sp, #36]	; 0x24
 80069d4:	e767      	b.n	80068a6 <_svfiprintf_r+0x4e>
 80069d6:	460c      	mov	r4, r1
 80069d8:	2001      	movs	r0, #1
 80069da:	fb0c 3202 	mla	r2, ip, r2, r3
 80069de:	e7a5      	b.n	800692c <_svfiprintf_r+0xd4>
 80069e0:	2300      	movs	r3, #0
 80069e2:	f04f 0c0a 	mov.w	ip, #10
 80069e6:	4619      	mov	r1, r3
 80069e8:	3401      	adds	r4, #1
 80069ea:	9305      	str	r3, [sp, #20]
 80069ec:	4620      	mov	r0, r4
 80069ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069f2:	3a30      	subs	r2, #48	; 0x30
 80069f4:	2a09      	cmp	r2, #9
 80069f6:	d903      	bls.n	8006a00 <_svfiprintf_r+0x1a8>
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d0c5      	beq.n	8006988 <_svfiprintf_r+0x130>
 80069fc:	9105      	str	r1, [sp, #20]
 80069fe:	e7c3      	b.n	8006988 <_svfiprintf_r+0x130>
 8006a00:	4604      	mov	r4, r0
 8006a02:	2301      	movs	r3, #1
 8006a04:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a08:	e7f0      	b.n	80069ec <_svfiprintf_r+0x194>
 8006a0a:	ab03      	add	r3, sp, #12
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	462a      	mov	r2, r5
 8006a10:	4638      	mov	r0, r7
 8006a12:	4b0f      	ldr	r3, [pc, #60]	; (8006a50 <_svfiprintf_r+0x1f8>)
 8006a14:	a904      	add	r1, sp, #16
 8006a16:	f7fe f807 	bl	8004a28 <_printf_float>
 8006a1a:	1c42      	adds	r2, r0, #1
 8006a1c:	4606      	mov	r6, r0
 8006a1e:	d1d6      	bne.n	80069ce <_svfiprintf_r+0x176>
 8006a20:	89ab      	ldrh	r3, [r5, #12]
 8006a22:	065b      	lsls	r3, r3, #25
 8006a24:	f53f af2c 	bmi.w	8006880 <_svfiprintf_r+0x28>
 8006a28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a2a:	b01d      	add	sp, #116	; 0x74
 8006a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a30:	ab03      	add	r3, sp, #12
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	462a      	mov	r2, r5
 8006a36:	4638      	mov	r0, r7
 8006a38:	4b05      	ldr	r3, [pc, #20]	; (8006a50 <_svfiprintf_r+0x1f8>)
 8006a3a:	a904      	add	r1, sp, #16
 8006a3c:	f7fe fa90 	bl	8004f60 <_printf_i>
 8006a40:	e7eb      	b.n	8006a1a <_svfiprintf_r+0x1c2>
 8006a42:	bf00      	nop
 8006a44:	08007904 	.word	0x08007904
 8006a48:	0800790e 	.word	0x0800790e
 8006a4c:	08004a29 	.word	0x08004a29
 8006a50:	080067a1 	.word	0x080067a1
 8006a54:	0800790a 	.word	0x0800790a

08006a58 <_sbrk_r>:
 8006a58:	b538      	push	{r3, r4, r5, lr}
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	4d05      	ldr	r5, [pc, #20]	; (8006a74 <_sbrk_r+0x1c>)
 8006a5e:	4604      	mov	r4, r0
 8006a60:	4608      	mov	r0, r1
 8006a62:	602b      	str	r3, [r5, #0]
 8006a64:	f7fb fa1c 	bl	8001ea0 <_sbrk>
 8006a68:	1c43      	adds	r3, r0, #1
 8006a6a:	d102      	bne.n	8006a72 <_sbrk_r+0x1a>
 8006a6c:	682b      	ldr	r3, [r5, #0]
 8006a6e:	b103      	cbz	r3, 8006a72 <_sbrk_r+0x1a>
 8006a70:	6023      	str	r3, [r4, #0]
 8006a72:	bd38      	pop	{r3, r4, r5, pc}
 8006a74:	20000328 	.word	0x20000328

08006a78 <__assert_func>:
 8006a78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a7a:	4614      	mov	r4, r2
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	4b09      	ldr	r3, [pc, #36]	; (8006aa4 <__assert_func+0x2c>)
 8006a80:	4605      	mov	r5, r0
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68d8      	ldr	r0, [r3, #12]
 8006a86:	b14c      	cbz	r4, 8006a9c <__assert_func+0x24>
 8006a88:	4b07      	ldr	r3, [pc, #28]	; (8006aa8 <__assert_func+0x30>)
 8006a8a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a8e:	9100      	str	r1, [sp, #0]
 8006a90:	462b      	mov	r3, r5
 8006a92:	4906      	ldr	r1, [pc, #24]	; (8006aac <__assert_func+0x34>)
 8006a94:	f000 f80e 	bl	8006ab4 <fiprintf>
 8006a98:	f000 faa2 	bl	8006fe0 <abort>
 8006a9c:	4b04      	ldr	r3, [pc, #16]	; (8006ab0 <__assert_func+0x38>)
 8006a9e:	461c      	mov	r4, r3
 8006aa0:	e7f3      	b.n	8006a8a <__assert_func+0x12>
 8006aa2:	bf00      	nop
 8006aa4:	20000010 	.word	0x20000010
 8006aa8:	08007915 	.word	0x08007915
 8006aac:	08007922 	.word	0x08007922
 8006ab0:	08007950 	.word	0x08007950

08006ab4 <fiprintf>:
 8006ab4:	b40e      	push	{r1, r2, r3}
 8006ab6:	b503      	push	{r0, r1, lr}
 8006ab8:	4601      	mov	r1, r0
 8006aba:	ab03      	add	r3, sp, #12
 8006abc:	4805      	ldr	r0, [pc, #20]	; (8006ad4 <fiprintf+0x20>)
 8006abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ac2:	6800      	ldr	r0, [r0, #0]
 8006ac4:	9301      	str	r3, [sp, #4]
 8006ac6:	f000 f88d 	bl	8006be4 <_vfiprintf_r>
 8006aca:	b002      	add	sp, #8
 8006acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ad0:	b003      	add	sp, #12
 8006ad2:	4770      	bx	lr
 8006ad4:	20000010 	.word	0x20000010

08006ad8 <__ascii_mbtowc>:
 8006ad8:	b082      	sub	sp, #8
 8006ada:	b901      	cbnz	r1, 8006ade <__ascii_mbtowc+0x6>
 8006adc:	a901      	add	r1, sp, #4
 8006ade:	b142      	cbz	r2, 8006af2 <__ascii_mbtowc+0x1a>
 8006ae0:	b14b      	cbz	r3, 8006af6 <__ascii_mbtowc+0x1e>
 8006ae2:	7813      	ldrb	r3, [r2, #0]
 8006ae4:	600b      	str	r3, [r1, #0]
 8006ae6:	7812      	ldrb	r2, [r2, #0]
 8006ae8:	1e10      	subs	r0, r2, #0
 8006aea:	bf18      	it	ne
 8006aec:	2001      	movne	r0, #1
 8006aee:	b002      	add	sp, #8
 8006af0:	4770      	bx	lr
 8006af2:	4610      	mov	r0, r2
 8006af4:	e7fb      	b.n	8006aee <__ascii_mbtowc+0x16>
 8006af6:	f06f 0001 	mvn.w	r0, #1
 8006afa:	e7f8      	b.n	8006aee <__ascii_mbtowc+0x16>

08006afc <memmove>:
 8006afc:	4288      	cmp	r0, r1
 8006afe:	b510      	push	{r4, lr}
 8006b00:	eb01 0402 	add.w	r4, r1, r2
 8006b04:	d902      	bls.n	8006b0c <memmove+0x10>
 8006b06:	4284      	cmp	r4, r0
 8006b08:	4623      	mov	r3, r4
 8006b0a:	d807      	bhi.n	8006b1c <memmove+0x20>
 8006b0c:	1e43      	subs	r3, r0, #1
 8006b0e:	42a1      	cmp	r1, r4
 8006b10:	d008      	beq.n	8006b24 <memmove+0x28>
 8006b12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b1a:	e7f8      	b.n	8006b0e <memmove+0x12>
 8006b1c:	4601      	mov	r1, r0
 8006b1e:	4402      	add	r2, r0
 8006b20:	428a      	cmp	r2, r1
 8006b22:	d100      	bne.n	8006b26 <memmove+0x2a>
 8006b24:	bd10      	pop	{r4, pc}
 8006b26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b2e:	e7f7      	b.n	8006b20 <memmove+0x24>

08006b30 <__malloc_lock>:
 8006b30:	4801      	ldr	r0, [pc, #4]	; (8006b38 <__malloc_lock+0x8>)
 8006b32:	f000 bc15 	b.w	8007360 <__retarget_lock_acquire_recursive>
 8006b36:	bf00      	nop
 8006b38:	20000330 	.word	0x20000330

08006b3c <__malloc_unlock>:
 8006b3c:	4801      	ldr	r0, [pc, #4]	; (8006b44 <__malloc_unlock+0x8>)
 8006b3e:	f000 bc10 	b.w	8007362 <__retarget_lock_release_recursive>
 8006b42:	bf00      	nop
 8006b44:	20000330 	.word	0x20000330

08006b48 <_realloc_r>:
 8006b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4a:	4607      	mov	r7, r0
 8006b4c:	4614      	mov	r4, r2
 8006b4e:	460e      	mov	r6, r1
 8006b50:	b921      	cbnz	r1, 8006b5c <_realloc_r+0x14>
 8006b52:	4611      	mov	r1, r2
 8006b54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b58:	f7ff bdc8 	b.w	80066ec <_malloc_r>
 8006b5c:	b922      	cbnz	r2, 8006b68 <_realloc_r+0x20>
 8006b5e:	f7ff fd79 	bl	8006654 <_free_r>
 8006b62:	4625      	mov	r5, r4
 8006b64:	4628      	mov	r0, r5
 8006b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b68:	f000 fc60 	bl	800742c <_malloc_usable_size_r>
 8006b6c:	42a0      	cmp	r0, r4
 8006b6e:	d20f      	bcs.n	8006b90 <_realloc_r+0x48>
 8006b70:	4621      	mov	r1, r4
 8006b72:	4638      	mov	r0, r7
 8006b74:	f7ff fdba 	bl	80066ec <_malloc_r>
 8006b78:	4605      	mov	r5, r0
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	d0f2      	beq.n	8006b64 <_realloc_r+0x1c>
 8006b7e:	4631      	mov	r1, r6
 8006b80:	4622      	mov	r2, r4
 8006b82:	f7ff f9c9 	bl	8005f18 <memcpy>
 8006b86:	4631      	mov	r1, r6
 8006b88:	4638      	mov	r0, r7
 8006b8a:	f7ff fd63 	bl	8006654 <_free_r>
 8006b8e:	e7e9      	b.n	8006b64 <_realloc_r+0x1c>
 8006b90:	4635      	mov	r5, r6
 8006b92:	e7e7      	b.n	8006b64 <_realloc_r+0x1c>

08006b94 <__sfputc_r>:
 8006b94:	6893      	ldr	r3, [r2, #8]
 8006b96:	b410      	push	{r4}
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	6093      	str	r3, [r2, #8]
 8006b9e:	da07      	bge.n	8006bb0 <__sfputc_r+0x1c>
 8006ba0:	6994      	ldr	r4, [r2, #24]
 8006ba2:	42a3      	cmp	r3, r4
 8006ba4:	db01      	blt.n	8006baa <__sfputc_r+0x16>
 8006ba6:	290a      	cmp	r1, #10
 8006ba8:	d102      	bne.n	8006bb0 <__sfputc_r+0x1c>
 8006baa:	bc10      	pop	{r4}
 8006bac:	f000 b94a 	b.w	8006e44 <__swbuf_r>
 8006bb0:	6813      	ldr	r3, [r2, #0]
 8006bb2:	1c58      	adds	r0, r3, #1
 8006bb4:	6010      	str	r0, [r2, #0]
 8006bb6:	7019      	strb	r1, [r3, #0]
 8006bb8:	4608      	mov	r0, r1
 8006bba:	bc10      	pop	{r4}
 8006bbc:	4770      	bx	lr

08006bbe <__sfputs_r>:
 8006bbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc0:	4606      	mov	r6, r0
 8006bc2:	460f      	mov	r7, r1
 8006bc4:	4614      	mov	r4, r2
 8006bc6:	18d5      	adds	r5, r2, r3
 8006bc8:	42ac      	cmp	r4, r5
 8006bca:	d101      	bne.n	8006bd0 <__sfputs_r+0x12>
 8006bcc:	2000      	movs	r0, #0
 8006bce:	e007      	b.n	8006be0 <__sfputs_r+0x22>
 8006bd0:	463a      	mov	r2, r7
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bd8:	f7ff ffdc 	bl	8006b94 <__sfputc_r>
 8006bdc:	1c43      	adds	r3, r0, #1
 8006bde:	d1f3      	bne.n	8006bc8 <__sfputs_r+0xa>
 8006be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006be4 <_vfiprintf_r>:
 8006be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be8:	460d      	mov	r5, r1
 8006bea:	4614      	mov	r4, r2
 8006bec:	4698      	mov	r8, r3
 8006bee:	4606      	mov	r6, r0
 8006bf0:	b09d      	sub	sp, #116	; 0x74
 8006bf2:	b118      	cbz	r0, 8006bfc <_vfiprintf_r+0x18>
 8006bf4:	6983      	ldr	r3, [r0, #24]
 8006bf6:	b90b      	cbnz	r3, 8006bfc <_vfiprintf_r+0x18>
 8006bf8:	f000 fb14 	bl	8007224 <__sinit>
 8006bfc:	4b89      	ldr	r3, [pc, #548]	; (8006e24 <_vfiprintf_r+0x240>)
 8006bfe:	429d      	cmp	r5, r3
 8006c00:	d11b      	bne.n	8006c3a <_vfiprintf_r+0x56>
 8006c02:	6875      	ldr	r5, [r6, #4]
 8006c04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c06:	07d9      	lsls	r1, r3, #31
 8006c08:	d405      	bmi.n	8006c16 <_vfiprintf_r+0x32>
 8006c0a:	89ab      	ldrh	r3, [r5, #12]
 8006c0c:	059a      	lsls	r2, r3, #22
 8006c0e:	d402      	bmi.n	8006c16 <_vfiprintf_r+0x32>
 8006c10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c12:	f000 fba5 	bl	8007360 <__retarget_lock_acquire_recursive>
 8006c16:	89ab      	ldrh	r3, [r5, #12]
 8006c18:	071b      	lsls	r3, r3, #28
 8006c1a:	d501      	bpl.n	8006c20 <_vfiprintf_r+0x3c>
 8006c1c:	692b      	ldr	r3, [r5, #16]
 8006c1e:	b9eb      	cbnz	r3, 8006c5c <_vfiprintf_r+0x78>
 8006c20:	4629      	mov	r1, r5
 8006c22:	4630      	mov	r0, r6
 8006c24:	f000 f96e 	bl	8006f04 <__swsetup_r>
 8006c28:	b1c0      	cbz	r0, 8006c5c <_vfiprintf_r+0x78>
 8006c2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c2c:	07dc      	lsls	r4, r3, #31
 8006c2e:	d50e      	bpl.n	8006c4e <_vfiprintf_r+0x6a>
 8006c30:	f04f 30ff 	mov.w	r0, #4294967295
 8006c34:	b01d      	add	sp, #116	; 0x74
 8006c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c3a:	4b7b      	ldr	r3, [pc, #492]	; (8006e28 <_vfiprintf_r+0x244>)
 8006c3c:	429d      	cmp	r5, r3
 8006c3e:	d101      	bne.n	8006c44 <_vfiprintf_r+0x60>
 8006c40:	68b5      	ldr	r5, [r6, #8]
 8006c42:	e7df      	b.n	8006c04 <_vfiprintf_r+0x20>
 8006c44:	4b79      	ldr	r3, [pc, #484]	; (8006e2c <_vfiprintf_r+0x248>)
 8006c46:	429d      	cmp	r5, r3
 8006c48:	bf08      	it	eq
 8006c4a:	68f5      	ldreq	r5, [r6, #12]
 8006c4c:	e7da      	b.n	8006c04 <_vfiprintf_r+0x20>
 8006c4e:	89ab      	ldrh	r3, [r5, #12]
 8006c50:	0598      	lsls	r0, r3, #22
 8006c52:	d4ed      	bmi.n	8006c30 <_vfiprintf_r+0x4c>
 8006c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c56:	f000 fb84 	bl	8007362 <__retarget_lock_release_recursive>
 8006c5a:	e7e9      	b.n	8006c30 <_vfiprintf_r+0x4c>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c60:	2320      	movs	r3, #32
 8006c62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c66:	2330      	movs	r3, #48	; 0x30
 8006c68:	f04f 0901 	mov.w	r9, #1
 8006c6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c70:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006e30 <_vfiprintf_r+0x24c>
 8006c74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c78:	4623      	mov	r3, r4
 8006c7a:	469a      	mov	sl, r3
 8006c7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c80:	b10a      	cbz	r2, 8006c86 <_vfiprintf_r+0xa2>
 8006c82:	2a25      	cmp	r2, #37	; 0x25
 8006c84:	d1f9      	bne.n	8006c7a <_vfiprintf_r+0x96>
 8006c86:	ebba 0b04 	subs.w	fp, sl, r4
 8006c8a:	d00b      	beq.n	8006ca4 <_vfiprintf_r+0xc0>
 8006c8c:	465b      	mov	r3, fp
 8006c8e:	4622      	mov	r2, r4
 8006c90:	4629      	mov	r1, r5
 8006c92:	4630      	mov	r0, r6
 8006c94:	f7ff ff93 	bl	8006bbe <__sfputs_r>
 8006c98:	3001      	adds	r0, #1
 8006c9a:	f000 80aa 	beq.w	8006df2 <_vfiprintf_r+0x20e>
 8006c9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ca0:	445a      	add	r2, fp
 8006ca2:	9209      	str	r2, [sp, #36]	; 0x24
 8006ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f000 80a2 	beq.w	8006df2 <_vfiprintf_r+0x20e>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cb8:	f10a 0a01 	add.w	sl, sl, #1
 8006cbc:	9304      	str	r3, [sp, #16]
 8006cbe:	9307      	str	r3, [sp, #28]
 8006cc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cc4:	931a      	str	r3, [sp, #104]	; 0x68
 8006cc6:	4654      	mov	r4, sl
 8006cc8:	2205      	movs	r2, #5
 8006cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cce:	4858      	ldr	r0, [pc, #352]	; (8006e30 <_vfiprintf_r+0x24c>)
 8006cd0:	f7ff f914 	bl	8005efc <memchr>
 8006cd4:	9a04      	ldr	r2, [sp, #16]
 8006cd6:	b9d8      	cbnz	r0, 8006d10 <_vfiprintf_r+0x12c>
 8006cd8:	06d1      	lsls	r1, r2, #27
 8006cda:	bf44      	itt	mi
 8006cdc:	2320      	movmi	r3, #32
 8006cde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ce2:	0713      	lsls	r3, r2, #28
 8006ce4:	bf44      	itt	mi
 8006ce6:	232b      	movmi	r3, #43	; 0x2b
 8006ce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cec:	f89a 3000 	ldrb.w	r3, [sl]
 8006cf0:	2b2a      	cmp	r3, #42	; 0x2a
 8006cf2:	d015      	beq.n	8006d20 <_vfiprintf_r+0x13c>
 8006cf4:	4654      	mov	r4, sl
 8006cf6:	2000      	movs	r0, #0
 8006cf8:	f04f 0c0a 	mov.w	ip, #10
 8006cfc:	9a07      	ldr	r2, [sp, #28]
 8006cfe:	4621      	mov	r1, r4
 8006d00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d04:	3b30      	subs	r3, #48	; 0x30
 8006d06:	2b09      	cmp	r3, #9
 8006d08:	d94e      	bls.n	8006da8 <_vfiprintf_r+0x1c4>
 8006d0a:	b1b0      	cbz	r0, 8006d3a <_vfiprintf_r+0x156>
 8006d0c:	9207      	str	r2, [sp, #28]
 8006d0e:	e014      	b.n	8006d3a <_vfiprintf_r+0x156>
 8006d10:	eba0 0308 	sub.w	r3, r0, r8
 8006d14:	fa09 f303 	lsl.w	r3, r9, r3
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	46a2      	mov	sl, r4
 8006d1c:	9304      	str	r3, [sp, #16]
 8006d1e:	e7d2      	b.n	8006cc6 <_vfiprintf_r+0xe2>
 8006d20:	9b03      	ldr	r3, [sp, #12]
 8006d22:	1d19      	adds	r1, r3, #4
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	9103      	str	r1, [sp, #12]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	bfbb      	ittet	lt
 8006d2c:	425b      	neglt	r3, r3
 8006d2e:	f042 0202 	orrlt.w	r2, r2, #2
 8006d32:	9307      	strge	r3, [sp, #28]
 8006d34:	9307      	strlt	r3, [sp, #28]
 8006d36:	bfb8      	it	lt
 8006d38:	9204      	strlt	r2, [sp, #16]
 8006d3a:	7823      	ldrb	r3, [r4, #0]
 8006d3c:	2b2e      	cmp	r3, #46	; 0x2e
 8006d3e:	d10c      	bne.n	8006d5a <_vfiprintf_r+0x176>
 8006d40:	7863      	ldrb	r3, [r4, #1]
 8006d42:	2b2a      	cmp	r3, #42	; 0x2a
 8006d44:	d135      	bne.n	8006db2 <_vfiprintf_r+0x1ce>
 8006d46:	9b03      	ldr	r3, [sp, #12]
 8006d48:	3402      	adds	r4, #2
 8006d4a:	1d1a      	adds	r2, r3, #4
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	9203      	str	r2, [sp, #12]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	bfb8      	it	lt
 8006d54:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d58:	9305      	str	r3, [sp, #20]
 8006d5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006e40 <_vfiprintf_r+0x25c>
 8006d5e:	2203      	movs	r2, #3
 8006d60:	4650      	mov	r0, sl
 8006d62:	7821      	ldrb	r1, [r4, #0]
 8006d64:	f7ff f8ca 	bl	8005efc <memchr>
 8006d68:	b140      	cbz	r0, 8006d7c <_vfiprintf_r+0x198>
 8006d6a:	2340      	movs	r3, #64	; 0x40
 8006d6c:	eba0 000a 	sub.w	r0, r0, sl
 8006d70:	fa03 f000 	lsl.w	r0, r3, r0
 8006d74:	9b04      	ldr	r3, [sp, #16]
 8006d76:	3401      	adds	r4, #1
 8006d78:	4303      	orrs	r3, r0
 8006d7a:	9304      	str	r3, [sp, #16]
 8006d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d80:	2206      	movs	r2, #6
 8006d82:	482c      	ldr	r0, [pc, #176]	; (8006e34 <_vfiprintf_r+0x250>)
 8006d84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d88:	f7ff f8b8 	bl	8005efc <memchr>
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	d03f      	beq.n	8006e10 <_vfiprintf_r+0x22c>
 8006d90:	4b29      	ldr	r3, [pc, #164]	; (8006e38 <_vfiprintf_r+0x254>)
 8006d92:	bb1b      	cbnz	r3, 8006ddc <_vfiprintf_r+0x1f8>
 8006d94:	9b03      	ldr	r3, [sp, #12]
 8006d96:	3307      	adds	r3, #7
 8006d98:	f023 0307 	bic.w	r3, r3, #7
 8006d9c:	3308      	adds	r3, #8
 8006d9e:	9303      	str	r3, [sp, #12]
 8006da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006da2:	443b      	add	r3, r7
 8006da4:	9309      	str	r3, [sp, #36]	; 0x24
 8006da6:	e767      	b.n	8006c78 <_vfiprintf_r+0x94>
 8006da8:	460c      	mov	r4, r1
 8006daa:	2001      	movs	r0, #1
 8006dac:	fb0c 3202 	mla	r2, ip, r2, r3
 8006db0:	e7a5      	b.n	8006cfe <_vfiprintf_r+0x11a>
 8006db2:	2300      	movs	r3, #0
 8006db4:	f04f 0c0a 	mov.w	ip, #10
 8006db8:	4619      	mov	r1, r3
 8006dba:	3401      	adds	r4, #1
 8006dbc:	9305      	str	r3, [sp, #20]
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dc4:	3a30      	subs	r2, #48	; 0x30
 8006dc6:	2a09      	cmp	r2, #9
 8006dc8:	d903      	bls.n	8006dd2 <_vfiprintf_r+0x1ee>
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d0c5      	beq.n	8006d5a <_vfiprintf_r+0x176>
 8006dce:	9105      	str	r1, [sp, #20]
 8006dd0:	e7c3      	b.n	8006d5a <_vfiprintf_r+0x176>
 8006dd2:	4604      	mov	r4, r0
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dda:	e7f0      	b.n	8006dbe <_vfiprintf_r+0x1da>
 8006ddc:	ab03      	add	r3, sp, #12
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	462a      	mov	r2, r5
 8006de2:	4630      	mov	r0, r6
 8006de4:	4b15      	ldr	r3, [pc, #84]	; (8006e3c <_vfiprintf_r+0x258>)
 8006de6:	a904      	add	r1, sp, #16
 8006de8:	f7fd fe1e 	bl	8004a28 <_printf_float>
 8006dec:	4607      	mov	r7, r0
 8006dee:	1c78      	adds	r0, r7, #1
 8006df0:	d1d6      	bne.n	8006da0 <_vfiprintf_r+0x1bc>
 8006df2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006df4:	07d9      	lsls	r1, r3, #31
 8006df6:	d405      	bmi.n	8006e04 <_vfiprintf_r+0x220>
 8006df8:	89ab      	ldrh	r3, [r5, #12]
 8006dfa:	059a      	lsls	r2, r3, #22
 8006dfc:	d402      	bmi.n	8006e04 <_vfiprintf_r+0x220>
 8006dfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e00:	f000 faaf 	bl	8007362 <__retarget_lock_release_recursive>
 8006e04:	89ab      	ldrh	r3, [r5, #12]
 8006e06:	065b      	lsls	r3, r3, #25
 8006e08:	f53f af12 	bmi.w	8006c30 <_vfiprintf_r+0x4c>
 8006e0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e0e:	e711      	b.n	8006c34 <_vfiprintf_r+0x50>
 8006e10:	ab03      	add	r3, sp, #12
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	462a      	mov	r2, r5
 8006e16:	4630      	mov	r0, r6
 8006e18:	4b08      	ldr	r3, [pc, #32]	; (8006e3c <_vfiprintf_r+0x258>)
 8006e1a:	a904      	add	r1, sp, #16
 8006e1c:	f7fe f8a0 	bl	8004f60 <_printf_i>
 8006e20:	e7e4      	b.n	8006dec <_vfiprintf_r+0x208>
 8006e22:	bf00      	nop
 8006e24:	08007a7c 	.word	0x08007a7c
 8006e28:	08007a9c 	.word	0x08007a9c
 8006e2c:	08007a5c 	.word	0x08007a5c
 8006e30:	08007904 	.word	0x08007904
 8006e34:	0800790e 	.word	0x0800790e
 8006e38:	08004a29 	.word	0x08004a29
 8006e3c:	08006bbf 	.word	0x08006bbf
 8006e40:	0800790a 	.word	0x0800790a

08006e44 <__swbuf_r>:
 8006e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e46:	460e      	mov	r6, r1
 8006e48:	4614      	mov	r4, r2
 8006e4a:	4605      	mov	r5, r0
 8006e4c:	b118      	cbz	r0, 8006e56 <__swbuf_r+0x12>
 8006e4e:	6983      	ldr	r3, [r0, #24]
 8006e50:	b90b      	cbnz	r3, 8006e56 <__swbuf_r+0x12>
 8006e52:	f000 f9e7 	bl	8007224 <__sinit>
 8006e56:	4b21      	ldr	r3, [pc, #132]	; (8006edc <__swbuf_r+0x98>)
 8006e58:	429c      	cmp	r4, r3
 8006e5a:	d12b      	bne.n	8006eb4 <__swbuf_r+0x70>
 8006e5c:	686c      	ldr	r4, [r5, #4]
 8006e5e:	69a3      	ldr	r3, [r4, #24]
 8006e60:	60a3      	str	r3, [r4, #8]
 8006e62:	89a3      	ldrh	r3, [r4, #12]
 8006e64:	071a      	lsls	r2, r3, #28
 8006e66:	d52f      	bpl.n	8006ec8 <__swbuf_r+0x84>
 8006e68:	6923      	ldr	r3, [r4, #16]
 8006e6a:	b36b      	cbz	r3, 8006ec8 <__swbuf_r+0x84>
 8006e6c:	6923      	ldr	r3, [r4, #16]
 8006e6e:	6820      	ldr	r0, [r4, #0]
 8006e70:	b2f6      	uxtb	r6, r6
 8006e72:	1ac0      	subs	r0, r0, r3
 8006e74:	6963      	ldr	r3, [r4, #20]
 8006e76:	4637      	mov	r7, r6
 8006e78:	4283      	cmp	r3, r0
 8006e7a:	dc04      	bgt.n	8006e86 <__swbuf_r+0x42>
 8006e7c:	4621      	mov	r1, r4
 8006e7e:	4628      	mov	r0, r5
 8006e80:	f000 f93c 	bl	80070fc <_fflush_r>
 8006e84:	bb30      	cbnz	r0, 8006ed4 <__swbuf_r+0x90>
 8006e86:	68a3      	ldr	r3, [r4, #8]
 8006e88:	3001      	adds	r0, #1
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	60a3      	str	r3, [r4, #8]
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	1c5a      	adds	r2, r3, #1
 8006e92:	6022      	str	r2, [r4, #0]
 8006e94:	701e      	strb	r6, [r3, #0]
 8006e96:	6963      	ldr	r3, [r4, #20]
 8006e98:	4283      	cmp	r3, r0
 8006e9a:	d004      	beq.n	8006ea6 <__swbuf_r+0x62>
 8006e9c:	89a3      	ldrh	r3, [r4, #12]
 8006e9e:	07db      	lsls	r3, r3, #31
 8006ea0:	d506      	bpl.n	8006eb0 <__swbuf_r+0x6c>
 8006ea2:	2e0a      	cmp	r6, #10
 8006ea4:	d104      	bne.n	8006eb0 <__swbuf_r+0x6c>
 8006ea6:	4621      	mov	r1, r4
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	f000 f927 	bl	80070fc <_fflush_r>
 8006eae:	b988      	cbnz	r0, 8006ed4 <__swbuf_r+0x90>
 8006eb0:	4638      	mov	r0, r7
 8006eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eb4:	4b0a      	ldr	r3, [pc, #40]	; (8006ee0 <__swbuf_r+0x9c>)
 8006eb6:	429c      	cmp	r4, r3
 8006eb8:	d101      	bne.n	8006ebe <__swbuf_r+0x7a>
 8006eba:	68ac      	ldr	r4, [r5, #8]
 8006ebc:	e7cf      	b.n	8006e5e <__swbuf_r+0x1a>
 8006ebe:	4b09      	ldr	r3, [pc, #36]	; (8006ee4 <__swbuf_r+0xa0>)
 8006ec0:	429c      	cmp	r4, r3
 8006ec2:	bf08      	it	eq
 8006ec4:	68ec      	ldreq	r4, [r5, #12]
 8006ec6:	e7ca      	b.n	8006e5e <__swbuf_r+0x1a>
 8006ec8:	4621      	mov	r1, r4
 8006eca:	4628      	mov	r0, r5
 8006ecc:	f000 f81a 	bl	8006f04 <__swsetup_r>
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	d0cb      	beq.n	8006e6c <__swbuf_r+0x28>
 8006ed4:	f04f 37ff 	mov.w	r7, #4294967295
 8006ed8:	e7ea      	b.n	8006eb0 <__swbuf_r+0x6c>
 8006eda:	bf00      	nop
 8006edc:	08007a7c 	.word	0x08007a7c
 8006ee0:	08007a9c 	.word	0x08007a9c
 8006ee4:	08007a5c 	.word	0x08007a5c

08006ee8 <__ascii_wctomb>:
 8006ee8:	4603      	mov	r3, r0
 8006eea:	4608      	mov	r0, r1
 8006eec:	b141      	cbz	r1, 8006f00 <__ascii_wctomb+0x18>
 8006eee:	2aff      	cmp	r2, #255	; 0xff
 8006ef0:	d904      	bls.n	8006efc <__ascii_wctomb+0x14>
 8006ef2:	228a      	movs	r2, #138	; 0x8a
 8006ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef8:	601a      	str	r2, [r3, #0]
 8006efa:	4770      	bx	lr
 8006efc:	2001      	movs	r0, #1
 8006efe:	700a      	strb	r2, [r1, #0]
 8006f00:	4770      	bx	lr
	...

08006f04 <__swsetup_r>:
 8006f04:	4b32      	ldr	r3, [pc, #200]	; (8006fd0 <__swsetup_r+0xcc>)
 8006f06:	b570      	push	{r4, r5, r6, lr}
 8006f08:	681d      	ldr	r5, [r3, #0]
 8006f0a:	4606      	mov	r6, r0
 8006f0c:	460c      	mov	r4, r1
 8006f0e:	b125      	cbz	r5, 8006f1a <__swsetup_r+0x16>
 8006f10:	69ab      	ldr	r3, [r5, #24]
 8006f12:	b913      	cbnz	r3, 8006f1a <__swsetup_r+0x16>
 8006f14:	4628      	mov	r0, r5
 8006f16:	f000 f985 	bl	8007224 <__sinit>
 8006f1a:	4b2e      	ldr	r3, [pc, #184]	; (8006fd4 <__swsetup_r+0xd0>)
 8006f1c:	429c      	cmp	r4, r3
 8006f1e:	d10f      	bne.n	8006f40 <__swsetup_r+0x3c>
 8006f20:	686c      	ldr	r4, [r5, #4]
 8006f22:	89a3      	ldrh	r3, [r4, #12]
 8006f24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f28:	0719      	lsls	r1, r3, #28
 8006f2a:	d42c      	bmi.n	8006f86 <__swsetup_r+0x82>
 8006f2c:	06dd      	lsls	r5, r3, #27
 8006f2e:	d411      	bmi.n	8006f54 <__swsetup_r+0x50>
 8006f30:	2309      	movs	r3, #9
 8006f32:	6033      	str	r3, [r6, #0]
 8006f34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f38:	f04f 30ff 	mov.w	r0, #4294967295
 8006f3c:	81a3      	strh	r3, [r4, #12]
 8006f3e:	e03e      	b.n	8006fbe <__swsetup_r+0xba>
 8006f40:	4b25      	ldr	r3, [pc, #148]	; (8006fd8 <__swsetup_r+0xd4>)
 8006f42:	429c      	cmp	r4, r3
 8006f44:	d101      	bne.n	8006f4a <__swsetup_r+0x46>
 8006f46:	68ac      	ldr	r4, [r5, #8]
 8006f48:	e7eb      	b.n	8006f22 <__swsetup_r+0x1e>
 8006f4a:	4b24      	ldr	r3, [pc, #144]	; (8006fdc <__swsetup_r+0xd8>)
 8006f4c:	429c      	cmp	r4, r3
 8006f4e:	bf08      	it	eq
 8006f50:	68ec      	ldreq	r4, [r5, #12]
 8006f52:	e7e6      	b.n	8006f22 <__swsetup_r+0x1e>
 8006f54:	0758      	lsls	r0, r3, #29
 8006f56:	d512      	bpl.n	8006f7e <__swsetup_r+0x7a>
 8006f58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f5a:	b141      	cbz	r1, 8006f6e <__swsetup_r+0x6a>
 8006f5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f60:	4299      	cmp	r1, r3
 8006f62:	d002      	beq.n	8006f6a <__swsetup_r+0x66>
 8006f64:	4630      	mov	r0, r6
 8006f66:	f7ff fb75 	bl	8006654 <_free_r>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	6363      	str	r3, [r4, #52]	; 0x34
 8006f6e:	89a3      	ldrh	r3, [r4, #12]
 8006f70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f74:	81a3      	strh	r3, [r4, #12]
 8006f76:	2300      	movs	r3, #0
 8006f78:	6063      	str	r3, [r4, #4]
 8006f7a:	6923      	ldr	r3, [r4, #16]
 8006f7c:	6023      	str	r3, [r4, #0]
 8006f7e:	89a3      	ldrh	r3, [r4, #12]
 8006f80:	f043 0308 	orr.w	r3, r3, #8
 8006f84:	81a3      	strh	r3, [r4, #12]
 8006f86:	6923      	ldr	r3, [r4, #16]
 8006f88:	b94b      	cbnz	r3, 8006f9e <__swsetup_r+0x9a>
 8006f8a:	89a3      	ldrh	r3, [r4, #12]
 8006f8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f94:	d003      	beq.n	8006f9e <__swsetup_r+0x9a>
 8006f96:	4621      	mov	r1, r4
 8006f98:	4630      	mov	r0, r6
 8006f9a:	f000 fa07 	bl	80073ac <__smakebuf_r>
 8006f9e:	89a0      	ldrh	r0, [r4, #12]
 8006fa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fa4:	f010 0301 	ands.w	r3, r0, #1
 8006fa8:	d00a      	beq.n	8006fc0 <__swsetup_r+0xbc>
 8006faa:	2300      	movs	r3, #0
 8006fac:	60a3      	str	r3, [r4, #8]
 8006fae:	6963      	ldr	r3, [r4, #20]
 8006fb0:	425b      	negs	r3, r3
 8006fb2:	61a3      	str	r3, [r4, #24]
 8006fb4:	6923      	ldr	r3, [r4, #16]
 8006fb6:	b943      	cbnz	r3, 8006fca <__swsetup_r+0xc6>
 8006fb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006fbc:	d1ba      	bne.n	8006f34 <__swsetup_r+0x30>
 8006fbe:	bd70      	pop	{r4, r5, r6, pc}
 8006fc0:	0781      	lsls	r1, r0, #30
 8006fc2:	bf58      	it	pl
 8006fc4:	6963      	ldrpl	r3, [r4, #20]
 8006fc6:	60a3      	str	r3, [r4, #8]
 8006fc8:	e7f4      	b.n	8006fb4 <__swsetup_r+0xb0>
 8006fca:	2000      	movs	r0, #0
 8006fcc:	e7f7      	b.n	8006fbe <__swsetup_r+0xba>
 8006fce:	bf00      	nop
 8006fd0:	20000010 	.word	0x20000010
 8006fd4:	08007a7c 	.word	0x08007a7c
 8006fd8:	08007a9c 	.word	0x08007a9c
 8006fdc:	08007a5c 	.word	0x08007a5c

08006fe0 <abort>:
 8006fe0:	2006      	movs	r0, #6
 8006fe2:	b508      	push	{r3, lr}
 8006fe4:	f000 fa52 	bl	800748c <raise>
 8006fe8:	2001      	movs	r0, #1
 8006fea:	f7fa fee6 	bl	8001dba <_exit>
	...

08006ff0 <__sflush_r>:
 8006ff0:	898a      	ldrh	r2, [r1, #12]
 8006ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff6:	4605      	mov	r5, r0
 8006ff8:	0710      	lsls	r0, r2, #28
 8006ffa:	460c      	mov	r4, r1
 8006ffc:	d458      	bmi.n	80070b0 <__sflush_r+0xc0>
 8006ffe:	684b      	ldr	r3, [r1, #4]
 8007000:	2b00      	cmp	r3, #0
 8007002:	dc05      	bgt.n	8007010 <__sflush_r+0x20>
 8007004:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007006:	2b00      	cmp	r3, #0
 8007008:	dc02      	bgt.n	8007010 <__sflush_r+0x20>
 800700a:	2000      	movs	r0, #0
 800700c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007010:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007012:	2e00      	cmp	r6, #0
 8007014:	d0f9      	beq.n	800700a <__sflush_r+0x1a>
 8007016:	2300      	movs	r3, #0
 8007018:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800701c:	682f      	ldr	r7, [r5, #0]
 800701e:	602b      	str	r3, [r5, #0]
 8007020:	d032      	beq.n	8007088 <__sflush_r+0x98>
 8007022:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007024:	89a3      	ldrh	r3, [r4, #12]
 8007026:	075a      	lsls	r2, r3, #29
 8007028:	d505      	bpl.n	8007036 <__sflush_r+0x46>
 800702a:	6863      	ldr	r3, [r4, #4]
 800702c:	1ac0      	subs	r0, r0, r3
 800702e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007030:	b10b      	cbz	r3, 8007036 <__sflush_r+0x46>
 8007032:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007034:	1ac0      	subs	r0, r0, r3
 8007036:	2300      	movs	r3, #0
 8007038:	4602      	mov	r2, r0
 800703a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800703c:	4628      	mov	r0, r5
 800703e:	6a21      	ldr	r1, [r4, #32]
 8007040:	47b0      	blx	r6
 8007042:	1c43      	adds	r3, r0, #1
 8007044:	89a3      	ldrh	r3, [r4, #12]
 8007046:	d106      	bne.n	8007056 <__sflush_r+0x66>
 8007048:	6829      	ldr	r1, [r5, #0]
 800704a:	291d      	cmp	r1, #29
 800704c:	d82c      	bhi.n	80070a8 <__sflush_r+0xb8>
 800704e:	4a2a      	ldr	r2, [pc, #168]	; (80070f8 <__sflush_r+0x108>)
 8007050:	40ca      	lsrs	r2, r1
 8007052:	07d6      	lsls	r6, r2, #31
 8007054:	d528      	bpl.n	80070a8 <__sflush_r+0xb8>
 8007056:	2200      	movs	r2, #0
 8007058:	6062      	str	r2, [r4, #4]
 800705a:	6922      	ldr	r2, [r4, #16]
 800705c:	04d9      	lsls	r1, r3, #19
 800705e:	6022      	str	r2, [r4, #0]
 8007060:	d504      	bpl.n	800706c <__sflush_r+0x7c>
 8007062:	1c42      	adds	r2, r0, #1
 8007064:	d101      	bne.n	800706a <__sflush_r+0x7a>
 8007066:	682b      	ldr	r3, [r5, #0]
 8007068:	b903      	cbnz	r3, 800706c <__sflush_r+0x7c>
 800706a:	6560      	str	r0, [r4, #84]	; 0x54
 800706c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800706e:	602f      	str	r7, [r5, #0]
 8007070:	2900      	cmp	r1, #0
 8007072:	d0ca      	beq.n	800700a <__sflush_r+0x1a>
 8007074:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007078:	4299      	cmp	r1, r3
 800707a:	d002      	beq.n	8007082 <__sflush_r+0x92>
 800707c:	4628      	mov	r0, r5
 800707e:	f7ff fae9 	bl	8006654 <_free_r>
 8007082:	2000      	movs	r0, #0
 8007084:	6360      	str	r0, [r4, #52]	; 0x34
 8007086:	e7c1      	b.n	800700c <__sflush_r+0x1c>
 8007088:	6a21      	ldr	r1, [r4, #32]
 800708a:	2301      	movs	r3, #1
 800708c:	4628      	mov	r0, r5
 800708e:	47b0      	blx	r6
 8007090:	1c41      	adds	r1, r0, #1
 8007092:	d1c7      	bne.n	8007024 <__sflush_r+0x34>
 8007094:	682b      	ldr	r3, [r5, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d0c4      	beq.n	8007024 <__sflush_r+0x34>
 800709a:	2b1d      	cmp	r3, #29
 800709c:	d001      	beq.n	80070a2 <__sflush_r+0xb2>
 800709e:	2b16      	cmp	r3, #22
 80070a0:	d101      	bne.n	80070a6 <__sflush_r+0xb6>
 80070a2:	602f      	str	r7, [r5, #0]
 80070a4:	e7b1      	b.n	800700a <__sflush_r+0x1a>
 80070a6:	89a3      	ldrh	r3, [r4, #12]
 80070a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ac:	81a3      	strh	r3, [r4, #12]
 80070ae:	e7ad      	b.n	800700c <__sflush_r+0x1c>
 80070b0:	690f      	ldr	r7, [r1, #16]
 80070b2:	2f00      	cmp	r7, #0
 80070b4:	d0a9      	beq.n	800700a <__sflush_r+0x1a>
 80070b6:	0793      	lsls	r3, r2, #30
 80070b8:	bf18      	it	ne
 80070ba:	2300      	movne	r3, #0
 80070bc:	680e      	ldr	r6, [r1, #0]
 80070be:	bf08      	it	eq
 80070c0:	694b      	ldreq	r3, [r1, #20]
 80070c2:	eba6 0807 	sub.w	r8, r6, r7
 80070c6:	600f      	str	r7, [r1, #0]
 80070c8:	608b      	str	r3, [r1, #8]
 80070ca:	f1b8 0f00 	cmp.w	r8, #0
 80070ce:	dd9c      	ble.n	800700a <__sflush_r+0x1a>
 80070d0:	4643      	mov	r3, r8
 80070d2:	463a      	mov	r2, r7
 80070d4:	4628      	mov	r0, r5
 80070d6:	6a21      	ldr	r1, [r4, #32]
 80070d8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80070da:	47b0      	blx	r6
 80070dc:	2800      	cmp	r0, #0
 80070de:	dc06      	bgt.n	80070ee <__sflush_r+0xfe>
 80070e0:	89a3      	ldrh	r3, [r4, #12]
 80070e2:	f04f 30ff 	mov.w	r0, #4294967295
 80070e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ea:	81a3      	strh	r3, [r4, #12]
 80070ec:	e78e      	b.n	800700c <__sflush_r+0x1c>
 80070ee:	4407      	add	r7, r0
 80070f0:	eba8 0800 	sub.w	r8, r8, r0
 80070f4:	e7e9      	b.n	80070ca <__sflush_r+0xda>
 80070f6:	bf00      	nop
 80070f8:	20400001 	.word	0x20400001

080070fc <_fflush_r>:
 80070fc:	b538      	push	{r3, r4, r5, lr}
 80070fe:	690b      	ldr	r3, [r1, #16]
 8007100:	4605      	mov	r5, r0
 8007102:	460c      	mov	r4, r1
 8007104:	b913      	cbnz	r3, 800710c <_fflush_r+0x10>
 8007106:	2500      	movs	r5, #0
 8007108:	4628      	mov	r0, r5
 800710a:	bd38      	pop	{r3, r4, r5, pc}
 800710c:	b118      	cbz	r0, 8007116 <_fflush_r+0x1a>
 800710e:	6983      	ldr	r3, [r0, #24]
 8007110:	b90b      	cbnz	r3, 8007116 <_fflush_r+0x1a>
 8007112:	f000 f887 	bl	8007224 <__sinit>
 8007116:	4b14      	ldr	r3, [pc, #80]	; (8007168 <_fflush_r+0x6c>)
 8007118:	429c      	cmp	r4, r3
 800711a:	d11b      	bne.n	8007154 <_fflush_r+0x58>
 800711c:	686c      	ldr	r4, [r5, #4]
 800711e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0ef      	beq.n	8007106 <_fflush_r+0xa>
 8007126:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007128:	07d0      	lsls	r0, r2, #31
 800712a:	d404      	bmi.n	8007136 <_fflush_r+0x3a>
 800712c:	0599      	lsls	r1, r3, #22
 800712e:	d402      	bmi.n	8007136 <_fflush_r+0x3a>
 8007130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007132:	f000 f915 	bl	8007360 <__retarget_lock_acquire_recursive>
 8007136:	4628      	mov	r0, r5
 8007138:	4621      	mov	r1, r4
 800713a:	f7ff ff59 	bl	8006ff0 <__sflush_r>
 800713e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007140:	4605      	mov	r5, r0
 8007142:	07da      	lsls	r2, r3, #31
 8007144:	d4e0      	bmi.n	8007108 <_fflush_r+0xc>
 8007146:	89a3      	ldrh	r3, [r4, #12]
 8007148:	059b      	lsls	r3, r3, #22
 800714a:	d4dd      	bmi.n	8007108 <_fflush_r+0xc>
 800714c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800714e:	f000 f908 	bl	8007362 <__retarget_lock_release_recursive>
 8007152:	e7d9      	b.n	8007108 <_fflush_r+0xc>
 8007154:	4b05      	ldr	r3, [pc, #20]	; (800716c <_fflush_r+0x70>)
 8007156:	429c      	cmp	r4, r3
 8007158:	d101      	bne.n	800715e <_fflush_r+0x62>
 800715a:	68ac      	ldr	r4, [r5, #8]
 800715c:	e7df      	b.n	800711e <_fflush_r+0x22>
 800715e:	4b04      	ldr	r3, [pc, #16]	; (8007170 <_fflush_r+0x74>)
 8007160:	429c      	cmp	r4, r3
 8007162:	bf08      	it	eq
 8007164:	68ec      	ldreq	r4, [r5, #12]
 8007166:	e7da      	b.n	800711e <_fflush_r+0x22>
 8007168:	08007a7c 	.word	0x08007a7c
 800716c:	08007a9c 	.word	0x08007a9c
 8007170:	08007a5c 	.word	0x08007a5c

08007174 <std>:
 8007174:	2300      	movs	r3, #0
 8007176:	b510      	push	{r4, lr}
 8007178:	4604      	mov	r4, r0
 800717a:	e9c0 3300 	strd	r3, r3, [r0]
 800717e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007182:	6083      	str	r3, [r0, #8]
 8007184:	8181      	strh	r1, [r0, #12]
 8007186:	6643      	str	r3, [r0, #100]	; 0x64
 8007188:	81c2      	strh	r2, [r0, #14]
 800718a:	6183      	str	r3, [r0, #24]
 800718c:	4619      	mov	r1, r3
 800718e:	2208      	movs	r2, #8
 8007190:	305c      	adds	r0, #92	; 0x5c
 8007192:	f7fd fba3 	bl	80048dc <memset>
 8007196:	4b05      	ldr	r3, [pc, #20]	; (80071ac <std+0x38>)
 8007198:	6224      	str	r4, [r4, #32]
 800719a:	6263      	str	r3, [r4, #36]	; 0x24
 800719c:	4b04      	ldr	r3, [pc, #16]	; (80071b0 <std+0x3c>)
 800719e:	62a3      	str	r3, [r4, #40]	; 0x28
 80071a0:	4b04      	ldr	r3, [pc, #16]	; (80071b4 <std+0x40>)
 80071a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071a4:	4b04      	ldr	r3, [pc, #16]	; (80071b8 <std+0x44>)
 80071a6:	6323      	str	r3, [r4, #48]	; 0x30
 80071a8:	bd10      	pop	{r4, pc}
 80071aa:	bf00      	nop
 80071ac:	080074c5 	.word	0x080074c5
 80071b0:	080074e7 	.word	0x080074e7
 80071b4:	0800751f 	.word	0x0800751f
 80071b8:	08007543 	.word	0x08007543

080071bc <_cleanup_r>:
 80071bc:	4901      	ldr	r1, [pc, #4]	; (80071c4 <_cleanup_r+0x8>)
 80071be:	f000 b8af 	b.w	8007320 <_fwalk_reent>
 80071c2:	bf00      	nop
 80071c4:	080070fd 	.word	0x080070fd

080071c8 <__sfmoreglue>:
 80071c8:	b570      	push	{r4, r5, r6, lr}
 80071ca:	2568      	movs	r5, #104	; 0x68
 80071cc:	1e4a      	subs	r2, r1, #1
 80071ce:	4355      	muls	r5, r2
 80071d0:	460e      	mov	r6, r1
 80071d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80071d6:	f7ff fa89 	bl	80066ec <_malloc_r>
 80071da:	4604      	mov	r4, r0
 80071dc:	b140      	cbz	r0, 80071f0 <__sfmoreglue+0x28>
 80071de:	2100      	movs	r1, #0
 80071e0:	e9c0 1600 	strd	r1, r6, [r0]
 80071e4:	300c      	adds	r0, #12
 80071e6:	60a0      	str	r0, [r4, #8]
 80071e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80071ec:	f7fd fb76 	bl	80048dc <memset>
 80071f0:	4620      	mov	r0, r4
 80071f2:	bd70      	pop	{r4, r5, r6, pc}

080071f4 <__sfp_lock_acquire>:
 80071f4:	4801      	ldr	r0, [pc, #4]	; (80071fc <__sfp_lock_acquire+0x8>)
 80071f6:	f000 b8b3 	b.w	8007360 <__retarget_lock_acquire_recursive>
 80071fa:	bf00      	nop
 80071fc:	20000334 	.word	0x20000334

08007200 <__sfp_lock_release>:
 8007200:	4801      	ldr	r0, [pc, #4]	; (8007208 <__sfp_lock_release+0x8>)
 8007202:	f000 b8ae 	b.w	8007362 <__retarget_lock_release_recursive>
 8007206:	bf00      	nop
 8007208:	20000334 	.word	0x20000334

0800720c <__sinit_lock_acquire>:
 800720c:	4801      	ldr	r0, [pc, #4]	; (8007214 <__sinit_lock_acquire+0x8>)
 800720e:	f000 b8a7 	b.w	8007360 <__retarget_lock_acquire_recursive>
 8007212:	bf00      	nop
 8007214:	2000032f 	.word	0x2000032f

08007218 <__sinit_lock_release>:
 8007218:	4801      	ldr	r0, [pc, #4]	; (8007220 <__sinit_lock_release+0x8>)
 800721a:	f000 b8a2 	b.w	8007362 <__retarget_lock_release_recursive>
 800721e:	bf00      	nop
 8007220:	2000032f 	.word	0x2000032f

08007224 <__sinit>:
 8007224:	b510      	push	{r4, lr}
 8007226:	4604      	mov	r4, r0
 8007228:	f7ff fff0 	bl	800720c <__sinit_lock_acquire>
 800722c:	69a3      	ldr	r3, [r4, #24]
 800722e:	b11b      	cbz	r3, 8007238 <__sinit+0x14>
 8007230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007234:	f7ff bff0 	b.w	8007218 <__sinit_lock_release>
 8007238:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800723c:	6523      	str	r3, [r4, #80]	; 0x50
 800723e:	4b13      	ldr	r3, [pc, #76]	; (800728c <__sinit+0x68>)
 8007240:	4a13      	ldr	r2, [pc, #76]	; (8007290 <__sinit+0x6c>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	62a2      	str	r2, [r4, #40]	; 0x28
 8007246:	42a3      	cmp	r3, r4
 8007248:	bf08      	it	eq
 800724a:	2301      	moveq	r3, #1
 800724c:	4620      	mov	r0, r4
 800724e:	bf08      	it	eq
 8007250:	61a3      	streq	r3, [r4, #24]
 8007252:	f000 f81f 	bl	8007294 <__sfp>
 8007256:	6060      	str	r0, [r4, #4]
 8007258:	4620      	mov	r0, r4
 800725a:	f000 f81b 	bl	8007294 <__sfp>
 800725e:	60a0      	str	r0, [r4, #8]
 8007260:	4620      	mov	r0, r4
 8007262:	f000 f817 	bl	8007294 <__sfp>
 8007266:	2200      	movs	r2, #0
 8007268:	2104      	movs	r1, #4
 800726a:	60e0      	str	r0, [r4, #12]
 800726c:	6860      	ldr	r0, [r4, #4]
 800726e:	f7ff ff81 	bl	8007174 <std>
 8007272:	2201      	movs	r2, #1
 8007274:	2109      	movs	r1, #9
 8007276:	68a0      	ldr	r0, [r4, #8]
 8007278:	f7ff ff7c 	bl	8007174 <std>
 800727c:	2202      	movs	r2, #2
 800727e:	2112      	movs	r1, #18
 8007280:	68e0      	ldr	r0, [r4, #12]
 8007282:	f7ff ff77 	bl	8007174 <std>
 8007286:	2301      	movs	r3, #1
 8007288:	61a3      	str	r3, [r4, #24]
 800728a:	e7d1      	b.n	8007230 <__sinit+0xc>
 800728c:	080076dc 	.word	0x080076dc
 8007290:	080071bd 	.word	0x080071bd

08007294 <__sfp>:
 8007294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007296:	4607      	mov	r7, r0
 8007298:	f7ff ffac 	bl	80071f4 <__sfp_lock_acquire>
 800729c:	4b1e      	ldr	r3, [pc, #120]	; (8007318 <__sfp+0x84>)
 800729e:	681e      	ldr	r6, [r3, #0]
 80072a0:	69b3      	ldr	r3, [r6, #24]
 80072a2:	b913      	cbnz	r3, 80072aa <__sfp+0x16>
 80072a4:	4630      	mov	r0, r6
 80072a6:	f7ff ffbd 	bl	8007224 <__sinit>
 80072aa:	3648      	adds	r6, #72	; 0x48
 80072ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80072b0:	3b01      	subs	r3, #1
 80072b2:	d503      	bpl.n	80072bc <__sfp+0x28>
 80072b4:	6833      	ldr	r3, [r6, #0]
 80072b6:	b30b      	cbz	r3, 80072fc <__sfp+0x68>
 80072b8:	6836      	ldr	r6, [r6, #0]
 80072ba:	e7f7      	b.n	80072ac <__sfp+0x18>
 80072bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80072c0:	b9d5      	cbnz	r5, 80072f8 <__sfp+0x64>
 80072c2:	4b16      	ldr	r3, [pc, #88]	; (800731c <__sfp+0x88>)
 80072c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80072c8:	60e3      	str	r3, [r4, #12]
 80072ca:	6665      	str	r5, [r4, #100]	; 0x64
 80072cc:	f000 f847 	bl	800735e <__retarget_lock_init_recursive>
 80072d0:	f7ff ff96 	bl	8007200 <__sfp_lock_release>
 80072d4:	2208      	movs	r2, #8
 80072d6:	4629      	mov	r1, r5
 80072d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80072dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80072e0:	6025      	str	r5, [r4, #0]
 80072e2:	61a5      	str	r5, [r4, #24]
 80072e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80072e8:	f7fd faf8 	bl	80048dc <memset>
 80072ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80072f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80072f4:	4620      	mov	r0, r4
 80072f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072f8:	3468      	adds	r4, #104	; 0x68
 80072fa:	e7d9      	b.n	80072b0 <__sfp+0x1c>
 80072fc:	2104      	movs	r1, #4
 80072fe:	4638      	mov	r0, r7
 8007300:	f7ff ff62 	bl	80071c8 <__sfmoreglue>
 8007304:	4604      	mov	r4, r0
 8007306:	6030      	str	r0, [r6, #0]
 8007308:	2800      	cmp	r0, #0
 800730a:	d1d5      	bne.n	80072b8 <__sfp+0x24>
 800730c:	f7ff ff78 	bl	8007200 <__sfp_lock_release>
 8007310:	230c      	movs	r3, #12
 8007312:	603b      	str	r3, [r7, #0]
 8007314:	e7ee      	b.n	80072f4 <__sfp+0x60>
 8007316:	bf00      	nop
 8007318:	080076dc 	.word	0x080076dc
 800731c:	ffff0001 	.word	0xffff0001

08007320 <_fwalk_reent>:
 8007320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007324:	4606      	mov	r6, r0
 8007326:	4688      	mov	r8, r1
 8007328:	2700      	movs	r7, #0
 800732a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800732e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007332:	f1b9 0901 	subs.w	r9, r9, #1
 8007336:	d505      	bpl.n	8007344 <_fwalk_reent+0x24>
 8007338:	6824      	ldr	r4, [r4, #0]
 800733a:	2c00      	cmp	r4, #0
 800733c:	d1f7      	bne.n	800732e <_fwalk_reent+0xe>
 800733e:	4638      	mov	r0, r7
 8007340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007344:	89ab      	ldrh	r3, [r5, #12]
 8007346:	2b01      	cmp	r3, #1
 8007348:	d907      	bls.n	800735a <_fwalk_reent+0x3a>
 800734a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800734e:	3301      	adds	r3, #1
 8007350:	d003      	beq.n	800735a <_fwalk_reent+0x3a>
 8007352:	4629      	mov	r1, r5
 8007354:	4630      	mov	r0, r6
 8007356:	47c0      	blx	r8
 8007358:	4307      	orrs	r7, r0
 800735a:	3568      	adds	r5, #104	; 0x68
 800735c:	e7e9      	b.n	8007332 <_fwalk_reent+0x12>

0800735e <__retarget_lock_init_recursive>:
 800735e:	4770      	bx	lr

08007360 <__retarget_lock_acquire_recursive>:
 8007360:	4770      	bx	lr

08007362 <__retarget_lock_release_recursive>:
 8007362:	4770      	bx	lr

08007364 <__swhatbuf_r>:
 8007364:	b570      	push	{r4, r5, r6, lr}
 8007366:	460e      	mov	r6, r1
 8007368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800736c:	4614      	mov	r4, r2
 800736e:	2900      	cmp	r1, #0
 8007370:	461d      	mov	r5, r3
 8007372:	b096      	sub	sp, #88	; 0x58
 8007374:	da07      	bge.n	8007386 <__swhatbuf_r+0x22>
 8007376:	2300      	movs	r3, #0
 8007378:	602b      	str	r3, [r5, #0]
 800737a:	89b3      	ldrh	r3, [r6, #12]
 800737c:	061a      	lsls	r2, r3, #24
 800737e:	d410      	bmi.n	80073a2 <__swhatbuf_r+0x3e>
 8007380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007384:	e00e      	b.n	80073a4 <__swhatbuf_r+0x40>
 8007386:	466a      	mov	r2, sp
 8007388:	f000 f902 	bl	8007590 <_fstat_r>
 800738c:	2800      	cmp	r0, #0
 800738e:	dbf2      	blt.n	8007376 <__swhatbuf_r+0x12>
 8007390:	9a01      	ldr	r2, [sp, #4]
 8007392:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007396:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800739a:	425a      	negs	r2, r3
 800739c:	415a      	adcs	r2, r3
 800739e:	602a      	str	r2, [r5, #0]
 80073a0:	e7ee      	b.n	8007380 <__swhatbuf_r+0x1c>
 80073a2:	2340      	movs	r3, #64	; 0x40
 80073a4:	2000      	movs	r0, #0
 80073a6:	6023      	str	r3, [r4, #0]
 80073a8:	b016      	add	sp, #88	; 0x58
 80073aa:	bd70      	pop	{r4, r5, r6, pc}

080073ac <__smakebuf_r>:
 80073ac:	898b      	ldrh	r3, [r1, #12]
 80073ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80073b0:	079d      	lsls	r5, r3, #30
 80073b2:	4606      	mov	r6, r0
 80073b4:	460c      	mov	r4, r1
 80073b6:	d507      	bpl.n	80073c8 <__smakebuf_r+0x1c>
 80073b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80073bc:	6023      	str	r3, [r4, #0]
 80073be:	6123      	str	r3, [r4, #16]
 80073c0:	2301      	movs	r3, #1
 80073c2:	6163      	str	r3, [r4, #20]
 80073c4:	b002      	add	sp, #8
 80073c6:	bd70      	pop	{r4, r5, r6, pc}
 80073c8:	466a      	mov	r2, sp
 80073ca:	ab01      	add	r3, sp, #4
 80073cc:	f7ff ffca 	bl	8007364 <__swhatbuf_r>
 80073d0:	9900      	ldr	r1, [sp, #0]
 80073d2:	4605      	mov	r5, r0
 80073d4:	4630      	mov	r0, r6
 80073d6:	f7ff f989 	bl	80066ec <_malloc_r>
 80073da:	b948      	cbnz	r0, 80073f0 <__smakebuf_r+0x44>
 80073dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073e0:	059a      	lsls	r2, r3, #22
 80073e2:	d4ef      	bmi.n	80073c4 <__smakebuf_r+0x18>
 80073e4:	f023 0303 	bic.w	r3, r3, #3
 80073e8:	f043 0302 	orr.w	r3, r3, #2
 80073ec:	81a3      	strh	r3, [r4, #12]
 80073ee:	e7e3      	b.n	80073b8 <__smakebuf_r+0xc>
 80073f0:	4b0d      	ldr	r3, [pc, #52]	; (8007428 <__smakebuf_r+0x7c>)
 80073f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80073f4:	89a3      	ldrh	r3, [r4, #12]
 80073f6:	6020      	str	r0, [r4, #0]
 80073f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073fc:	81a3      	strh	r3, [r4, #12]
 80073fe:	9b00      	ldr	r3, [sp, #0]
 8007400:	6120      	str	r0, [r4, #16]
 8007402:	6163      	str	r3, [r4, #20]
 8007404:	9b01      	ldr	r3, [sp, #4]
 8007406:	b15b      	cbz	r3, 8007420 <__smakebuf_r+0x74>
 8007408:	4630      	mov	r0, r6
 800740a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800740e:	f000 f8d1 	bl	80075b4 <_isatty_r>
 8007412:	b128      	cbz	r0, 8007420 <__smakebuf_r+0x74>
 8007414:	89a3      	ldrh	r3, [r4, #12]
 8007416:	f023 0303 	bic.w	r3, r3, #3
 800741a:	f043 0301 	orr.w	r3, r3, #1
 800741e:	81a3      	strh	r3, [r4, #12]
 8007420:	89a0      	ldrh	r0, [r4, #12]
 8007422:	4305      	orrs	r5, r0
 8007424:	81a5      	strh	r5, [r4, #12]
 8007426:	e7cd      	b.n	80073c4 <__smakebuf_r+0x18>
 8007428:	080071bd 	.word	0x080071bd

0800742c <_malloc_usable_size_r>:
 800742c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007430:	1f18      	subs	r0, r3, #4
 8007432:	2b00      	cmp	r3, #0
 8007434:	bfbc      	itt	lt
 8007436:	580b      	ldrlt	r3, [r1, r0]
 8007438:	18c0      	addlt	r0, r0, r3
 800743a:	4770      	bx	lr

0800743c <_raise_r>:
 800743c:	291f      	cmp	r1, #31
 800743e:	b538      	push	{r3, r4, r5, lr}
 8007440:	4604      	mov	r4, r0
 8007442:	460d      	mov	r5, r1
 8007444:	d904      	bls.n	8007450 <_raise_r+0x14>
 8007446:	2316      	movs	r3, #22
 8007448:	6003      	str	r3, [r0, #0]
 800744a:	f04f 30ff 	mov.w	r0, #4294967295
 800744e:	bd38      	pop	{r3, r4, r5, pc}
 8007450:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007452:	b112      	cbz	r2, 800745a <_raise_r+0x1e>
 8007454:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007458:	b94b      	cbnz	r3, 800746e <_raise_r+0x32>
 800745a:	4620      	mov	r0, r4
 800745c:	f000 f830 	bl	80074c0 <_getpid_r>
 8007460:	462a      	mov	r2, r5
 8007462:	4601      	mov	r1, r0
 8007464:	4620      	mov	r0, r4
 8007466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800746a:	f000 b817 	b.w	800749c <_kill_r>
 800746e:	2b01      	cmp	r3, #1
 8007470:	d00a      	beq.n	8007488 <_raise_r+0x4c>
 8007472:	1c59      	adds	r1, r3, #1
 8007474:	d103      	bne.n	800747e <_raise_r+0x42>
 8007476:	2316      	movs	r3, #22
 8007478:	6003      	str	r3, [r0, #0]
 800747a:	2001      	movs	r0, #1
 800747c:	e7e7      	b.n	800744e <_raise_r+0x12>
 800747e:	2400      	movs	r4, #0
 8007480:	4628      	mov	r0, r5
 8007482:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007486:	4798      	blx	r3
 8007488:	2000      	movs	r0, #0
 800748a:	e7e0      	b.n	800744e <_raise_r+0x12>

0800748c <raise>:
 800748c:	4b02      	ldr	r3, [pc, #8]	; (8007498 <raise+0xc>)
 800748e:	4601      	mov	r1, r0
 8007490:	6818      	ldr	r0, [r3, #0]
 8007492:	f7ff bfd3 	b.w	800743c <_raise_r>
 8007496:	bf00      	nop
 8007498:	20000010 	.word	0x20000010

0800749c <_kill_r>:
 800749c:	b538      	push	{r3, r4, r5, lr}
 800749e:	2300      	movs	r3, #0
 80074a0:	4d06      	ldr	r5, [pc, #24]	; (80074bc <_kill_r+0x20>)
 80074a2:	4604      	mov	r4, r0
 80074a4:	4608      	mov	r0, r1
 80074a6:	4611      	mov	r1, r2
 80074a8:	602b      	str	r3, [r5, #0]
 80074aa:	f7fa fc76 	bl	8001d9a <_kill>
 80074ae:	1c43      	adds	r3, r0, #1
 80074b0:	d102      	bne.n	80074b8 <_kill_r+0x1c>
 80074b2:	682b      	ldr	r3, [r5, #0]
 80074b4:	b103      	cbz	r3, 80074b8 <_kill_r+0x1c>
 80074b6:	6023      	str	r3, [r4, #0]
 80074b8:	bd38      	pop	{r3, r4, r5, pc}
 80074ba:	bf00      	nop
 80074bc:	20000328 	.word	0x20000328

080074c0 <_getpid_r>:
 80074c0:	f7fa bc64 	b.w	8001d8c <_getpid>

080074c4 <__sread>:
 80074c4:	b510      	push	{r4, lr}
 80074c6:	460c      	mov	r4, r1
 80074c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074cc:	f000 f894 	bl	80075f8 <_read_r>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	bfab      	itete	ge
 80074d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074d6:	89a3      	ldrhlt	r3, [r4, #12]
 80074d8:	181b      	addge	r3, r3, r0
 80074da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074de:	bfac      	ite	ge
 80074e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80074e2:	81a3      	strhlt	r3, [r4, #12]
 80074e4:	bd10      	pop	{r4, pc}

080074e6 <__swrite>:
 80074e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ea:	461f      	mov	r7, r3
 80074ec:	898b      	ldrh	r3, [r1, #12]
 80074ee:	4605      	mov	r5, r0
 80074f0:	05db      	lsls	r3, r3, #23
 80074f2:	460c      	mov	r4, r1
 80074f4:	4616      	mov	r6, r2
 80074f6:	d505      	bpl.n	8007504 <__swrite+0x1e>
 80074f8:	2302      	movs	r3, #2
 80074fa:	2200      	movs	r2, #0
 80074fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007500:	f000 f868 	bl	80075d4 <_lseek_r>
 8007504:	89a3      	ldrh	r3, [r4, #12]
 8007506:	4632      	mov	r2, r6
 8007508:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800750c:	81a3      	strh	r3, [r4, #12]
 800750e:	4628      	mov	r0, r5
 8007510:	463b      	mov	r3, r7
 8007512:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800751a:	f000 b817 	b.w	800754c <_write_r>

0800751e <__sseek>:
 800751e:	b510      	push	{r4, lr}
 8007520:	460c      	mov	r4, r1
 8007522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007526:	f000 f855 	bl	80075d4 <_lseek_r>
 800752a:	1c43      	adds	r3, r0, #1
 800752c:	89a3      	ldrh	r3, [r4, #12]
 800752e:	bf15      	itete	ne
 8007530:	6560      	strne	r0, [r4, #84]	; 0x54
 8007532:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007536:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800753a:	81a3      	strheq	r3, [r4, #12]
 800753c:	bf18      	it	ne
 800753e:	81a3      	strhne	r3, [r4, #12]
 8007540:	bd10      	pop	{r4, pc}

08007542 <__sclose>:
 8007542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007546:	f000 b813 	b.w	8007570 <_close_r>
	...

0800754c <_write_r>:
 800754c:	b538      	push	{r3, r4, r5, lr}
 800754e:	4604      	mov	r4, r0
 8007550:	4608      	mov	r0, r1
 8007552:	4611      	mov	r1, r2
 8007554:	2200      	movs	r2, #0
 8007556:	4d05      	ldr	r5, [pc, #20]	; (800756c <_write_r+0x20>)
 8007558:	602a      	str	r2, [r5, #0]
 800755a:	461a      	mov	r2, r3
 800755c:	f7fa fc54 	bl	8001e08 <_write>
 8007560:	1c43      	adds	r3, r0, #1
 8007562:	d102      	bne.n	800756a <_write_r+0x1e>
 8007564:	682b      	ldr	r3, [r5, #0]
 8007566:	b103      	cbz	r3, 800756a <_write_r+0x1e>
 8007568:	6023      	str	r3, [r4, #0]
 800756a:	bd38      	pop	{r3, r4, r5, pc}
 800756c:	20000328 	.word	0x20000328

08007570 <_close_r>:
 8007570:	b538      	push	{r3, r4, r5, lr}
 8007572:	2300      	movs	r3, #0
 8007574:	4d05      	ldr	r5, [pc, #20]	; (800758c <_close_r+0x1c>)
 8007576:	4604      	mov	r4, r0
 8007578:	4608      	mov	r0, r1
 800757a:	602b      	str	r3, [r5, #0]
 800757c:	f7fa fc60 	bl	8001e40 <_close>
 8007580:	1c43      	adds	r3, r0, #1
 8007582:	d102      	bne.n	800758a <_close_r+0x1a>
 8007584:	682b      	ldr	r3, [r5, #0]
 8007586:	b103      	cbz	r3, 800758a <_close_r+0x1a>
 8007588:	6023      	str	r3, [r4, #0]
 800758a:	bd38      	pop	{r3, r4, r5, pc}
 800758c:	20000328 	.word	0x20000328

08007590 <_fstat_r>:
 8007590:	b538      	push	{r3, r4, r5, lr}
 8007592:	2300      	movs	r3, #0
 8007594:	4d06      	ldr	r5, [pc, #24]	; (80075b0 <_fstat_r+0x20>)
 8007596:	4604      	mov	r4, r0
 8007598:	4608      	mov	r0, r1
 800759a:	4611      	mov	r1, r2
 800759c:	602b      	str	r3, [r5, #0]
 800759e:	f7fa fc5a 	bl	8001e56 <_fstat>
 80075a2:	1c43      	adds	r3, r0, #1
 80075a4:	d102      	bne.n	80075ac <_fstat_r+0x1c>
 80075a6:	682b      	ldr	r3, [r5, #0]
 80075a8:	b103      	cbz	r3, 80075ac <_fstat_r+0x1c>
 80075aa:	6023      	str	r3, [r4, #0]
 80075ac:	bd38      	pop	{r3, r4, r5, pc}
 80075ae:	bf00      	nop
 80075b0:	20000328 	.word	0x20000328

080075b4 <_isatty_r>:
 80075b4:	b538      	push	{r3, r4, r5, lr}
 80075b6:	2300      	movs	r3, #0
 80075b8:	4d05      	ldr	r5, [pc, #20]	; (80075d0 <_isatty_r+0x1c>)
 80075ba:	4604      	mov	r4, r0
 80075bc:	4608      	mov	r0, r1
 80075be:	602b      	str	r3, [r5, #0]
 80075c0:	f7fa fc58 	bl	8001e74 <_isatty>
 80075c4:	1c43      	adds	r3, r0, #1
 80075c6:	d102      	bne.n	80075ce <_isatty_r+0x1a>
 80075c8:	682b      	ldr	r3, [r5, #0]
 80075ca:	b103      	cbz	r3, 80075ce <_isatty_r+0x1a>
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	bd38      	pop	{r3, r4, r5, pc}
 80075d0:	20000328 	.word	0x20000328

080075d4 <_lseek_r>:
 80075d4:	b538      	push	{r3, r4, r5, lr}
 80075d6:	4604      	mov	r4, r0
 80075d8:	4608      	mov	r0, r1
 80075da:	4611      	mov	r1, r2
 80075dc:	2200      	movs	r2, #0
 80075de:	4d05      	ldr	r5, [pc, #20]	; (80075f4 <_lseek_r+0x20>)
 80075e0:	602a      	str	r2, [r5, #0]
 80075e2:	461a      	mov	r2, r3
 80075e4:	f7fa fc50 	bl	8001e88 <_lseek>
 80075e8:	1c43      	adds	r3, r0, #1
 80075ea:	d102      	bne.n	80075f2 <_lseek_r+0x1e>
 80075ec:	682b      	ldr	r3, [r5, #0]
 80075ee:	b103      	cbz	r3, 80075f2 <_lseek_r+0x1e>
 80075f0:	6023      	str	r3, [r4, #0]
 80075f2:	bd38      	pop	{r3, r4, r5, pc}
 80075f4:	20000328 	.word	0x20000328

080075f8 <_read_r>:
 80075f8:	b538      	push	{r3, r4, r5, lr}
 80075fa:	4604      	mov	r4, r0
 80075fc:	4608      	mov	r0, r1
 80075fe:	4611      	mov	r1, r2
 8007600:	2200      	movs	r2, #0
 8007602:	4d05      	ldr	r5, [pc, #20]	; (8007618 <_read_r+0x20>)
 8007604:	602a      	str	r2, [r5, #0]
 8007606:	461a      	mov	r2, r3
 8007608:	f7fa fbe1 	bl	8001dce <_read>
 800760c:	1c43      	adds	r3, r0, #1
 800760e:	d102      	bne.n	8007616 <_read_r+0x1e>
 8007610:	682b      	ldr	r3, [r5, #0]
 8007612:	b103      	cbz	r3, 8007616 <_read_r+0x1e>
 8007614:	6023      	str	r3, [r4, #0]
 8007616:	bd38      	pop	{r3, r4, r5, pc}
 8007618:	20000328 	.word	0x20000328

0800761c <_init>:
 800761c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761e:	bf00      	nop
 8007620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007622:	bc08      	pop	{r3}
 8007624:	469e      	mov	lr, r3
 8007626:	4770      	bx	lr

08007628 <_fini>:
 8007628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800762a:	bf00      	nop
 800762c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800762e:	bc08      	pop	{r3}
 8007630:	469e      	mov	lr, r3
 8007632:	4770      	bx	lr
